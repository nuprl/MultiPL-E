language: swift
name: HumanEval_143_words_in_sentence
results:
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    let words = sentence.split(separator:\
    \ \" \")\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9qmlpuf2.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmp9qmlpuf2.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9qmlpuf2.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(n: word.count) {\n    \
    \        result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpz2ufxi2g.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n/tmp/tmpz2ufxi2g.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz2ufxi2g.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 0
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    let primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    var result = [String]()\n    for word in words {\n\
    \        if primes.contains(word.count) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.split(separator: \" \").filter { is_prime(n:\
    \ $0.count) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp4ldrtp6i.swift:17:52: error: cannot find 'is_prime' in scope\n\
    \    return sentence.split(separator: \" \").filter { is_prime(n: $0.count) }.joined(separator:\
    \ \" \")\n                                                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(num: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpsuqepjhw.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(num: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 0
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    let primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    var result = [String]()\n    for word in words {\n\
    \        if primes.contains(word.count) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if word.count.isPrime {\n   \
    \         result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmps__6cuf1.swift:20:23: error: value of type 'Int' has no member\
    \ 'isPrime'\n        if word.count.isPrime {\n           ~~~~~~~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(num: word.count) {\n  \
    \          result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp3zwtgmac.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(num: word.count) {\n           ^~~~~~~~\n/tmp/tmp3zwtgmac.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3zwtgmac.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(num: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpsuqepjhw.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(num: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(n: word.count) {\n    \
    \        result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpz2ufxi2g.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n/tmp/tmpz2ufxi2g.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz2ufxi2g.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    let words = sentence.split(separator:\
    \ \" \")\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9qmlpuf2.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmp9qmlpuf2.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9qmlpuf2.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(num: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpsuqepjhw.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(num: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    let primes\
    \ = Set(primes(upTo: 100))\n    var result = [String]()\n    for word in words\
    \ {\n        if primes.contains(word.count) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpi8wr2d2y.swift:18:22: error: use of local variable 'primes' before\
    \ its declaration\n    let primes = Set(primes(upTo: 100))\n                 \
    \    ^\n/tmp/tmpi8wr2d2y.swift:18:9: note: 'primes' declared here\n    let primes\
    \ = Set(primes(upTo: 100))\n        ^\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(length) {\n            result.append(String(word))\n       \
    \ }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(words_in_sentence(sentence: \"This is a test\") == \"is\"\
    )\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpf1aoabxc.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if word.count.isPrime() {\n       \
    \     result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpukc5jko1.swift:20:23: error: value of type 'Int' has no member\
    \ 'isPrime'\n        if word.count.isPrime() {\n           ~~~~~~~~~~ ^~~~~~~\n\
    /tmp/tmpukc5jko1.swift:24:19: error: value of type 'String' has no member 'trimmingCharacters'\n\
    \    return result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpukc5jko1.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(n: word.count) {\n    \
    \        result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpz2ufxi2g.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n/tmp/tmpz2ufxi2g.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz2ufxi2g.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(n: word.count) {\n    \
    \        result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpz2ufxi2g.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n/tmp/tmpz2ufxi2g.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz2ufxi2g.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = \"\"\n    let words = sentence.split(separator:\
    \ \" \")\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9qmlpuf2.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmp9qmlpuf2.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9qmlpuf2.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(num: word.count) {\n  \
    \          result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp3zwtgmac.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(num: word.count) {\n           ^~~~~~~~\n/tmp/tmp3zwtgmac.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3zwtgmac.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(n: length) {\n            result.append(String(word))\n    \
    \    }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpmyyinaka.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    let primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    var result = \"\"\n    for word in words {\n      \
    \  if primes.contains(word.count) {\n            result += word + \" \"\n    \
    \    }\n    }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpmxsm9oe7.swift:25:19: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpmxsm9oe7.swift:25:43: error: cannot\
    \ infer contextual base in reference to member 'whitespaces'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(n: word.count) {\n    \
    \        result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpz2ufxi2g.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n/tmp/tmpz2ufxi2g.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz2ufxi2g.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(num: word.count) {\n  \
    \          result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp3zwtgmac.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(num: word.count) {\n           ^~~~~~~~\n/tmp/tmp3zwtgmac.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3zwtgmac.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    var result = [String]()\n    let words = sentence.split(separator:\
    \ \" \")\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpmhdrckpu.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(num: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpsuqepjhw.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(num: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(n: word.count) {\n    \
    \        result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpz2ufxi2g.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n/tmp/tmpz2ufxi2g.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz2ufxi2g.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(num: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpsuqepjhw.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(num: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(num: word.count) {\n  \
    \          result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp3zwtgmac.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(num: word.count) {\n           ^~~~~~~~\n/tmp/tmp3zwtgmac.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp3zwtgmac.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.split(separator: \" \").filter { is_prime(n:\
    \ $0.count) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp4ldrtp6i.swift:17:52: error: cannot find 'is_prime' in scope\n\
    \    return sentence.split(separator: \" \").filter { is_prime(n: $0.count) }.joined(separator:\
    \ \" \")\n                                                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.split(separator: \" \").filter { is_prime(n:\
    \ $0.count) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp4ldrtp6i.swift:17:52: error: cannot find 'is_prime' in scope\n\
    \    return sentence.split(separator: \" \").filter { is_prime(n: $0.count) }.joined(separator:\
    \ \" \")\n                                                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 0
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    let primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    var result = [String]()\n    for word in words {\n\
    \        if primes.contains(word.count) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 0
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    let primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    var result = [String]()\n    for word in words {\n\
    \        if primes.contains(word.count) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(num: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpsuqepjhw.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(num: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let len = word.count\n      \
    \  if len > 1 && len % 2 == 1 {\n            var isPrime = true\n            for\
    \ i in 2..<len {\n                if len % i == 0 {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if isPrime {\n                result.append(String(word))\n          \
    \  }\n        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp632mm57y/tmp632mm57y.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea4e230c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea4df27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea4df27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea4df267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp632mm57y                        0x000056408805baa7 <unavailable> + 6823

    5    libc.so.6                          0x00002aea4e41c460 __libc_start_main +
    245

    6    tmp632mm57y                        0x000056408805b6e9 <unavailable> + 5865

    '
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(num: word.count) {\n  \
    \          result += \" \\(word)\"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp9qc5zcwx.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(num: word.count) {\n           ^~~~~~~~\n/tmp/tmp9qc5zcwx.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp9qc5zcwx.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(num: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpsuqepjhw.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(num: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: -4
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let len = word.count\n      \
    \  if len > 1 && len % 2 == 1 {\n            var isPrime = true\n            for\
    \ i in 2..<len {\n                if len % i == 0 {\n                    isPrime\
    \ = false\n                    break\n                }\n            }\n     \
    \       if isPrime {\n                result.append(String(word))\n          \
    \  }\n        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: Exception
  stderr: 'tmp632mm57y/tmp632mm57y.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aea4e230c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aea4df27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aea4df27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aea4df267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp632mm57y                        0x000056408805baa7 <unavailable> + 6823

    5    libc.so.6                          0x00002aea4e41c460 __libc_start_main +
    245

    6    tmp632mm57y                        0x000056408805b6e9 <unavailable> + 5865

    '
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    let primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    var result = \"\"\n    for word in words {\n      \
    \  if primes.contains(word.count) {\n            result += word + \" \"\n    \
    \    }\n    }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(words_in_sentence(sentence: \"This is a test\"\
    ) == \"is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") ==\
    \ \"go for\")\nassert(words_in_sentence(sentence: \"there is no place available\
    \ here\") == \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I\
    \ am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go\
    \ for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\") ==\
    \ \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpmxsm9oe7.swift:25:19: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpmxsm9oe7.swift:25:43: error: cannot\
    \ infer contextual base in reference to member 'whitespaces'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 0
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    let primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    var result = [String]()\n    for word in words {\n\
    \        if primes.contains(word.count) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(word.count) {\n \
    \           result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpogeqg_84.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    return sentence.split(separator: \" \").filter { is_prime(n:\
    \ $0.count) }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(words_in_sentence(sentence: \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence:\
    \ \"lets go for swimming\") == \"go for\")\nassert(words_in_sentence(sentence:\
    \ \"there is no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp4ldrtp6i.swift:17:52: error: cannot find 'is_prime' in scope\n\
    \    return sentence.split(separator: \" \").filter { is_prime(n: $0.count) }.joined(separator:\
    \ \" \")\n                                                   ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(num: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpsuqepjhw.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(num: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let length = word.count\n   \
    \     if is_prime(number: length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpjok9uyw7.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let wordLength = word.count\n\
    \        if isPrime(wordLength) {\n            result.append(String(word))\n \
    \       }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmp867ltvnx.swift:21:12: error: cannot find 'isPrime' in scope\n \
    \       if isPrime(wordLength) {\n           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(n: word.count) {\n\
    \            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpcaa8com9.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(n: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = \"\"\n    for word in words {\n        if is_prime(number: word.count) {\n\
    \            result += word + \" \"\n        }\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpvj_vxfpl.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n/tmp/tmpvj_vxfpl.swift:24:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpvj_vxfpl.swift:24:43: error: cannot infer contextual base in reference\
    \ to member 'whitespaces'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824461
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        let word_length = word.count\n\
    \        if is_prime(number: word_length) {\n            result.append(String(word))\n\
    \        }\n    }\n    return result.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(words_in_sentence(sentence: \"This is a test\") == \"\
    is\")\nassert(words_in_sentence(sentence: \"lets go for swimming\") == \"go for\"\
    )\nassert(words_in_sentence(sentence: \"there is no place available here\") ==\
    \ \"there is no place\")\nassert(words_in_sentence(sentence: \"Hi I am Hussein\"\
    ) == \"Hi am Hussein\")\nassert(words_in_sentence(sentence: \"go for it\") ==\
    \ \"go for it\")\nassert(words_in_sentence(sentence: \"here\") == \"\")\nassert(words_in_sentence(sentence:\
    \ \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmprd26o9e2.swift:21:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word_length) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
- exit_code: 1
  program: "\n/// You are given a string representing a sentence,\n/// the sentence\
    \ contains some words separated by a space,\n/// and you have to return a string\
    \ that contains the words from the original sentence,\n/// whose lengths are prime\
    \ numbers,\n/// the order of the words in the new string should be the same as\
    \ the original one.\n/// Example 1:\n/// Input: sentence = \"This is a test\"\n\
    /// Output: \"is\"\n/// Example 2:\n/// Input: sentence = \"lets go for swimming\"\
    \n/// Output: \"go for\"\n/// Constraints:\n/// * 1 <= len(sentence) <= 100\n\
    /// * sentence contains only letters\nfunc words_in_sentence(sentence: String)\
    \ -> String {\n    let words = sentence.split(separator: \" \")\n    var result\
    \ = [String]()\n    for word in words {\n        if is_prime(number: word.count)\
    \ {\n            result.append(String(word))\n        }\n    }\n    return result.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(words_in_sentence(sentence:\
    \ \"This is a test\") == \"is\")\nassert(words_in_sentence(sentence: \"lets go\
    \ for swimming\") == \"go for\")\nassert(words_in_sentence(sentence: \"there is\
    \ no place available here\") == \"there is no place\")\nassert(words_in_sentence(sentence:\
    \ \"Hi I am Hussein\") == \"Hi am Hussein\")\nassert(words_in_sentence(sentence:\
    \ \"go for it\") == \"go for it\")\nassert(words_in_sentence(sentence: \"here\"\
    ) == \"\")\nassert(words_in_sentence(sentence: \"here is\") == \"is\")"
  status: SyntaxError
  stderr: "/tmp/tmpecxbyrms.swift:20:12: error: cannot find 'is_prime' in scope\n\
    \        if is_prime(number: word.count) {\n           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824460
