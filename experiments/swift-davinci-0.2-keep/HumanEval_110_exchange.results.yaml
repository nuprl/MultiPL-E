language: swift
name: HumanEval_110_exchange
results:
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1IsEven = lst1.filter { $0 % 2 == 0 }.count == lst1.count\n  \
    \  let lst2IsEven = lst2.filter { $0 % 2 == 0 }.count == lst2.count\n    return\
    \ lst1IsEven || lst2IsEven ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpte7ti1_4/tmpte7ti1_4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8308002c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8307cf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8307cf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8307cf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpte7ti1_4                        0x000056392f1e962d <unavailable> + 5677

    5    libc.so.6                          0x00002b83081ee460 __libc_start_main +
    245

    6    tmpte7ti1_4                        0x000056392f1e91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count + lst2Even.count >= lst1.count ?\
    \ \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count + lst2Even.count >= lst1.count ?\
    \ \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let evens = lst1.filter { $0 % 2 == 0 }\n    let odds = lst2.filter {\
    \ $0 % 2 != 0 }\n    return evens.count + odds.count == lst1.count + lst2.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp11mm6dlj/tmp11mm6dlj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d4ce90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d4cb87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d4cb87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d4cb867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11mm6dlj                        0x000055d7282f362d <unavailable> + 5677

    5    libc.so.6                          0x00002b1d4d07c460 __libc_start_main +
    245

    6    tmp11mm6dlj                        0x000055d7282f31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count == 0 {\n\
    \        return \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\
    \n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5iqm_6e8/tmp5iqm_6e8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee357cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee354c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee354c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee354c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5iqm_6e8                        0x000055c4c42028ef <unavailable> + 6383

    5    libc.so.6                          0x00002aee359b6460 __libc_start_main +
    245

    6    tmp5iqm_6e8                        0x000055c4c4202349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count && lst2Even.count == lst2.count {\n     \
    \   return \"YES\"\n    }\n    if lst1Odd.count == lst1.count && lst2Odd.count\
    \ == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return \"YES\"\
    \n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpgv_c449g/tmpgv_c449g.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1e3dc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1e3abdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1e3abd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1e3abc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgv_c449g                        0x000056396a8ff62d <unavailable> + 5677

    5    libc.so.6                          0x00002ad1e3fb2460 __libc_start_main +
    245

    6    tmpgv_c449g                        0x000056396a8ff1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count {\n        return \"YES\"\n    }\n    if\
    \ lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count\
    \ + lst2Even.count >= lst1.count {\n        return \"YES\"\n    }\n    if lst1Odd.count\
    \ + lst2Odd.count >= lst2.count {\n        return \"YES\"\n    }\n    return \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp9wtayw4k/tmp9wtayw4k.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9504f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9501efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9501ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9501ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9wtayw4k                        0x000055737e52379f <unavailable> + 6047

    5    libc.so.6                          0x00002ad9506e4460 __libc_start_main +
    245

    6    tmp9wtayw4k                        0x000055737e5231f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens += 1\n\
    \        } else {\n            odds += 1\n        }\n    }\n    for i in lst2\
    \ {\n        if i % 2 == 0 {\n            evens += 1\n        } else {\n     \
    \       odds += 1\n        }\n    }\n    if odds % 2 == 0 {\n        return \"\
    YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmprjnfvgut/tmprjnfvgut.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a41627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a4131eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a4131e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a4131d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjnfvgut                        0x000055eccb2f0b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b4a41813460 __libc_start_main +
    245

    6    tmprjnfvgut                        0x000055eccb2f0249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Odd = [Int]()\n   \
    \ var lst2Even = [Int]()\n    for i in 0..<lst1.count {\n        if lst1[i] %\
    \ 2 != 0 {\n            lst1Odd.append(lst1[i])\n        }\n    }\n    for i in\
    \ 0..<lst2.count {\n        if lst2[i] % 2 == 0 {\n            lst2Even.append(lst2[i])\n\
    \        }\n    }\n    if lst1Odd.count == lst2Even.count {\n        return \"\
    YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmptb_f4pzc/tmptb_f4pzc.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b502ad94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b502aa8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b502aa8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b502aa8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptb_f4pzc                        0x0000564b846450c6 <unavailable> + 8390

    5    libc.so.6                          0x00002b502af80460 __libc_start_main +
    245

    6    tmptb_f4pzc                        0x0000564b84644329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count + lst2Even.count == lst1.count\
    \ + lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count + lst2Odd.count\
    \ == lst1.count + lst2.count {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpg34w3hdn/tmpg34w3hdn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fef512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fef209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fef209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fef2087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg34w3hdn                        0x0000560ec55b362d <unavailable> + 5677

    5    libc.so.6                          0x00002b6fef6fe460 __libc_start_main +
    245

    6    tmpg34w3hdn                        0x0000560ec55b31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    for i in lst1 {\n        if i % 2 != 0 {\n            for j in lst2 {\n\
    \                if j % 2 == 0 {\n                    return \"YES\"\n       \
    \         }\n            }\n        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp2qqcunbo/tmp2qqcunbo.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abf9605ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abf95d55b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abf95d55988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abf95d547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2qqcunbo                        0x000055f515f317ef <unavailable> + 6127

    5    libc.so.6                          0x00002abf9624a460 __libc_start_main +
    245

    6    tmp2qqcunbo                        0x000055f515f31249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    break\n              \
    \  }\n            }\n        }\n    }\n    for i in 0..<lst1.count {\n       \
    \ if lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmps3_dwpno/tmps3_dwpno.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50f2e72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50f2b69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50f2b69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50f2b687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3_dwpno                        0x0000564ea0f0287f <unavailable> + 6271

    5    libc.so.6                          0x00002b50f305e460 __libc_start_main +
    245

    6    tmps3_dwpno                        0x0000564ea0f022d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    var lst1EvenCount = lst1Even.count\n    var lst2EvenCount = lst2Even.count\n\
    \    var lst1OddCount = lst1Odd.count\n    var lst2OddCount = lst2Odd.count\n\
    \    var lst1EvenIndex = 0\n    var lst2EvenIndex = 0\n    var lst1OddIndex =\
    \ 0\n    var lst2OddIndex = 0\n    var lst1EvenIndexMax = lst1EvenCount - 1\n\
    \    var lst2EvenIndexMax = lst2EvenCount - 1\n    var lst1OddIndexMax = lst1OddCount\
    \ - 1\n    var lst2OddIndexMax = lst2OddCount - 1\n    var lst1EvenIndexMin =\
    \ 0\n    var lst2EvenIndexMin = 0\n    var lst1OddIndexMin = 0\n    var lst2OddIndexMin\
    \ = 0\n    var lst1EvenIndexMinMax = 0\n    var lst2EvenIndexMinMax = 0\n    var\
    \ lst1OddIndexMinMax = 0\n    var lst2OddIndexMinMax = 0\n    var lst1EvenIndexMaxMin\
    \ = 0\n    var lst2EvenIndexMaxMin = 0\n    var lst1OddIndexMaxMin = 0\n    var\
    \ lst2OddIndexMaxMin = 0\n    var lst1EvenIndexMinMaxMin = 0\n    var lst2EvenIndexMinMaxMin\
    \ = 0\n    var lst1OddIndexMinMaxMin = 0\n    var lst2OddIndexMinMaxMin = 0\n\
    \    var lst1EvenIndexMaxMinMax = 0\n    var lst2EvenIndexMaxMinMax = 0\n   \n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmpnrl6vo6y.swift:14:9: warning: variable 'lst1' was never mutated;\
    \ consider changing to 'let' constant\n    var lst1 = lst1\n    ~~~ ^\n    let\n\
    /tmp/tmpnrl6vo6y.swift:15:9: warning: variable 'lst2' was never mutated; consider\
    \ changing to 'let' constant\n    var lst2 = lst2\n    ~~~ ^\n    let\n/tmp/tmpnrl6vo6y.swift:16:9:\
    \ warning: variable 'lst1Even' was never mutated; consider changing to 'let' constant\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    ~~~ ^\n    let\n/tmp/tmpnrl6vo6y.swift:17:9:\
    \ warning: variable 'lst2Even' was never mutated; consider changing to 'let' constant\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    ~~~ ^\n    let\n/tmp/tmpnrl6vo6y.swift:18:9:\
    \ warning: variable 'lst1Odd' was never mutated; consider changing to 'let' constant\n\
    \    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    ~~~ ^\n    let\n/tmp/tmpnrl6vo6y.swift:19:9:\
    \ warning: variable 'lst2Odd' was never mutated; consider changing to 'let' constant\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    ~~~ ^\n    let\n/tmp/tmpnrl6vo6y.swift:20:9:\
    \ warning: variable 'lst1EvenCount' was never mutated; consider changing to 'let'\
    \ constant\n    var lst1EvenCount = lst1Even.count\n    ~~~ ^\n    let\n/tmp/tmpnrl6vo6y.swift:21:9:\
    \ warning: variable 'lst2EvenCount' was never mutated; consider changing to 'let'\
    \ constant\n    var lst2EvenCount = lst2Even.count\n    ~~~ ^\n    let\n/tmp/tmpnrl6vo6y.swift:22:9:\
    \ warning: variable 'lst1OddCount' was never mutated; consider changing to 'let'\
    \ constant\n    var lst1OddCount = lst1Odd.count\n    ~~~ ^\n    let\n/tmp/tmpnrl6vo6y.swift:23:9:\
    \ warning: variable 'lst2OddCount' was never mutated; consider changing to 'let'\
    \ constant\n    var lst2OddCount = lst2Odd.count\n    ~~~ ^\n    let\n/tmp/tmpnrl6vo6y.swift:24:9:\
    \ warning: initialization of variable 'lst1EvenIndex' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var lst1EvenIndex = 0\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpnrl6vo6y.swift:25:9: warning: initialization\
    \ of variable 'lst2EvenIndex' was never used; consider replacing with assignment\
    \ to '_' or re"
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var i = 0\n    var j = 0\n\
    \    while i < lst1.count && j < lst2.count {\n        if lst1[i] % 2 == 0 {\n\
    \            i += 1\n        } else if lst2[j] % 2 == 1 {\n            j += 1\n\
    \        } else {\n            let temp = lst1[i]\n            lst1[i] = lst2[j]\n\
    \            lst2[j] = temp\n            i += 1\n            j += 1\n        }\n\
    \    }\n    return lst1.filter { $0 % 2 == 1 }.isEmpty ? \"YES\" : \"NO\"\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    for i in\
    \ 0..<lst1.count {\n        if lst1[i] % 2 == 0 {\n            evens += 1\n  \
    \      }\n    }\n    var odds = lst1.count - evens\n    for i in 0..<lst2.count\
    \ {\n        if lst2[i] % 2 == 0 {\n            odds -= 1\n        } else {\n\
    \            evens -= 1\n        }\n        if odds < 0 || evens < 0 {\n     \
    \       return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpmwdeuh2n/tmpmwdeuh2n.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab78b10bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab78ae02b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab78ae02988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab78ae017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmwdeuh2n                        0x00005609b3ea0026 <unavailable> + 8230

    5    libc.so.6                          0x00002ab78b2f7460 __libc_start_main +
    245

    6    tmpmwdeuh2n                        0x00005609b3e9f289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var even = 0\n    var odd =\
    \ 0\n    for i in lst1 {\n        if i % 2 == 0 {\n            even += 1\n   \
    \     } else {\n            odd += 1\n        }\n    }\n    for i in lst2 {\n\
    \        if i % 2 == 0 {\n            even += 1\n        } else {\n          \
    \  odd += 1\n        }\n    }\n    if even % 2 == 0 && odd % 2 == 0 {\n      \
    \  return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp9pdrbr6v/tmp9pdrbr6v.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea9970c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea9667b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea9667988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea96667b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9pdrbr6v                        0x000055cc33222b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b4ea9b5c460 __libc_start_main +
    245

    6    tmp9pdrbr6v                        0x000055cc33222249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let evens = lst1.filter { $0 % 2 == 0 }\n    let odds = lst2.filter {\
    \ $0 % 2 != 0 }\n    return evens.count == lst1.count && odds.count == lst2.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpmidb6jzy/tmpmidb6jzy.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0bc7168c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0bc6e5fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0bc6e5f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0bc6e5e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmidb6jzy                        0x0000560f0aacd62d <unavailable> + 5677

    5    libc.so.6                          0x00002b0bc7354460 __libc_start_main +
    245

    6    tmpmidb6jzy                        0x0000560f0aacd1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for num in lst1 {\n        if num % 2 == 0 {\n         \
    \   evens.append(num)\n        } else {\n            odds.append(num)\n      \
    \  }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            evens.append(num)\n\
    \        } else {\n            odds.append(num)\n        }\n    }\n    if odds.count\
    \ == 0 {\n        return \"YES\"\n    } else if evens.count == 0 {\n        return\
    \ \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpk9r173e7/tmpk9r173e7.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5270fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af526df5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af526df5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af526df47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk9r173e7                        0x0000564a013a38ef <unavailable> + 6383

    5    libc.so.6                          0x00002af5272ea460 __libc_start_main +
    245

    6    tmpk9r173e7                        0x0000564a013a3349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = lst1.filter { $0\
    \ % 2 == 0 }\n    var odds = lst2.filter { $0 % 2 != 0 }\n    var i = 0\n    while\
    \ i < lst1.count {\n        if lst1[i] % 2 != 0 {\n            if odds.count >\
    \ 0 {\n                lst1[i] = odds.removeFirst()\n            } else {\n  \
    \              return \"NO\"\n            }\n        }\n        i += 1\n    }\n\
    \    i = 0\n    while i < lst2.count {\n        if lst2[i] % 2 == 0 {\n      \
    \      if evens.count > 0 {\n                lst2[i] = evens.removeFirst()\n \
    \           } else {\n                return \"NO\"\n            }\n        }\n\
    \        i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpwxt8klm5/tmpwxt8klm5.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b29891fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2988ef4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2988ef4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2988ef37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwxt8klm5                        0x000055c3b6b008ef <unavailable> + 6383

    5    libc.so.6                          0x00002b29893e9460 __libc_start_main +
    245

    6    tmpwxt8klm5                        0x000055c3b6b00349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = lst1.filter { $0\
    \ % 2 == 0 }\n    var odds = lst2.filter { $0 % 2 != 0 }\n    if evens.count ==\
    \ lst1.count {\n        return \"YES\"\n    }\n    if odds.count == lst2.count\
    \ {\n        return \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    evens = lst1.filter { $0 % 2 == 0 }\n       \
    \             if evens.count == lst1.count {\n                        return \"\
    YES\"\n                    }\n                }\n            }\n        }\n  \
    \  }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmphwmhc0it/tmphwmhc0it.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50acc62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50ac959b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50ac959988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50ac9587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphwmhc0it                        0x000056256b9ce93f <unavailable> + 6463

    5    libc.so.6                          0x00002b50ace4e460 __libc_start_main +
    245

    6    tmphwmhc0it                        0x000056256b9ce399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7_dsd3lx/tmp7_dsd3lx.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac60af49c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac60ac40b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac60ac40988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac60ac3f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7_dsd3lx                        0x0000564e1d5aa47d <unavailable> + 5245

    5    libc.so.6                          0x00002ac60b135460 __libc_start_main +
    245

    6    tmp7_dsd3lx                        0x0000564e1d5aa049 <unavailable> + 4169

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1IsEven = lst1.filter { $0 % 2 == 0 }.count == lst1.count\n  \
    \  let lst2IsEven = lst2.filter { $0 % 2 == 0 }.count == lst2.count\n    if lst1IsEven\
    \ && lst2IsEven {\n        return \"YES\"\n    }\n    if lst1IsEven && !lst2IsEven\
    \ {\n        return \"NO\"\n    }\n    if !lst1IsEven && lst2IsEven {\n      \
    \  return \"NO\"\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp50ziqqbo/tmp50ziqqbo.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb37262c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb36f59b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb36f59988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb36f587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp50ziqqbo                        0x000055ed3e10a79f <unavailable> + 6047

    5    libc.so.6                          0x00002aeb3744e460 __libc_start_main +
    245

    6    tmp50ziqqbo                        0x000055ed3e10a1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let evens = lst1.filter { $0 % 2 == 0 }\n    let odds = lst2.filter {\
    \ $0 % 2 != 0 }\n    return evens.count + odds.count == lst1.count + lst2.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp11mm6dlj/tmp11mm6dlj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d4ce90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d4cb87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d4cb87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d4cb867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11mm6dlj                        0x000055d7282f362d <unavailable> + 5677

    5    libc.so.6                          0x00002b1d4d07c460 __libc_start_main +
    245

    6    tmp11mm6dlj                        0x000055d7282f31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count {\n        return \"YES\"\
    \n    }\n    if lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n\
    \    if lst1Even.count + lst2Even.count >= lst1.count {\n        return \"YES\"\
    \n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count == 0 {\n\
    \        return \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\
    \n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5iqm_6e8/tmp5iqm_6e8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee357cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee354c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee354c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee354c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5iqm_6e8                        0x000055c4c42028ef <unavailable> + 6383

    5    libc.so.6                          0x00002aee359b6460 __libc_start_main +
    245

    6    tmp5iqm_6e8                        0x000055c4c4202349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter{ $0 % 2 == 0 }\n    let lst2Even = lst2.filter{\
    \ $0 % 2 == 0 }\n    let lst1Odd = lst1.filter{ $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter{ $0 % 2 != 0 }\n    if lst1Even.count + lst2Odd.count == lst1.count\
    \ && lst2Even.count + lst1Odd.count == lst2.count {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpa9d4tx0f/tmpa9d4tx0f.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b218832cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2188023b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2188023988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21880227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa9d4tx0f                        0x0000563f47083ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b2188518460 __libc_start_main +
    245

    6    tmpa9d4tx0f                        0x0000563f470831f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1, lst2 = lst2\n    for i in 0..<lst1.count {\n       \
    \ if lst1[i] % 2 == 1 {\n            for j in 0..<lst2.count {\n             \
    \   if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n           \
    \         lst2[j] = lst1[i]\n                    break\n                }\n  \
    \          }\n        }\n    }\n    return lst1.filter { $0 % 2 == 1 }.isEmpty\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpld8o86oh/tmpld8o86oh.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeecd835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeecd52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeecd52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeecd52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpld8o86oh                        0x000055d49ec009cf <unavailable> + 6607

    5    libc.so.6                          0x00002aeecda21460 __libc_start_main +
    245

    6    tmpld8o86oh                        0x000055d49ec00429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var isExchange = false\n  \
    \  for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for j\
    \ in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n               \
    \     lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n             \
    \       isExchange = true\n                    break\n                }\n    \
    \        }\n        }\n        if !isExchange {\n            return \"NO\"\n \
    \       }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvu49ikzz/tmpvu49ikzz.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513688cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5136583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5136583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51365827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu49ikzz                        0x00005633d284387f <unavailable> + 6271

    5    libc.so.6                          0x00002b5136a78460 __libc_start_main +
    245

    6    tmpvu49ikzz                        0x00005633d28432d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count == lst1.count || lst2Even.count ==\
    \ lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5bvxv8my/tmp5bvxv8my.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f6375cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f63453b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f63453988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f634527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvxv8my                        0x000055caa909f62d <unavailable> + 5677

    5    libc.so.6                          0x00002b9f63948460 __libc_start_main +
    245

    6    tmp5bvxv8my                        0x000055caa909f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1IsEven = lst1.filter { $0 % 2 == 0 }.count == lst1.count\n  \
    \  let lst2IsEven = lst2.filter { $0 % 2 == 0 }.count == lst2.count\n    return\
    \ lst1IsEven || lst2IsEven ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpte7ti1_4/tmpte7ti1_4.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8308002c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8307cf9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8307cf9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8307cf87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpte7ti1_4                        0x000056392f1e962d <unavailable> + 5677

    5    libc.so.6                          0x00002b83081ee460 __libc_start_main +
    245

    6    tmpte7ti1_4                        0x000056392f1e91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count + lst2Even.count == lst1.count +\
    \ lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpovg5uuho/tmpovg5uuho.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08258d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08255c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08255c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08255c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovg5uuho                        0x0000557555c8d62d <unavailable> + 5677

    5    libc.so.6                          0x00002b0825abc460 __libc_start_main +
    245

    6    tmpovg5uuho                        0x0000557555c8d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count && lst2Even.count == lst2.count {\n     \
    \   return \"YES\"\n    }\n    if lst1Odd.count == lst1.count && lst2Odd.count\
    \ == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count == lst1.count\
    \ {\n        for i in 0..<lst2.count {\n            if lst2[i] % 2 != 0 {\n  \
    \              lst2.remove(at: i)\n                lst2.append(lst1Odd[0])\n \
    \               lst1.remove(at: lst1.index(of: lst1Odd[0])!)\n               \
    \ lst1.append(lst2Odd[0])\n                lst2.remove(at: lst2.index(of: lst2Odd[0])!)\n\
    \                lst1Even = lst1.filter { $0 % 2 == 0 }\n                lst2Even\
    \ = lst2.filter { $0 % 2 == 0 }\n                lst1Odd = lst1.filter { $0 %\
    \ 2 != 0 }\n                lst2Odd = lst2.filter { $0 % 2 != 0 }\n          \
    \      if lst1Even.count == lst1.count && lst2Even.count == lst2.count {\n   \
    \                 return \"YES\"\n                }\n                if lst1Odd.count\
    \ == lst1.count && lst2Odd.count == lst2.count {\n                    return \"\
    YES\"\n                }\n            }\n        }\n    }\n    if lst2Even.count\
    \ == lst2.count {\n\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmpravctek0.swift:70:62: error: expected '}' at end of brace statement\n\
    assert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")\n            \
    \                                                 ^\n/tmp/tmpravctek0.swift:13:51:\
    \ note: to match this opening '{'\nfunc exchange(lst1: [Int], lst2: [Int]) ->\
    \ String {\n                                                  ^\n/tmp/tmpravctek0.swift:31:38:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \        lst1.remove(at: lst1.index(of: lst1Odd[0])!)\n                      \
    \               ^\n/tmp/tmpravctek0.swift:31:38: note: use 'firstIndex(of:)' instead\n\
    \                lst1.remove(at: lst1.index(of: lst1Odd[0])!)\n              \
    \                       ^~~~~\n                                     firstIndex\n\
    /tmp/tmpravctek0.swift:33:38: warning: 'index(of:)' is deprecated: renamed to\
    \ 'firstIndex(of:)'\n                lst2.remove(at: lst2.index(of: lst2Odd[0])!)\n\
    \                                     ^\n/tmp/tmpravctek0.swift:33:38: note: use\
    \ 'firstIndex(of:)' instead\n                lst2.remove(at: lst2.index(of: lst2Odd[0])!)\n\
    \                                     ^~~~~\n                                \
    \     firstIndex\n/tmp/tmpravctek0.swift:52:6: error: operator functions can only\
    \ be declared at global or in type scope\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens += 1\n\
    \        } else {\n            odds += 1\n        }\n    }\n    for i in lst2\
    \ {\n        if i % 2 == 0 {\n            evens += 1\n        } else {\n     \
    \       odds += 1\n        }\n    }\n    if evens % 2 == 0 && odds % 2 == 0 {\n\
    \        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp3sm671hj/tmp3sm671hj.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a230eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a22de1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a22de1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a22de07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3sm671hj                        0x0000564abbffdb17 <unavailable> + 6935

    5    libc.so.6                          0x00002b8a232d6460 __libc_start_main +
    245

    6    tmp3sm671hj                        0x0000564abbffd249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count + lst2Odd.count ==\
    \ lst1.count && lst2Even.count + lst1Odd.count == lst2.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7pzcjc8_/tmp7pzcjc8_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac1c90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac1c601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac1c601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac1c6007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pzcjc8_                        0x00005570cc900ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002aac1caf6460 __libc_start_main +
    245

    6    tmp7pzcjc8_                        0x00005570cc9001f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var isExchange = false\n  \
    \  for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for j\
    \ in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n               \
    \     lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n             \
    \       isExchange = true\n                    break\n                }\n    \
    \        }\n        }\n        if !isExchange {\n            return \"NO\"\n \
    \       }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvu49ikzz/tmpvu49ikzz.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513688cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5136583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5136583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51365827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu49ikzz                        0x00005633d284387f <unavailable> + 6271

    5    libc.so.6                          0x00002b5136a78460 __libc_start_main +
    245

    6    tmpvu49ikzz                        0x00005633d28432d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count && lst2Even.count == lst2.count {\n     \
    \   return \"YES\"\n    }\n    if lst1Odd.count == lst1.count && lst2Odd.count\
    \ == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\n    if lst1Odd.count\
    \ == lst1.count && lst2Even.count == lst2.count {\n        return \"NO\"\n   \
    \ }\n    if lst1Even.count == lst1.count && lst2Even.count != lst2.count {\n \
    \       return \"YES\"\n    }\n    if lst1Odd.count == lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"NO\"\n    }\n    if lst1Even.count != lst1.count\
    \ && lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count\
    \ != lst1.count && lst2Even.count != lst2.count {\n        return \"NO\"\n   \
    \ }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpz2omln3c/tmpz2omln3c.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3dbddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3dbad2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3dbad2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3dbad17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2omln3c                        0x000055d5495a362d <unavailable> + 5677

    5    libc.so.6                          0x00002ac3dbfc7460 __libc_start_main +
    245

    6    tmpz2omln3c                        0x000055d5495a31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    break\n              \
    \  }\n            }\n        }\n    }\n    for i in 0..<lst1.count {\n       \
    \ if lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmps3_dwpno/tmps3_dwpno.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50f2e72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50f2b69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50f2b69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50f2b687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3_dwpno                        0x0000564ea0f0287f <unavailable> + 6271

    5    libc.so.6                          0x00002b50f305e460 __libc_start_main +
    245

    6    tmps3_dwpno                        0x0000564ea0f022d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count + lst2Even.count == lst1.count\
    \ + lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count + lst2Odd.count\
    \ == lst1.count + lst2.count {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpg34w3hdn/tmpg34w3hdn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fef512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fef209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fef209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fef2087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg34w3hdn                        0x0000560ec55b362d <unavailable> + 5677

    5    libc.so.6                          0x00002b6fef6fe460 __libc_start_main +
    245

    6    tmpg34w3hdn                        0x0000560ec55b31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count + lst2Even.count >= lst1.count ?\
    \ \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var isExchange = false\n  \
    \  for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for j\
    \ in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n               \
    \     lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n             \
    \       isExchange = true\n                    break\n                }\n    \
    \        }\n        }\n        if !isExchange {\n            return \"NO\"\n \
    \       }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvu49ikzz/tmpvu49ikzz.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513688cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5136583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5136583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51365827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu49ikzz                        0x00005633d284387f <unavailable> + 6271

    5    libc.so.6                          0x00002b5136a78460 __libc_start_main +
    245

    6    tmpvu49ikzz                        0x00005633d28432d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count + lst2Even.count >= lst1.count ?\
    \ \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens += 1\n\
    \        } else {\n            odds += 1\n        }\n    }\n    for i in lst2\
    \ {\n        if i % 2 == 0 {\n            evens += 1\n        } else {\n     \
    \       odds += 1\n        }\n    }\n    if odds == 0 {\n        return \"YES\"\
    \n    } else if evens == 0 {\n        return \"NO\"\n    } else {\n        return\
    \ \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpiimlafez/tmpiimlafez.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b74d7825c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b74d751cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b74d751c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b74d751b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiimlafez                        0x0000564bfd9727ef <unavailable> + 6127

    5    libc.so.6                          0x00002b74d7a11460 __libc_start_main +
    245

    6    tmpiimlafez                        0x0000564bfd972249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if evens.count >= odds.count\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = lst1.filter { $0\
    \ % 2 == 0 }\n    var odds = lst2.filter { $0 % 2 != 0 }\n    if evens.count ==\
    \ lst1.count {\n        return \"YES\"\n    }\n    if odds.count == lst2.count\
    \ {\n        return \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    evens = lst1.filter { $0 % 2 == 0 }\n       \
    \             if evens.count == lst1.count {\n                        return \"\
    YES\"\n                    }\n                }\n            }\n        }\n  \
    \  }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmphwmhc0it/tmphwmhc0it.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50acc62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50ac959b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50ac959988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50ac9587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphwmhc0it                        0x000056256b9ce93f <unavailable> + 6463

    5    libc.so.6                          0x00002b50ace4e460 __libc_start_main +
    245

    6    tmphwmhc0it                        0x000056256b9ce399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count {\n        return \"YES\"\n    }\n    if\
    \ lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count\
    \ + lst2Even.count >= lst1.count {\n        return \"YES\"\n    }\n    if lst1Odd.count\
    \ + lst2Odd.count >= lst2.count {\n        return \"YES\"\n    }\n    return \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp9wtayw4k/tmp9wtayw4k.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9504f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9501efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9501ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9501ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9wtayw4k                        0x000055737e52379f <unavailable> + 6047

    5    libc.so.6                          0x00002ad9506e4460 __libc_start_main +
    245

    6    tmp9wtayw4k                        0x000055737e5231f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evenCount = 0\n    for\
    \ i in 0..<lst1.count {\n        if lst1[i] % 2 == 0 {\n            evenCount\
    \ += 1\n        }\n    }\n    if evenCount == lst1.count {\n        return \"\
    YES\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n \
    \           for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    evenCount += 1\n                    break\n             \
    \   }\n            }\n        }\n    }\n    if evenCount == lst1.count {\n   \
    \     return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7ahofa27/tmp7ahofa27.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3926504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39261fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39261fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39261fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ahofa27                        0x00005615ec50b87f <unavailable> + 6271

    5    libc.so.6                          0x00002b39266f0460 __libc_start_main +
    245

    6    tmp7ahofa27                        0x00005615ec50b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count && lst2Even.count == lst2.count {\n     \
    \   return \"YES\"\n    }\n    if lst1Odd.count == lst1.count && lst2Odd.count\
    \ == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\n    if lst1Odd.count\
    \ == lst1.count && lst2Even.count == lst2.count {\n        return \"NO\"\n   \
    \ }\n    if lst1Even.count == lst1.count {\n        for i in 0..<lst2.count {\n\
    \            if lst2[i] % 2 != 0 {\n                lst2.remove(at: i)\n     \
    \           lst2.append(lst1[0])\n                lst1.remove(at: 0)\n       \
    \         lst1.append(lst2[i])\n                lst1Even = lst1.filter { $0 %\
    \ 2 == 0 }\n                lst2Even = lst2.filter { $0 % 2 == 0 }\n         \
    \       if lst1Even.count == lst1.count && lst2Even.count == lst2.count {\n  \
    \                  return \"YES\"\n                }\n            }\n        }\n\
    \    }\n    if lst2Even.count == lst2.count {\n        for i in 0..<lst1.count\
    \ {\n            if lst1[i] % 2 != 0 {\n                lst1.remove(at: i)\n \
    \               lst1.append(lst2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmpid4z151l.swift:52:1: error: expected ')' in expression list\n}\n\
    ^\n/tmp/tmpid4z151l.swift:51:28: note: to match this opening '('\n           \
    \     lst1.append(lst2\n                           ^\n/tmp/tmpid4z151l.swift:73:62:\
    \ error: expected '}' at end of brace statement\nassert(exchange(lst1: [100, 200],\
    \ lst2: [200, 200]) == \"YES\")\n                                            \
    \                 ^\n/tmp/tmpid4z151l.swift:48:33: note: to match this opening\
    \ '{'\n        for i in 0..<lst1.count {\n                                ^\n\
    /tmp/tmpid4z151l.swift:73:62: error: expected '}' at end of brace statement\n\
    assert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")\n            \
    \                                                 ^\n/tmp/tmpid4z151l.swift:47:37:\
    \ note: to match this opening '{'\n    if lst2Even.count == lst2.count {\n   \
    \                                 ^\n/tmp/tmpid4z151l.swift:73:62: error: expected\
    \ '}' at end of brace statement\nassert(exchange(lst1: [100, 200], lst2: [200,\
    \ 200]) == \"YES\")\n                                                        \
    \     ^\n/tmp/tmpid4z151l.swift:13:51: note: to match this opening '{'\nfunc exchange(lst1:\
    \ [Int], lst2: [Int]) -> String {\n                                          \
    \        ^\n/tmp/tmpid4z151l.swift:51:22: error: no exact matches in call to instance\
    \ method 'append'\n                lst1.append(lst2\n                     ^\n\
    Swift.Array:7:37: note: incorrect labels for candidate (have: '(_:)', expected:\
    \ '(contentsOf:)')\n    @inlinable public mutating func append<S>(contentsOf newElements:\
    \ __owned S) where Element == S.Element, S : Sequence\n                      \
    \              ^\nSwift.RangeReplaceableCollection:5:37: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(contentsOf:)')\n    @inlinable public\
    \ mutating func append<S>(contentsOf newElements: __owned S) where S : Sequence,\
    \ Self.Element == S.Element\n                                    ^\n/tmp/tmpid4z151l.swift:55:6:\
    \ error: operator functions can only be declared at global or in type scope\n\
    func ==(left: [(Int, Int)]"
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    break\n              \
    \  }\n            }\n        }\n    }\n    for i in 0..<lst1.count {\n       \
    \ if lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmps3_dwpno/tmps3_dwpno.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50f2e72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50f2b69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50f2b69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50f2b687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3_dwpno                        0x0000564ea0f0287f <unavailable> + 6271

    5    libc.so.6                          0x00002b50f305e460 __libc_start_main +
    245

    6    tmps3_dwpno                        0x0000564ea0f022d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count && lst2Even.count == lst2.count {\n     \
    \   return \"YES\"\n    }\n    if lst1Odd.count == lst1.count && lst2Odd.count\
    \ == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\n    if lst1Odd.count\
    \ == lst1.count && lst2Even.count == lst2.count {\n        return \"NO\"\n   \
    \ }\n    if lst1Even.count == lst1.count && lst2Even.count < lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Odd.count == lst1.count && lst2Odd.count\
    \ < lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count < lst1.count\
    \ && lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n    if lst1Odd.count\
    \ < lst1.count && lst2Odd.count == lst2.count {\n        return \"YES\"\n    }\n\
    \    if lst1Even.count < lst1.count && lst2Even.count < lst2.count {\n       \
    \ return \"YES\"\n    }\n    if lst1Odd.count < lst1.count && lst2Odd.count <\
    \ lst2.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpc7u1l94p/tmpc7u1l94p.swift:67: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba1ea8a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba1ea59bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba1ea59b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba1ea59a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc7u1l94p                        0x0000559a2908379f <unavailable> + 6047

    5    libc.so.6                          0x00002ba1eaa90460 __libc_start_main +
    245

    6    tmpc7u1l94p                        0x0000559a290831f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var evens = lst1.filter { $0 % 2 == 0 }\n    var odds = lst2.filter {\
    \ $0 % 2 != 0 }\n    return evens.count + odds.count == lst1.count + lst2.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpcyya6_n_/tmpcyya6_n_.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e3d0b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e3cdadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e3cdad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e3cdac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcyya6_n_                        0x000055bcf882662d <unavailable> + 5677

    5    libc.so.6                          0x00002b6e3d2a2460 __libc_start_main +
    245

    6    tmpcyya6_n_                        0x000055bcf88261f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    for i in\
    \ 0..<lst1.count {\n        if lst1[i] % 2 == 0 {\n            evens += 1\n  \
    \      }\n    }\n    if evens == lst1.count {\n        return \"YES\"\n    }\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         evens += 1\n                    break\n                }\n         \
    \   }\n        }\n    }\n    if evens == lst1.count {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpdc6e6yo5/tmpdc6e6yo5.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f2848bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f28182b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f28182988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f281817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdc6e6yo5                        0x00005577b126387f <unavailable> + 6271

    5    libc.so.6                          0x00002b7f28677460 __libc_start_main +
    245

    6    tmpdc6e6yo5                        0x00005577b12632d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count + lst2Odd.count == lst1.count\
    \ && lst2Even.count + lst1Odd.count == lst2.count {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp0ak0jo_t/tmp0ak0jo_t.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d8189dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d81594b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d81594988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d815937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ak0jo_t                        0x00005589c4be7ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b6d81a89460 __libc_start_main +
    245

    6    tmp0ak0jo_t                        0x00005589c4be71f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var i = 0\n    var j = 0\n\
    \    while i < lst1.count && j < lst2.count {\n        if lst1[i] % 2 == 0 {\n\
    \            i += 1\n        } else if lst2[j] % 2 == 1 {\n            j += 1\n\
    \        } else {\n            lst1[i] = lst2[j]\n            i += 1\n       \
    \     j += 1\n        }\n    }\n    return lst1.filter { $0 % 2 == 1 }.isEmpty\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count {\n        return \"YES\"\
    \n    }\n    if lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpe41naxbr/tmpe41naxbr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaba2beac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaba28e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaba28e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaba28e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe41naxbr                        0x0000563f67ea962d <unavailable> + 5677

    5    libc.so.6                          0x00002aaba2dd6460 __libc_start_main +
    245

    6    tmpe41naxbr                        0x0000563f67ea91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var isExchange = false\n  \
    \  for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for j\
    \ in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n               \
    \     lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n             \
    \       isExchange = true\n                    break\n                }\n    \
    \        }\n        }\n        if !isExchange {\n            return \"NO\"\n \
    \       }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvu49ikzz/tmpvu49ikzz.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b513688cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5136583b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5136583988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51365827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvu49ikzz                        0x00005633d284387f <unavailable> + 6271

    5    libc.so.6                          0x00002b5136a78460 __libc_start_main +
    245

    6    tmpvu49ikzz                        0x00005633d28432d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count == 0 {\n\
    \        return \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\
    \n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5iqm_6e8/tmp5iqm_6e8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee357cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee354c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee354c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee354c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5iqm_6e8                        0x000055c4c42028ef <unavailable> + 6383

    5    libc.so.6                          0x00002aee359b6460 __libc_start_main +
    245

    6    tmp5iqm_6e8                        0x000055c4c4202349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1 = lst1.filter { $0 % 2 != 0 }\n    let lst2 = lst2.filter {\
    \ $0 % 2 == 0 }\n    return lst1.count == lst2.count ? \"YES\" : \"NO\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpstk_059b/tmpstk_059b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab824a74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab82476bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab82476b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab82476a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpstk_059b                        0x000055e934e20f96 <unavailable> + 8086

    5    libc.so.6                          0x00002ab824c60460 __libc_start_main +
    245

    6    tmpstk_059b                        0x000055e934e201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    var evens2 = [Int]()\n    var odds2 = [Int]()\n    for i\
    \ in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    for i in lst2 {\n     \
    \   if i % 2 == 0 {\n            evens2.append(i)\n        } else {\n        \
    \    odds2.append(i)\n        }\n    }\n    if odds.count == evens2.count {\n\
    \        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpe_cmdve5/tmpe_cmdve5.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb79bd6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb798cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb798cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb798cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe_cmdve5                        0x000055b2dfa040e6 <unavailable> + 8422

    5    libc.so.6                          0x00002aeb79dc2460 __libc_start_main +
    245

    6    tmpe_cmdve5                        0x000055b2dfa03349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for num in lst1 {\n        if num % 2 == 0 {\n         \
    \   evens.append(num)\n        } else {\n            odds.append(num)\n      \
    \  }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            evens.append(num)\n\
    \        } else {\n            odds.append(num)\n        }\n    }\n    if odds.count\
    \ == 0 {\n        return \"YES\"\n    } else if evens.count == 0 {\n        return\
    \ \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpk9r173e7/tmpk9r173e7.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5270fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af526df5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af526df5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af526df47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk9r173e7                        0x0000564a013a38ef <unavailable> + 6383

    5    libc.so.6                          0x00002af5272ea460 __libc_start_main +
    245

    6    tmpk9r173e7                        0x0000564a013a3349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    break\n              \
    \  }\n            }\n        }\n    }\n    for i in 0..<lst1.count {\n       \
    \ if lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmps3_dwpno/tmps3_dwpno.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50f2e72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50f2b69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50f2b69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50f2b687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3_dwpno                        0x0000564ea0f0287f <unavailable> + 6271

    5    libc.so.6                          0x00002b50f305e460 __libc_start_main +
    245

    6    tmps3_dwpno                        0x0000564ea0f022d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let evens = lst1.filter { $0 % 2 == 0 }\n    let odds = lst2.filter {\
    \ $0 % 2 != 0 }\n    return evens.count + odds.count == lst1.count + lst2.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp11mm6dlj/tmp11mm6dlj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d4ce90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d4cb87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d4cb87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d4cb867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11mm6dlj                        0x000055d7282f362d <unavailable> + 5677

    5    libc.so.6                          0x00002b1d4d07c460 __libc_start_main +
    245

    6    tmp11mm6dlj                        0x000055d7282f31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Odd = [Int]()\n   \
    \ var lst2Even = [Int]()\n    for i in 0..<lst1.count {\n        if lst1[i] %\
    \ 2 != 0 {\n            lst1Odd.append(lst1[i])\n        }\n    }\n    for i in\
    \ 0..<lst2.count {\n        if lst2[i] % 2 == 0 {\n            lst2Even.append(lst2[i])\n\
    \        }\n    }\n    if lst1Odd.count == lst2Even.count {\n        return \"\
    YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmptb_f4pzc/tmptb_f4pzc.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b502ad94c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b502aa8bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b502aa8b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b502aa8a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptb_f4pzc                        0x0000564b846450c6 <unavailable> + 8390

    5    libc.so.6                          0x00002b502af80460 __libc_start_main +
    245

    6    tmptb_f4pzc                        0x0000564b84644329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count {\n        return \"YES\"\n    }\n    if\
    \ lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count\
    \ + lst2Odd.count == lst1.count {\n        return \"YES\"\n    }\n    if lst2Even.count\
    \ + lst1Odd.count == lst2.count {\n        return \"YES\"\n    }\n    return \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var even = 0\n    var odd =\
    \ 0\n    for num in lst1 {\n        if num % 2 == 0 {\n            even += 1\n\
    \        } else {\n            odd += 1\n        }\n    }\n    for num in lst2\
    \ {\n        if num % 2 == 0 {\n            even += 1\n        } else {\n    \
    \        odd += 1\n        }\n    }\n    if even % 2 == 0 && odd % 2 == 0 {\n\
    \        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpbi_9u2cs/tmpbi_9u2cs.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9991bf1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b99918e8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b99918e8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b99918e77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbi_9u2cs                        0x000055bee2c8ab17 <unavailable> + 6935

    5    libc.so.6                          0x00002b9991ddd460 __libc_start_main +
    245

    6    tmpbi_9u2cs                        0x000055bee2c8a249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    for i in\
    \ 0..<lst1.count {\n        if lst1[i] % 2 == 0 {\n            evens += 1\n  \
    \      }\n    }\n    if evens == lst1.count {\n        return \"YES\"\n    }\n\
    \    for i in 0..<lst1.count {\n        for j in 0..<lst2.count {\n          \
    \  if lst1[i] % 2 != 0 && lst2[j] % 2 == 0 {\n                lst1[i] = lst2[j]\n\
    \                lst2[j] = lst1[i]\n                evens += 1\n            }\n\
    \        }\n    }\n    if evens == lst1.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp89boz29h/tmp89boz29h.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1f689efc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1f686e6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1f686e6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1f686e57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp89boz29h                        0x0000557d0218987f <unavailable> + 6271

    5    libc.so.6                          0x00002b1f68bdb460 __libc_start_main +
    245

    6    tmp89boz29h                        0x0000557d021892d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count == lst1.count || lst2Even.count ==\
    \ lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5bvxv8my/tmp5bvxv8my.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f6375cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f63453b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f63453988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f634527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvxv8my                        0x000055caa909f62d <unavailable> + 5677

    5    libc.so.6                          0x00002b9f63948460 __libc_start_main +
    245

    6    tmp5bvxv8my                        0x000055caa909f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count + lst2Even.count == lst1.count + lst2.count {\n       \
    \ return \"YES\"\n    }\n    if lst1Odd.count + lst2Odd.count == lst1.count +\
    \ lst2.count {\n        return \"NO\"\n    }\n    if lst1Even.count + lst2Even.count\
    \ > lst1.count + lst2.count {\n        return \"YES\"\n    }\n    if lst1Odd.count\
    \ + lst2Odd.count > lst1.count + lst2.count {\n        return \"NO\"\n    }\n\
    \    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpo9gztuck/tmpo9gztuck.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acf224e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acf221dbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acf221db988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acf221da7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo9gztuck                        0x0000560e6db1579f <unavailable> + 6047

    5    libc.so.6                          0x00002acf226d0460 __libc_start_main +
    245

    6    tmpo9gztuck                        0x0000560e6db151f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    let temp = lst1[i]\n   \
    \                 lst1[i] = lst2[j]\n                    lst2[j] = temp\n    \
    \                break\n                }\n            }\n        }\n    }\n \
    \   for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            return\
    \ \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evenCount = 0\n    var\
    \ oddCount = 0\n    for i in lst1 {\n        if i % 2 == 0 {\n            evenCount\
    \ += 1\n        } else {\n            oddCount += 1\n        }\n    }\n    for\
    \ i in lst2 {\n        if i % 2 == 0 {\n            evenCount += 1\n        }\
    \ else {\n            oddCount += 1\n        }\n    }\n    if evenCount % 2 ==\
    \ 0 && oddCount % 2 == 0 {\n        return \"YES\"\n    } else {\n        return\
    \ \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpfq3extn2/tmpfq3extn2.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad98a8c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad98a5bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad98a5bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad98a5bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfq3extn2                        0x0000559812ec5b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ad98aab2460 __libc_start_main +
    245

    6    tmpfq3extn2                        0x0000559812ec5249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if evens.count >= odds.count\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var i = 0\n    while i < lst1.count\
    \ {\n        if lst1[i] % 2 == 1 {\n            var j = 0\n            while j\
    \ < lst2.count {\n                if lst2[j] % 2 == 0 {\n                    lst1[i]\
    \ = lst2[j]\n                    lst2[j] = lst1[i]\n                    break\n\
    \                }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp1wd94qfj/tmp1wd94qfj.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b65a77ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b65a74d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b65a74d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b65a74d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1wd94qfj                        0x00005610f1d2877f <unavailable> + 6015

    5    libc.so.6                          0x00002b65a79c9460 __libc_start_main +
    245

    6    tmp1wd94qfj                        0x00005610f1d281d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for num in lst1 {\n        if num % 2 == 0 {\n            evens +=\
    \ 1\n        } else {\n            odds += 1\n        }\n    }\n    for num in\
    \ lst2 {\n        if num % 2 == 0 {\n            evens += 1\n        } else {\n\
    \            odds += 1\n        }\n    }\n    if evens % 2 == 0 && odds % 2 ==\
    \ 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmphu1u6af7/tmphu1u6af7.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36a1e63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36a1b5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36a1b5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36a1b597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphu1u6af7                        0x0000558c9f0ceb17 <unavailable> + 6935

    5    libc.so.6                          0x00002b36a204f460 __libc_start_main +
    245

    6    tmphu1u6af7                        0x0000558c9f0ce249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count + lst2Odd.count ==\
    \ lst1.count && lst2Even.count + lst1Odd.count == lst2.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7pzcjc8_/tmp7pzcjc8_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac1c90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac1c601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac1c601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac1c6007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pzcjc8_                        0x00005570cc900ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002aac1caf6460 __libc_start_main +
    245

    6    tmp7pzcjc8_                        0x00005570cc9001f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens += 1\n\
    \        } else {\n            odds += 1\n        }\n    }\n    for i in lst2\
    \ {\n        if i % 2 == 0 {\n            evens += 1\n        } else {\n     \
    \       odds += 1\n        }\n    }\n    if evens % 2 == 0 && odds % 2 == 0 {\n\
    \        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp3sm671hj/tmp3sm671hj.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a230eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a22de1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a22de1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a22de07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3sm671hj                        0x0000564abbffdb17 <unavailable> + 6935

    5    libc.so.6                          0x00002b8a232d6460 __libc_start_main +
    245

    6    tmp3sm671hj                        0x0000564abbffd249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var i = 0\n    while i < lst1.count\
    \ {\n        if lst1[i] % 2 == 1 {\n            var j = 0\n            while j\
    \ < lst2.count {\n                if lst2[j] % 2 == 0 {\n                    let\
    \ temp = lst1[i]\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = temp\n                    break\n                }\n                j += 1\n\
    \            }\n            if j == lst2.count {\n                return \"NO\"\
    \n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count + lst2Even.count == lst1.count\
    \ + lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count + lst2Odd.count\
    \ == lst1.count + lst2.count {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpg34w3hdn/tmpg34w3hdn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fef512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fef209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fef209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fef2087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg34w3hdn                        0x0000560ec55b362d <unavailable> + 5677

    5    libc.so.6                          0x00002b6fef6fe460 __libc_start_main +
    245

    6    tmpg34w3hdn                        0x0000560ec55b31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1IsEven = lst1.filter { $0 % 2 == 0 }.count == lst1.count\n  \
    \  let lst2IsEven = lst2.filter { $0 % 2 == 0 }.count == lst2.count\n    if lst1IsEven\
    \ && lst2IsEven {\n        return \"YES\"\n    }\n    if lst1IsEven {\n      \
    \  return lst2.filter { $0 % 2 != 0 }.count > 0 ? \"YES\" : \"NO\"\n    }\n  \
    \  if lst2IsEven {\n        return lst1.filter { $0 % 2 != 0 }.count > 0 ? \"\
    YES\" : \"NO\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5q4qkhh2/tmp5q4qkhh2.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab0a153cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab0a1233b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab0a1233988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab0a12327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5q4qkhh2                        0x000055a027ae362d <unavailable> + 5677

    5    libc.so.6                          0x00002ab0a1728460 __libc_start_main +
    245

    6    tmp5q4qkhh2                        0x000055a027ae31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count + lst2Even.count >= lst1.count ?\
    \ \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var i = 0\n    while i < lst1.count\
    \ {\n        if lst1[i] % 2 == 1 {\n            var j = 0\n            while j\
    \ < lst2.count {\n                if lst2[j] % 2 == 0 {\n                    let\
    \ temp = lst1[i]\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = temp\n                    break\n                }\n                j += 1\n\
    \            }\n            if j == lst2.count {\n                return \"NO\"\
    \n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824656
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if evens.count >= odds.count\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count == lst1.count && lst2Even.count\
    \ == lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"YES\"\n    } else if lst1Even.count\
    \ == lst1.count && lst2Odd.count == lst2.count {\n        return \"YES\"\n   \
    \ } else if lst1Odd.count == lst1.count && lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp3vazspup/tmp3vazspup.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac63f0b0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac63eda7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac63eda7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac63eda67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3vazspup                        0x0000562bf3ad762d <unavailable> + 5677

    5    libc.so.6                          0x00002ac63f29c460 __libc_start_main +
    245

    6    tmp3vazspup                        0x0000562bf3ad71f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1 = lst1.filter { $0 % 2 != 0 }\n    let lst2 = lst2.filter {\
    \ $0 % 2 == 0 }\n    return lst1.count == lst2.count ? \"YES\" : \"NO\"\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpstk_059b/tmpstk_059b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab824a74c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab82476bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab82476b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab82476a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpstk_059b                        0x000055e934e20f96 <unavailable> + 8086

    5    libc.so.6                          0x00002ab824c60460 __libc_start_main +
    245

    6    tmpstk_059b                        0x000055e934e201f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count == lst1.count || lst2Even.count ==\
    \ lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5bvxv8my/tmp5bvxv8my.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f6375cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f63453b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f63453988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f634527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvxv8my                        0x000055caa909f62d <unavailable> + 5677

    5    libc.so.6                          0x00002b9f63948460 __libc_start_main +
    245

    6    tmp5bvxv8my                        0x000055caa909f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count {\n        return \"YES\"\n    }\n    if\
    \ lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count\
    \ + lst2Even.count >= lst1.count {\n        return \"YES\"\n    }\n    if lst1Odd.count\
    \ + lst2Odd.count >= lst2.count {\n        return \"YES\"\n    }\n    return \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp9wtayw4k/tmp9wtayw4k.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9504f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9501efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9501ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9501ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9wtayw4k                        0x000055737e52379f <unavailable> + 6047

    5    libc.so.6                          0x00002ad9506e4460 __libc_start_main +
    245

    6    tmp9wtayw4k                        0x000055737e5231f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for num in lst1 {\n        if num % 2 == 0 {\n            evens +=\
    \ 1\n        } else {\n            odds += 1\n        }\n    }\n    for num in\
    \ lst2 {\n        if num % 2 == 0 {\n            evens += 1\n        } else {\n\
    \            odds += 1\n        }\n    }\n    if evens % 2 == 0 && odds % 2 ==\
    \ 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmphu1u6af7/tmphu1u6af7.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36a1e63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36a1b5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36a1b5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36a1b597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphu1u6af7                        0x0000558c9f0ceb17 <unavailable> + 6935

    5    libc.so.6                          0x00002b36a204f460 __libc_start_main +
    245

    6    tmphu1u6af7                        0x0000558c9f0ce249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count && lst2Even.count == lst2.count {\n     \
    \   return \"YES\"\n    }\n    if lst1Odd.count == lst1.count && lst2Odd.count\
    \ == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\n    if lst1Odd.count\
    \ == lst1.count && lst2Even.count == lst2.count {\n        return \"NO\"\n   \
    \ }\n    if lst1Even.count == lst1.count && lst2Even.count != lst2.count {\n \
    \       return \"YES\"\n    }\n    if lst1Odd.count == lst1.count && lst2Even.count\
    \ != lst2.count {\n        return \"NO\"\n    }\n    if lst1Even.count != lst1.count\
    \ && lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count\
    \ != lst1.count && lst2Even.count != lst2.count {\n        return \"NO\"\n   \
    \ }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpz2omln3c/tmpz2omln3c.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3dbddbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3dbad2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3dbad2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3dbad17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz2omln3c                        0x000055d5495a362d <unavailable> + 5677

    5    libc.so.6                          0x00002ac3dbfc7460 __libc_start_main +
    245

    6    tmpz2omln3c                        0x000055d5495a31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count + lst2Even.count == lst1.count\
    \ + lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count + lst2Odd.count\
    \ == lst1.count + lst2.count {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpg34w3hdn/tmpg34w3hdn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fef512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fef209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fef209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fef2087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg34w3hdn                        0x0000560ec55b362d <unavailable> + 5677

    5    libc.so.6                          0x00002b6fef6fe460 __libc_start_main +
    245

    6    tmpg34w3hdn                        0x0000560ec55b31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    var result = \"NO\"\n    \n    for i in lst1 {\n       \
    \ if i % 2 == 0 {\n            evens.append(i)\n        } else {\n           \
    \ odds.append(i)\n        }\n    }\n    \n    for i in lst2 {\n        if i %\
    \ 2 == 0 {\n            evens.append(i)\n        } else {\n            odds.append(i)\n\
    \        }\n    }\n    \n    if odds.count % 2 == 0 {\n        result = \"YES\"\
    \n    }\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpofwrgzw5/tmpofwrgzw5.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b38c2fd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b38c2cc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b38c2cc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b38c2cc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofwrgzw5                        0x000055a972f49c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b38c31bc460 __libc_start_main +
    245

    6    tmpofwrgzw5                        0x000055a972f49349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count && lst2Even.count == lst2.count {\n     \
    \   return \"YES\"\n    }\n    if lst1Odd.count == lst1.count && lst2Odd.count\
    \ == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count == lst1.count\
    \ {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Odd.count == lst1.count {\n        return\
    \ \"YES\"\n    }\n    if lst2Odd.count == lst2.count {\n        return \"YES\"\
    \n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpgv_c449g/tmpgv_c449g.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1e3dc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1e3abdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1e3abd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1e3abc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgv_c449g                        0x000056396a8ff62d <unavailable> + 5677

    5    libc.so.6                          0x00002ad1e3fb2460 __libc_start_main +
    245

    6    tmpgv_c449g                        0x000056396a8ff1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    break\n              \
    \  }\n            }\n        }\n    }\n    for i in 0..<lst1.count {\n       \
    \ if lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmps3_dwpno/tmps3_dwpno.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50f2e72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50f2b69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50f2b69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50f2b687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3_dwpno                        0x0000564ea0f0287f <unavailable> + 6271

    5    libc.so.6                          0x00002b50f305e460 __libc_start_main +
    245

    6    tmps3_dwpno                        0x0000564ea0f022d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count {\n        return \"YES\"\n    }\n    if\
    \ lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n    if lst1Odd.count\
    \ == lst1.count {\n        return \"NO\"\n    }\n    if lst2Odd.count == lst2.count\
    \ {\n        return \"NO\"\n    }\n    if lst1Even.count + lst2Even.count == lst1.count\
    \ + lst2.count {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpa44_pz5u/tmpa44_pz5u.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba36fd0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba36fa03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba36fa03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba36fa027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa44_pz5u                        0x000055c93cdde62d <unavailable> + 5677

    5    libc.so.6                          0x00002ba36fef8460 __libc_start_main +
    245

    6    tmpa44_pz5u                        0x000055c93cdde1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Odd.count == lst2Even.count {\n        return \"YES\"\n    } else\
    \ if lst1Even.count == lst2Odd.count {\n        return \"YES\"\n    } else {\n\
    \        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7wfiyz14/tmp7wfiyz14.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4ea6313c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4ea600ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4ea600a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4ea60097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wfiyz14                        0x0000562e70905f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b4ea64ff460 __libc_start_main +
    245

    6    tmp7wfiyz14                        0x0000562e709051f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var i = 0\n    var j = 0\n\
    \    while i < lst1.count && j < lst2.count {\n        if lst1[i] % 2 == 0 {\n\
    \            i += 1\n        } else if lst2[j] % 2 == 1 {\n            j += 1\n\
    \        } else {\n            lst1[i] = lst2[j]\n            lst2[j] = lst1[i]\n\
    \            i += 1\n            j += 1\n        }\n    }\n    return lst1.allSatisfy\
    \ { $0 % 2 == 0 } ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for num in lst1 {\n        if num % 2 == 0 {\n         \
    \   evens.append(num)\n        } else {\n            odds.append(num)\n      \
    \  }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            evens.append(num)\n\
    \        } else {\n            odds.append(num)\n        }\n    }\n    if odds.count\
    \ % 2 == 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n  \
    \  }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpfl_vi2kz/tmpfl_vi2kz.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c1328ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c12f85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c12f85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c12f847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfl_vi2kz                        0x0000558d4e71bc17 <unavailable> + 7191

    5    libc.so.6                          0x00002b0c1347a460 __libc_start_main +
    245

    6    tmpfl_vi2kz                        0x0000558d4e71b349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count + lst2Odd.count ==\
    \ lst1.count && lst2Even.count + lst1Odd.count == lst2.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7pzcjc8_/tmp7pzcjc8_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac1c90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac1c601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac1c601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac1c6007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pzcjc8_                        0x00005570cc900ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002aac1caf6460 __libc_start_main +
    245

    6    tmp7pzcjc8_                        0x00005570cc9001f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count + lst2Odd.count ==\
    \ lst1.count && lst2Even.count + lst1Odd.count == lst2.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7pzcjc8_/tmp7pzcjc8_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac1c90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac1c601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac1c601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac1c6007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pzcjc8_                        0x00005570cc900ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002aac1caf6460 __libc_start_main +
    245

    6    tmp7pzcjc8_                        0x00005570cc9001f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var i = 0\n    var j = 0\n\
    \    while i < lst1.count && j < lst2.count {\n        if lst1[i] % 2 == 0 {\n\
    \            i += 1\n        } else if lst2[j] % 2 == 1 {\n            j += 1\n\
    \        } else {\n            lst1[i] = lst2[j]\n            lst2[j] = lst1[i]\n\
    \            i += 1\n            j += 1\n        }\n    }\n    return lst1.filter\
    \ { $0 % 2 == 1 }.isEmpty ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count + lst2Even.count == lst1.count +\
    \ lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpovg5uuho/tmpovg5uuho.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08258d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08255c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08255c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08255c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovg5uuho                        0x0000557555c8d62d <unavailable> + 5677

    5    libc.so.6                          0x00002b0825abc460 __libc_start_main +
    245

    6    tmpovg5uuho                        0x0000557555c8d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count == 0 {\n\
    \        return \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\
    \n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5iqm_6e8/tmp5iqm_6e8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee357cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee354c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee354c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee354c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5iqm_6e8                        0x000055c4c42028ef <unavailable> + 6383

    5    libc.so.6                          0x00002aee359b6460 __libc_start_main +
    245

    6    tmp5iqm_6e8                        0x000055c4c4202349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var count = 0\n    for i in\
    \ 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count\
    \ {\n                if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = lst1[i]\n                    count += 1\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  if count == lst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpojuz_dv_/tmpojuz_dv_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fc752c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fc449b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fc449988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fc4487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpojuz_dv_                        0x0000556fa521770d <unavailable> + 5901

    5    libc.so.6                          0x00002b70fc93e460 __libc_start_main +
    245

    6    tmpojuz_dv_                        0x0000556fa52172d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let evens = lst1.filter { $0 % 2 == 0 }\n    let odds = lst2.filter {\
    \ $0 % 2 != 0 }\n    return evens.count + odds.count == lst1.count + lst2.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp11mm6dlj/tmp11mm6dlj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d4ce90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d4cb87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d4cb87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d4cb867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11mm6dlj                        0x000055d7282f362d <unavailable> + 5677

    5    libc.so.6                          0x00002b1d4d07c460 __libc_start_main +
    245

    6    tmp11mm6dlj                        0x000055d7282f31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count && lst2Even.count == lst2.count {\n     \
    \   return \"YES\"\n    }\n    if lst1Odd.count == lst1.count && lst2Odd.count\
    \ == lst2.count {\n        return \"YES\"\n    }\n    if lst1Odd.count == lst1.count\
    \ && lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count\
    \ == lst1.count && lst2Odd.count == lst2.count {\n        return \"YES\"\n   \
    \ }\n    if lst1Even.count == lst1.count && lst2Even.count != lst2.count {\n \
    \       return \"NO\"\n    }\n    if lst1Odd.count == lst1.count && lst2Odd.count\
    \ != lst2.count {\n        return \"NO\"\n    }\n    if lst1Odd.count == lst1.count\
    \ && lst2Even.count != lst2.count {\n        return \"NO\"\n    }\n    if lst1Even.count\
    \ == lst1.count && lst2Odd.count != lst2.count {\n        return \"NO\"\n    }\n\
    \    if lst1Even.count != lst1.count && lst2Even.count == lst2.count {\n     \
    \   return \"NO\"\n    }\n    if lst1Odd.count != lst1.count && lst2Odd.count\
    \ == lst2.count {\n        return \"NO\"\n    }\n    if lst1Odd.count != lst1.count\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmp_w2yazm_.swift:50:35: error: expected '{' after 'if' condition\n\
    \    if lst1Odd.count != lst1.count\n                                  ^\n/tmp/tmp_w2yazm_.swift:14:9:\
    \ warning: variable 'lst1' was never mutated; consider changing to 'let' constant\n\
    \    var lst1 = lst1\n    ~~~ ^\n    let\n/tmp/tmp_w2yazm_.swift:15:9: warning:\
    \ variable 'lst2' was never mutated; consider changing to 'let' constant\n   \
    \ var lst2 = lst2\n    ~~~ ^\n    let\n/tmp/tmp_w2yazm_.swift:16:9: warning: variable\
    \ 'lst1Even' was never mutated; consider changing to 'let' constant\n    var lst1Even\
    \ = lst1.filter { $0 % 2 == 0 }\n    ~~~ ^\n    let\n/tmp/tmp_w2yazm_.swift:17:9:\
    \ warning: variable 'lst2Even' was never mutated; consider changing to 'let' constant\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    ~~~ ^\n    let\n/tmp/tmp_w2yazm_.swift:18:9:\
    \ warning: variable 'lst1Odd' was never mutated; consider changing to 'let' constant\n\
    \    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    ~~~ ^\n    let\n/tmp/tmp_w2yazm_.swift:19:9:\
    \ warning: variable 'lst2Odd' was never mutated; consider changing to 'let' constant\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1659824656
- exit_code: 1
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    var lst1EvenCount = lst1Even.count\n    var lst2EvenCount = lst2Even.count\n\
    \    var lst1OddCount = lst1Odd.count\n    var lst2OddCount = lst2Odd.count\n\
    \    var lst1EvenIndex = 0\n    var lst2EvenIndex = 0\n    var lst1OddIndex =\
    \ 0\n    var lst2OddIndex = 0\n    var lst1Index = 0\n    var lst2Index = 0\n\
    \    var lst1EvenIndexes = [Int]()\n    var lst2EvenIndexes = [Int]()\n    var\
    \ lst1OddIndexes = [Int]()\n    var lst2OddIndexes = [Int]()\n    var lst1EvenIndexesCount\
    \ = 0\n    var lst2EvenIndexesCount = 0\n    var lst1OddIndexesCount = 0\n   \
    \ var lst2OddIndexesCount = 0\n    var lst1EvenIndexesIndex = 0\n    var lst2EvenIndexesIndex\
    \ = 0\n    var lst1OddIndexesIndex = 0\n    var lst2OddIndexesIndex = 0\n    var\
    \ lst1EvenIndexesIndexes = [Int]()\n    var lst2EvenIndexesIndexes = [Int]()\n\
    \    var lst1OddIndexesIndexes = [Int]()\n    var lst2OddIndexesIndexes = [Int]()\n\
    \    var lst1EvenIndexesIndexesCount = 0\n    var lst2EvenIndexesIndexesCount\
    \ = 0\n    var lst1OddIndexesIndexesCount = 0\n    var lst2OddIndexesIndexesCount\
    \ = 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: SyntaxError
  stderr: "/tmp/tmpocyz78qs.swift:14:9: warning: variable 'lst1' was never mutated;\
    \ consider changing to 'let' constant\n    var lst1 = lst1\n    ~~~ ^\n    let\n\
    /tmp/tmpocyz78qs.swift:15:9: warning: variable 'lst2' was never mutated; consider\
    \ changing to 'let' constant\n    var lst2 = lst2\n    ~~~ ^\n    let\n/tmp/tmpocyz78qs.swift:16:9:\
    \ warning: variable 'lst1Even' was never mutated; consider changing to 'let' constant\n\
    \    var lst1Even = lst1.filter { $0 % 2 == 0 }\n    ~~~ ^\n    let\n/tmp/tmpocyz78qs.swift:17:9:\
    \ warning: variable 'lst2Even' was never mutated; consider changing to 'let' constant\n\
    \    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    ~~~ ^\n    let\n/tmp/tmpocyz78qs.swift:18:9:\
    \ warning: variable 'lst1Odd' was never mutated; consider changing to 'let' constant\n\
    \    var lst1Odd = lst1.filter { $0 % 2 != 0 }\n    ~~~ ^\n    let\n/tmp/tmpocyz78qs.swift:19:9:\
    \ warning: variable 'lst2Odd' was never mutated; consider changing to 'let' constant\n\
    \    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n    ~~~ ^\n    let\n/tmp/tmpocyz78qs.swift:20:9:\
    \ warning: initialization of variable 'lst1EvenCount' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var lst1EvenCount = lst1Even.count\n\
    \    ~~~~^~~~~~~~~~~~~\n    _\n/tmp/tmpocyz78qs.swift:21:9: warning: initialization\
    \ of variable 'lst2EvenCount' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var lst2EvenCount = lst2Even.count\n    ~~~~^~~~~~~~~~~~~\n\
    \    _\n/tmp/tmpocyz78qs.swift:22:9: warning: initialization of variable 'lst1OddCount'\
    \ was never used; consider replacing with assignment to '_' or removing it\n \
    \   var lst1OddCount = lst1Odd.count\n    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpocyz78qs.swift:23:9:\
    \ warning: initialization of variable 'lst2OddCount' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    var lst2OddCount = lst2Odd.count\n\
    \    ~~~~^~~~~~~~~~~~\n    _\n/tmp/tmpocyz78qs.swift:24:9: warning: initialization\
    \ of variable 'lst1EvenIndex' was never used; consider replacing with assignment\
    \ to '_' or removing it\n    var lst1Even"
  stdout: ''
  timestamp: 1659824656
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var i = 0\n    var j = 0\n\
    \    while i < lst1.count && j < lst2.count {\n        if lst1[i] % 2 == 0 {\n\
    \            i += 1\n        } else if lst2[j] % 2 == 1 {\n            j += 1\n\
    \        } else {\n            lst1[i] = lst2[j]\n            i += 1\n       \
    \     j += 1\n        }\n    }\n    return lst1.filter { $0 % 2 == 1 }.isEmpty\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if evens.count >= odds.count\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    for i in\
    \ 0..<lst1.count {\n        if lst1[i] % 2 == 0 {\n            evens += 1\n  \
    \      }\n    }\n    for i in 0..<lst2.count {\n        if lst2[i] % 2 == 0 {\n\
    \            evens -= 1\n        }\n    }\n    return evens == 0 ? \"YES\" : \"\
    NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1,\
    \ 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\n\
    assert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpjui8am9w/tmpjui8am9w.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6f17419c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6f17110b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6f17110988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6f1710f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjui8am9w                        0x000055631ec3eb57 <unavailable> + 6999

    5    libc.so.6                          0x00002b6f17605460 __libc_start_main +
    245

    6    tmpjui8am9w                        0x000055631ec3e289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens += 1\n\
    \        } else {\n            odds += 1\n        }\n    }\n    for i in lst2\
    \ {\n        if i % 2 == 0 {\n            evens += 1\n        } else {\n     \
    \       odds += 1\n        }\n    }\n    if evens > odds {\n        return \"\
    YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpe33b_a6o/tmpe33b_a6o.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b676cf83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b676cc7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b676cc7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b676cc797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe33b_a6o                        0x00005644f1dd967d <unavailable> + 5757

    5    libc.so.6                          0x00002b676d16f460 __libc_start_main +
    245

    6    tmpe33b_a6o                        0x00005644f1dd9249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for num in lst1 {\n        if num % 2 == 0 {\n            evens +=\
    \ 1\n        } else {\n            odds += 1\n        }\n    }\n    for num in\
    \ lst2 {\n        if num % 2 == 0 {\n            evens += 1\n        } else {\n\
    \            odds += 1\n        }\n    }\n    if evens % 2 == 0 && odds % 2 ==\
    \ 0 {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmphu1u6af7/tmphu1u6af7.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36a1e63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36a1b5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36a1b5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36a1b597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphu1u6af7                        0x0000558c9f0ceb17 <unavailable> + 6935

    5    libc.so.6                          0x00002b36a204f460 __libc_start_main +
    245

    6    tmphu1u6af7                        0x0000558c9f0ce249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count == 0 {\n\
    \        return \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\
    \n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5iqm_6e8/tmp5iqm_6e8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee357cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee354c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee354c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee354c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5iqm_6e8                        0x000055c4c42028ef <unavailable> + 6383

    5    libc.so.6                          0x00002aee359b6460 __libc_start_main +
    245

    6    tmp5iqm_6e8                        0x000055c4c4202349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var i = 0\n    var j = 0\n\
    \    while i < lst1.count {\n        if lst1[i] % 2 == 1 {\n            while\
    \ j < lst2.count {\n                if lst2[j] % 2 == 0 {\n                  \
    \  let temp = lst1[i]\n                    lst1[i] = lst2[j]\n               \
    \     lst2[j] = temp\n                    j += 1\n                    break\n\
    \                }\n                j += 1\n            }\n            if j ==\
    \ lst2.count {\n                return \"NO\"\n            }\n        }\n    \
    \    i += 1\n    }\n    return \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp4zuxfzco/tmp4zuxfzco.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9767514c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b976720bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b976720b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b976720a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4zuxfzco                        0x000055b82737060d <unavailable> + 5645

    5    libc.so.6                          0x00002b9767700460 __libc_start_main +
    245

    6    tmp4zuxfzco                        0x000055b8273701d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var evens = [Int]()\n    var odds = [Int]()\n    for num in lst1 {\n\
    \        if num % 2 == 0 {\n            evens.append(num)\n        } else {\n\
    \            odds.append(num)\n        }\n    }\n    for num in lst2 {\n     \
    \   if num % 2 == 0 {\n            evens.append(num)\n        } else {\n     \
    \       odds.append(num)\n        }\n    }\n    if odds.count == 0 {\n       \
    \ return \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\n  \
    \  } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpvybnj1cv/tmpvybnj1cv.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba56e7d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba56e4cbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba56e4cb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba56e4ca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvybnj1cv                        0x0000557a30a368ef <unavailable> + 6383

    5    libc.so.6                          0x00002ba56e9c0460 __libc_start_main +
    245

    6    tmpvybnj1cv                        0x0000557a30a36349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    for i in\
    \ 0..<lst1.count {\n        if lst1[i] % 2 == 0 {\n            evens += 1\n  \
    \      }\n    }\n    for i in 0..<lst2.count {\n        if lst2[i] % 2 == 0 {\n\
    \            evens -= 1\n        }\n    }\n    if evens == 0 {\n        return\
    \ \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzeekybcu/tmpzeekybcu.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b42ed58ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b42ed285b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b42ed285988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42ed2847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzeekybcu                        0x000055ad31a92b57 <unavailable> + 6999

    5    libc.so.6                          0x00002b42ed77a460 __libc_start_main +
    245

    6    tmpzeekybcu                        0x000055ad31a92289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count + lst2Odd.count ==\
    \ lst1.count && lst2Even.count + lst1Odd.count == lst2.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7pzcjc8_/tmp7pzcjc8_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac1c90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac1c601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac1c601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac1c6007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pzcjc8_                        0x00005570cc900ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002aac1caf6460 __libc_start_main +
    245

    6    tmp7pzcjc8_                        0x00005570cc9001f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count == lst1.count && lst2Even.count == lst2.count {\n     \
    \   return \"YES\"\n    }\n    if lst1Odd.count == lst1.count && lst2Odd.count\
    \ == lst2.count {\n        return \"YES\"\n    }\n    if lst1Even.count == lst1.count\
    \ && lst2Odd.count == lst2.count {\n        return \"NO\"\n    }\n    if lst1Odd.count\
    \ == lst1.count && lst2Even.count == lst2.count {\n        return \"NO\"\n   \
    \ }\n    while lst1Even.count < lst1.count && lst2Even.count > 0 {\n        lst1Even.append(lst2Even.removeFirst())\n\
    \    }\n    while lst1Odd.count < lst1.count && lst2Odd.count > 0 {\n        lst1Odd.append(lst2Odd.removeFirst())\n\
    \    }\n    if lst1Even.count == lst1.count {\n        return \"YES\"\n    }\n\
    \    if lst1Odd.count == lst1.count {\n        return \"YES\"\n    }\n    return\
    \ \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp0t950uv7/tmp0t950uv7.swift:61: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfd1480c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfd1177b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfd1177988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfd11767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0t950uv7                        0x000055bd7fda589f <unavailable> + 6303

    5    libc.so.6                          0x00002abfd166c460 __libc_start_main +
    245

    6    tmp0t950uv7                        0x000055bd7fda52f9 <unavailable> + 4857

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let evenLst1 = lst1.filter { $0 % 2 == 0 }\n    let oddLst1 = lst1.filter\
    \ { $0 % 2 != 0 }\n    let evenLst2 = lst2.filter { $0 % 2 == 0 }\n    let oddLst2\
    \ = lst2.filter { $0 % 2 != 0 }\n    if evenLst1.count == lst1.count {\n     \
    \   return \"YES\"\n    } else if oddLst1.count == lst1.count && oddLst2.count\
    \ == lst2.count {\n        return \"NO\"\n    } else if evenLst1.count + evenLst2.count\
    \ >= lst1.count {\n        return \"YES\"\n    } else {\n        return \"NO\"\
    \n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let evens = lst1.filter { $0 % 2 == 0 }\n    let odds = lst2.filter {\
    \ $0 % 2 != 0 }\n    return evens.count + odds.count == lst1.count + lst2.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp11mm6dlj/tmp11mm6dlj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d4ce90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d4cb87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d4cb87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d4cb867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11mm6dlj                        0x000055d7282f362d <unavailable> + 5677

    5    libc.so.6                          0x00002b1d4d07c460 __libc_start_main +
    245

    6    tmp11mm6dlj                        0x000055d7282f31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count == 0 {\n\
    \        return \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\
    \n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5iqm_6e8/tmp5iqm_6e8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee357cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee354c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee354c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee354c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5iqm_6e8                        0x000055c4c42028ef <unavailable> + 6383

    5    libc.so.6                          0x00002aee359b6460 __libc_start_main +
    245

    6    tmp5iqm_6e8                        0x000055c4c4202349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count + lst2Odd.count ==\
    \ lst1.count && lst2Even.count + lst1Odd.count == lst2.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7pzcjc8_/tmp7pzcjc8_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac1c90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac1c601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac1c601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac1c6007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pzcjc8_                        0x00005570cc900ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002aac1caf6460 __libc_start_main +
    245

    6    tmp7pzcjc8_                        0x00005570cc9001f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count == lst1.count || lst2Even.count ==\
    \ lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5bvxv8my/tmp5bvxv8my.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f6375cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f63453b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f63453988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f634527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5bvxv8my                        0x000055caa909f62d <unavailable> + 5677

    5    libc.so.6                          0x00002b9f63948460 __libc_start_main +
    245

    6    tmp5bvxv8my                        0x000055caa909f1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for num in lst1 {\n        if num % 2 == 0 {\n            evens +=\
    \ 1\n        } else {\n            odds += 1\n        }\n    }\n    for num in\
    \ lst2 {\n        if num % 2 == 0 {\n            evens += 1\n        } else {\n\
    \            odds += 1\n        }\n    }\n    if odds % 2 == 0 {\n        return\
    \ \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpybf4v_1v/tmpybf4v_1v.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab554bf0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5548e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5548e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5548e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpybf4v_1v                        0x00005614be171b17 <unavailable> + 6935

    5    libc.so.6                          0x00002ab554ddc460 __libc_start_main +
    245

    6    tmpybf4v_1v                        0x00005614be171249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var i = 0\n    var j = 0\n\
    \    while i < lst1.count && j < lst2.count {\n        if lst1[i] % 2 == 0 {\n\
    \            i += 1\n        } else if lst2[j] % 2 == 1 {\n            j += 1\n\
    \        } else {\n            lst1[i] = lst2[j]\n            i += 1\n       \
    \     j += 1\n        }\n    }\n    return lst1.filter { $0 % 2 == 1 }.isEmpty\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for num in lst1 {\n        if num % 2 == 0 {\n         \
    \   evens.append(num)\n        } else {\n            odds.append(num)\n      \
    \  }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            evens.append(num)\n\
    \        } else {\n            odds.append(num)\n        }\n    }\n    if odds.count\
    \ == 0 {\n        return \"YES\"\n    } else if evens.count == 0 {\n        return\
    \ \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpk9r173e7/tmpk9r173e7.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5270fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af526df5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af526df5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af526df47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk9r173e7                        0x0000564a013a38ef <unavailable> + 6383

    5    libc.so.6                          0x00002af5272ea460 __libc_start_main +
    245

    6    tmpk9r173e7                        0x0000564a013a3349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let evens = lst1.filter { $0 % 2 == 0 }\n    let odds = lst2.filter {\
    \ $0 % 2 != 0 }\n    return evens.count + odds.count == lst1.count + lst2.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp11mm6dlj/tmp11mm6dlj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d4ce90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d4cb87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d4cb87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d4cb867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11mm6dlj                        0x000055d7282f362d <unavailable> + 5677

    5    libc.so.6                          0x00002b1d4d07c460 __libc_start_main +
    245

    6    tmp11mm6dlj                        0x000055d7282f31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let evens = lst1.filter { $0 % 2 == 0 }\n    let odds = lst2.filter {\
    \ $0 % 2 != 0 }\n    return (evens.count + odds.count == lst1.count + lst2.count)\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpnf21x25t/tmpnf21x25t.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e78bb7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e788aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e788ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e788ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnf21x25t                        0x000055a94173162d <unavailable> + 5677

    5    libc.so.6                          0x00002b1e78da3460 __libc_start_main +
    245

    6    tmpnf21x25t                        0x000055a9417311f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens += 1\n\
    \        } else {\n            odds += 1\n        }\n    }\n    for i in lst2\
    \ {\n        if i % 2 == 0 {\n            evens += 1\n        } else {\n     \
    \       odds += 1\n        }\n    }\n    if odds % 2 == 0 {\n        return \"\
    YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmprjnfvgut/tmprjnfvgut.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a41627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a4131eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a4131e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a4131d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjnfvgut                        0x000055eccb2f0b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b4a41813460 __libc_start_main +
    245

    6    tmprjnfvgut                        0x000055eccb2f0249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens += 1\n\
    \        } else {\n            odds += 1\n        }\n    }\n    for i in lst2\
    \ {\n        if i % 2 == 0 {\n            evens += 1\n        } else {\n     \
    \       odds += 1\n        }\n    }\n    if odds % 2 == 0 {\n        return \"\
    YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmprjnfvgut/tmprjnfvgut.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a41627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a4131eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a4131e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a4131d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjnfvgut                        0x000055eccb2f0b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b4a41813460 __libc_start_main +
    245

    6    tmprjnfvgut                        0x000055eccb2f0249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let evens = lst1.filter { $0 % 2 == 0 }\n    let odds = lst2.filter {\
    \ $0 % 2 != 0 }\n    return evens.count + odds.count == lst1.count + lst2.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp11mm6dlj/tmp11mm6dlj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d4ce90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d4cb87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d4cb87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d4cb867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11mm6dlj                        0x000055d7282f362d <unavailable> + 5677

    5    libc.so.6                          0x00002b1d4d07c460 __libc_start_main +
    245

    6    tmp11mm6dlj                        0x000055d7282f31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count + lst2Even.count == lst1.count\
    \ + lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count + lst2Odd.count\
    \ == lst1.count + lst2.count {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpg34w3hdn/tmpg34w3hdn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fef512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fef209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fef209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fef2087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg34w3hdn                        0x0000560ec55b362d <unavailable> + 5677

    5    libc.so.6                          0x00002b6fef6fe460 __libc_start_main +
    245

    6    tmpg34w3hdn                        0x0000560ec55b31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count + lst2Even.count == lst1.count\
    \ + lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count + lst2Odd.count\
    \ == lst1.count + lst2.count {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpg34w3hdn/tmpg34w3hdn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fef512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fef209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fef209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fef2087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg34w3hdn                        0x0000560ec55b362d <unavailable> + 5677

    5    libc.so.6                          0x00002b6fef6fe460 __libc_start_main +
    245

    6    tmpg34w3hdn                        0x0000560ec55b31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens += 1\n\
    \        } else {\n            odds += 1\n        }\n    }\n    for i in lst2\
    \ {\n        if i % 2 == 0 {\n            evens += 1\n        } else {\n     \
    \       odds += 1\n        }\n    }\n    if odds % 2 == 0 {\n        return \"\
    YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmprjnfvgut/tmprjnfvgut.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a41627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a4131eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a4131e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a4131d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjnfvgut                        0x000055eccb2f0b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b4a41813460 __libc_start_main +
    245

    6    tmprjnfvgut                        0x000055eccb2f0249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count == 0 {\n\
    \        return \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\
    \n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5iqm_6e8/tmp5iqm_6e8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee357cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee354c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee354c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee354c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5iqm_6e8                        0x000055c4c42028ef <unavailable> + 6383

    5    libc.so.6                          0x00002aee359b6460 __libc_start_main +
    245

    6    tmp5iqm_6e8                        0x000055c4c4202349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count + lst2Even.count == lst1.count\
    \ + lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count + lst2Odd.count\
    \ == lst1.count + lst2.count {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpg34w3hdn/tmpg34w3hdn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fef512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fef209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fef209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fef2087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg34w3hdn                        0x0000560ec55b362d <unavailable> + 5677

    5    libc.so.6                          0x00002b6fef6fe460 __libc_start_main +
    245

    6    tmpg34w3hdn                        0x0000560ec55b31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    if lst1Even.count == lst1.count {\n        return \"YES\"\
    \n    }\n    if lst2Even.count == lst2.count {\n        return \"YES\"\n    }\n\
    \    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpe41naxbr/tmpe41naxbr.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aaba2beac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aaba28e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aaba28e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aaba28e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe41naxbr                        0x0000563f67ea962d <unavailable> + 5677

    5    libc.so.6                          0x00002aaba2dd6460 __libc_start_main +
    245

    6    tmpe41naxbr                        0x0000563f67ea91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let evens = lst1.filter { $0 % 2 == 0 }\n    let odds = lst2.filter {\
    \ $0 % 2 != 0 }\n    return evens.count + odds.count == lst1.count + lst2.count\
    \ ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp11mm6dlj/tmp11mm6dlj.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d4ce90c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d4cb87b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d4cb87988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d4cb867b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp11mm6dlj                        0x000055d7282f362d <unavailable> + 5677

    5    libc.so.6                          0x00002b1d4d07c460 __libc_start_main +
    245

    6    tmp11mm6dlj                        0x000055d7282f31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Evens = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Evens = lst2.filter { $0 % 2 == 0 }\n    let lst1Odds\
    \ = lst1.filter { $0 % 2 != 0 }\n    let lst2Odds = lst2.filter { $0 % 2 != 0\
    \ }\n    if lst1Evens.count == lst1.count {\n        return \"YES\"\n    }\n \
    \   if lst2Evens.count == lst2.count {\n        return \"YES\"\n    }\n    if\
    \ lst1Evens.count + lst2Evens.count >= lst1.count {\n        return \"YES\"\n\
    \    }\n    if lst1Evens.count + lst2Evens.count >= lst2.count {\n        return\
    \ \"YES\"\n    }\n    if lst1Odds.count + lst2Evens.count >= lst1.count {\n  \
    \      return \"YES\"\n    }\n    if lst1Evens.count + lst2Odds.count >= lst2.count\
    \ {\n        return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpfb63w3gc/tmpfb63w3gc.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6bf4ceec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6bf49e5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6bf49e5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6bf49e47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfb63w3gc                        0x0000561d7f4b379f <unavailable> + 6047

    5    libc.so.6                          0x00002b6bf4eda460 __libc_start_main +
    245

    6    tmpfb63w3gc                        0x0000561d7f4b31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count == 0 {\n\
    \        return \"YES\"\n    } else if evens.count == 0 {\n        return \"NO\"\
    \n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp5iqm_6e8/tmp5iqm_6e8.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee357cac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee354c1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee354c1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee354c07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5iqm_6e8                        0x000055c4c42028ef <unavailable> + 6383

    5    libc.so.6                          0x00002aee359b6460 __libc_start_main +
    245

    6    tmp5iqm_6e8                        0x000055c4c4202349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count + lst2Even.count == lst1.count\
    \ + lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count + lst2Odd.count\
    \ == lst1.count + lst2.count {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpg34w3hdn/tmpg34w3hdn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fef512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fef209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fef209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fef2087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg34w3hdn                        0x0000560ec55b362d <unavailable> + 5677

    5    libc.so.6                          0x00002b6fef6fe460 __libc_start_main +
    245

    6    tmpg34w3hdn                        0x0000560ec55b31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var count = 0\n    for i in\
    \ 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count\
    \ {\n                if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = lst1[i]\n                    count += 1\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  if count == lst1.count {\n        return \"YES\"\n    }\n    return \"NO\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpojuz_dv_/tmpojuz_dv_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b70fc752c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b70fc449b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b70fc449988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b70fc4487b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpojuz_dv_                        0x0000556fa521770d <unavailable> + 5901

    5    libc.so.6                          0x00002b70fc93e460 __libc_start_main +
    245

    6    tmpojuz_dv_                        0x0000556fa52172d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count + lst2Even.count == lst1.count\
    \ + lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count + lst2Odd.count\
    \ == lst1.count + lst2.count {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpg34w3hdn/tmpg34w3hdn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fef512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fef209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fef209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fef2087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg34w3hdn                        0x0000560ec55b362d <unavailable> + 5677

    5    libc.so.6                          0x00002b6fef6fe460 __libc_start_main +
    245

    6    tmpg34w3hdn                        0x0000560ec55b31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    break\n              \
    \  }\n            }\n        }\n    }\n    for i in 0..<lst1.count {\n       \
    \ if lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmps3_dwpno/tmps3_dwpno.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50f2e72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50f2b69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50f2b69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50f2b687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3_dwpno                        0x0000564ea0f0287f <unavailable> + 6271

    5    libc.so.6                          0x00002b50f305e460 __libc_start_main +
    245

    6    tmps3_dwpno                        0x0000564ea0f022d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    break\n              \
    \  }\n            }\n        }\n    }\n    for i in 0..<lst1.count {\n       \
    \ if lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmps3_dwpno/tmps3_dwpno.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50f2e72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50f2b69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50f2b69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50f2b687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3_dwpno                        0x0000564ea0f0287f <unavailable> + 6271

    5    libc.so.6                          0x00002b50f305e460 __libc_start_main +
    245

    6    tmps3_dwpno                        0x0000564ea0f022d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Odd = [Int]()\n   \
    \ var lst2Even = [Int]()\n    var lst1Even = [Int]()\n    var lst2Odd = [Int]()\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 == 0 {\n            lst1Even.append(lst1[i])\n\
    \        } else {\n            lst1Odd.append(lst1[i])\n        }\n        if\
    \ lst2[i] % 2 == 0 {\n            lst2Even.append(lst2[i])\n        } else {\n\
    \            lst2Odd.append(lst2[i])\n        }\n    }\n    if lst1Even.count\
    \ >= lst1Odd.count && lst2Odd.count >= lst2Even.count {\n        return \"YES\"\
    \n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpzbme8xb1/tmpzbme8xb1.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5016f75c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5016c6cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5016c6c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5016c6b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzbme8xb1                        0x0000558f049f78cf <unavailable> + 6351

    5    libc.so.6                          0x00002b5017161460 __libc_start_main +
    245

    6    tmpzbme8xb1                        0x0000558f049f7329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    if lst1Even.count\
    \ == lst1.count {\n        return \"YES\"\n    }\n    if lst2Even.count == lst2.count\
    \ {\n        return \"YES\"\n    }\n    for i in 0..<lst1.count {\n        if\
    \ lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n                if\
    \ lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n                \
    \    lst2[j] = lst1[i]\n                    lst1Even = lst1.filter { $0 % 2 ==\
    \ 0 }\n                    lst2Even = lst2.filter { $0 % 2 == 0 }\n          \
    \          if lst1Even.count == lst1.count {\n                        return \"\
    YES\"\n                    }\n                    if lst2Even.count == lst2.count\
    \ {\n                        return \"YES\"\n                    }\n         \
    \       }\n            }\n        }\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"\
    YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmphqhep6k8/tmphqhep6k8.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af984ae1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9847d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af9847d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af9847d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphqhep6k8                        0x0000563b9cbb193f <unavailable> + 6463

    5    libc.so.6                          0x00002af984ccd460 __libc_start_main +
    245

    6    tmphqhep6k8                        0x0000563b9cbb1399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens += 1\n\
    \        } else {\n            odds += 1\n        }\n    }\n    for i in lst2\
    \ {\n        if i % 2 == 0 {\n            evens += 1\n        } else {\n     \
    \       odds += 1\n        }\n    }\n    if odds % 2 == 0 {\n        return \"\
    YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmprjnfvgut/tmprjnfvgut.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a41627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a4131eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a4131e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a4131d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjnfvgut                        0x000055eccb2f0b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b4a41813460 __libc_start_main +
    245

    6    tmprjnfvgut                        0x000055eccb2f0249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var i = 0\n    while i < lst1.count\
    \ {\n        if lst1[i] % 2 == 1 {\n            var j = 0\n            while j\
    \ < lst2.count {\n                if lst2[j] % 2 == 0 {\n                    let\
    \ temp = lst1[i]\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = temp\n                    break\n                }\n                j += 1\n\
    \            }\n            if j == lst2.count {\n                return \"NO\"\
    \n            }\n        }\n        i += 1\n    }\n    return \"YES\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens += 1\n\
    \        } else {\n            odds += 1\n        }\n    }\n    for i in lst2\
    \ {\n        if i % 2 == 0 {\n            evens += 1\n        } else {\n     \
    \       odds += 1\n        }\n    }\n    if odds % 2 == 0 {\n        return \"\
    YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmprjnfvgut/tmprjnfvgut.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4a41627c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4a4131eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4a4131e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4a4131d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprjnfvgut                        0x000055eccb2f0b17 <unavailable> + 6935

    5    libc.so.6                          0x00002b4a41813460 __libc_start_main +
    245

    6    tmprjnfvgut                        0x000055eccb2f0249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count + lst2Even.count == lst1.count +\
    \ lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpovg5uuho/tmpovg5uuho.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08258d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08255c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08255c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08255c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovg5uuho                        0x0000557555c8d62d <unavailable> + 5677

    5    libc.so.6                          0x00002b0825abc460 __libc_start_main +
    245

    6    tmpovg5uuho                        0x0000557555c8d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    if lst1Even.count + lst2Even.count == lst1.count\
    \ + lst2.count {\n        return \"YES\"\n    } else if lst1Odd.count + lst2Odd.count\
    \ == lst1.count + lst2.count {\n        return \"YES\"\n    } else {\n       \
    \ return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpg34w3hdn/tmpg34w3hdn.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6fef512c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6fef209b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6fef209988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6fef2087b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg34w3hdn                        0x0000560ec55b362d <unavailable> + 5677

    5    libc.so.6                          0x00002b6fef6fe460 __libc_start_main +
    245

    6    tmpg34w3hdn                        0x0000560ec55b31f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var result = \"NO\"\n    for\
    \ i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count\
    \ {\n                if lst2[j] % 2 != 0 {\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = lst1[i]\n                    result = \"YES\"\n\
    \                    break\n                }\n            }\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpsj8tjywe/tmpsj8tjywe.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8e9a4bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae8e9742b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae8e9742988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae8e97417b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsj8tjywe                        0x000055f7b059687f <unavailable> + 6271

    5    libc.so.6                          0x00002ae8e9c37460 __libc_start_main +
    245

    6    tmpsj8tjywe                        0x000055f7b05962d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var i = 0\n    var j = 0\n\
    \    while i < lst1.count && j < lst2.count {\n        if lst1[i] % 2 == 0 {\n\
    \            i += 1\n        } else if lst2[j] % 2 == 1 {\n            j += 1\n\
    \        } else {\n            lst1[i] = lst2[j]\n            i += 1\n       \
    \     j += 1\n        }\n    }\n    for i in lst1 {\n        if i % 2 == 1 {\n\
    \            return \"NO\"\n        }\n    }\n    return \"YES\"\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    for i in\
    \ 0..<lst1.count {\n        if lst1[i] % 2 == 0 {\n            evens += 1\n  \
    \      }\n    }\n    if evens == lst1.count {\n        return \"YES\"\n    }\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         evens += 1\n                    break\n                }\n         \
    \   }\n        }\n    }\n    if evens == lst1.count {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpdc6e6yo5/tmpdc6e6yo5.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f2848bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f28182b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f28182988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f281817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdc6e6yo5                        0x00005577b126387f <unavailable> + 6271

    5    libc.so.6                          0x00002b7f28677460 __libc_start_main +
    245

    6    tmpdc6e6yo5                        0x00005577b12632d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count % 2 == 0\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpgbg5prdl/tmpgbg5prdl.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5df2a47c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5df273eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5df273e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5df273d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgbg5prdl                        0x000055e6cbfa1c17 <unavailable> + 7191

    5    libc.so.6                          0x00002b5df2c33460 __libc_start_main +
    245

    6    tmpgbg5prdl                        0x000055e6cbfa1349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if evens.count >= odds.count\
    \ {\n        return \"YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count + lst2Even.count >= lst1.count ?\
    \ \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1,\
    \ 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    for i in\
    \ 0..<lst1.count {\n        if lst1[i] % 2 == 0 {\n            evens += 1\n  \
    \      }\n    }\n    if evens == lst1.count {\n        return \"YES\"\n    }\n\
    \    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for\
    \ j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n             \
    \       lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n           \
    \         evens += 1\n                    break\n                }\n         \
    \   }\n        }\n    }\n    if evens == lst1.count {\n        return \"YES\"\n\
    \    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpdc6e6yo5/tmpdc6e6yo5.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f2848bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f28182b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f28182988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f281817b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdc6e6yo5                        0x00005577b126387f <unavailable> + 6271

    5    libc.so.6                          0x00002b7f28677460 __libc_start_main +
    245

    6    tmpdc6e6yo5                        0x00005577b12632d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Odd\
    \ = lst2.filter { $0 % 2 != 0 }\n    return lst1Even.count + lst2Odd.count ==\
    \ lst1.count && lst2Even.count + lst1Odd.count == lst2.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmp7pzcjc8_/tmp7pzcjc8_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac1c90ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac1c601b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac1c601988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac1c6007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pzcjc8_                        0x00005570cc900ac7 <unavailable> + 6855

    5    libc.so.6                          0x00002aac1caf6460 __libc_start_main +
    245

    6    tmp7pzcjc8_                        0x00005570cc9001f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: 0
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens.append(i)\n\
    \        } else {\n            odds.append(i)\n        }\n    }\n    for i in\
    \ lst2 {\n        if i % 2 == 0 {\n            evens.append(i)\n        } else\
    \ {\n            odds.append(i)\n        }\n    }\n    if odds.count > evens.count\
    \ {\n        return \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = [Int]()\n    var\
    \ odds = [Int]()\n    for num in lst1 {\n        if num % 2 == 0 {\n         \
    \   evens.append(num)\n        } else {\n            odds.append(num)\n      \
    \  }\n    }\n    for num in lst2 {\n        if num % 2 == 0 {\n            evens.append(num)\n\
    \        } else {\n            odds.append(num)\n        }\n    }\n    if odds.count\
    \ == 0 {\n        return \"YES\"\n    } else if evens.count == 0 {\n        return\
    \ \"NO\"\n    } else {\n        return \"YES\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpk9r173e7/tmpk9r173e7.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5270fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af526df5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af526df5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af526df47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk9r173e7                        0x0000564a013a38ef <unavailable> + 6383

    5    libc.so.6                          0x00002af5272ea460 __libc_start_main +
    245

    6    tmpk9r173e7                        0x0000564a013a3349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Even = lst1.filter { $0 % 2 == 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Even.count + lst2Even.count == lst1.count +\
    \ lst2.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmpovg5uuho/tmpovg5uuho.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b08258d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b08255c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b08255c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b08255c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovg5uuho                        0x0000557555c8d62d <unavailable> + 5677

    5    libc.so.6                          0x00002b0825abc460 __libc_start_main +
    245

    6    tmpovg5uuho                        0x0000557555c8d1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    let lst1Odd = lst1.filter { $0 % 2 != 0 }\n    let lst2Even = lst2.filter\
    \ { $0 % 2 == 0 }\n    return lst1Odd.count == lst2Even.count ? \"YES\" : \"NO\"\
    \n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1:\
    \ [5, 7, 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5,\
    \ 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200])\
    \ == \"YES\")"
  status: Exception
  stderr: 'tmpqk0r7x4b/tmpqk0r7x4b.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8c390e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8c38dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8c38ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8c38ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqk0r7x4b                        0x00005628d28c9f96 <unavailable> + 8086

    5    libc.so.6                          0x00002b8c392d2460 __libc_start_main +
    245

    6    tmpqk0r7x4b                        0x00005628d28c91f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    for i in 0..<lst1.count {\n\
    \        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count {\n      \
    \          if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n    \
    \                lst2[j] = lst1[i]\n                    break\n              \
    \  }\n            }\n        }\n    }\n    for i in 0..<lst1.count {\n       \
    \ if lst1[i] % 2 != 0 {\n            return \"NO\"\n        }\n    }\n    return\
    \ \"YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4],\
    \ lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2,\
    \ 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) ==\
    \ \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmps3_dwpno/tmps3_dwpno.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50f2e72c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50f2b69b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50f2b69988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50f2b687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmps3_dwpno                        0x0000564ea0f0287f <unavailable> + 6271

    5    libc.so.6                          0x00002b50f305e460 __libc_start_main +
    245

    6    tmps3_dwpno                        0x0000564ea0f022d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var lst1Even = lst1.filter\
    \ { $0 % 2 == 0 }\n    var lst2Even = lst2.filter { $0 % 2 == 0 }\n    var lst1Odd\
    \ = lst1.filter { $0 % 2 != 0 }\n    var lst2Odd = lst2.filter { $0 % 2 != 0 }\n\
    \    if lst1Even.count > lst2Even.count {\n        return \"NO\"\n    }\n    if\
    \ lst1Odd.count > lst2Odd.count {\n        return \"NO\"\n    }\n    return \"\
    YES\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [2, 1, 4,\
    \ 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\nassert(exchange(lst1:\
    \ [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\")\nassert(exchange(lst1:\
    \ [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp974x1bij/tmp974x1bij.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51978cec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b51975c5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b51975c5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b51975c47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp974x1bij                        0x000055e6a621eac7 <unavailable> + 6855

    5    libc.so.6                          0x00002b5197aba460 __libc_start_main +
    245

    6    tmp974x1bij                        0x000055e6a621e1f9 <unavailable> + 4601

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = lst1.filter { $0\
    \ % 2 == 0 }\n    var odds = lst2.filter { $0 % 2 != 0 }\n    if evens.count ==\
    \ lst1.count {\n        return \"YES\"\n    }\n    if odds.count == lst2.count\
    \ {\n        return \"NO\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i]\
    \ % 2 != 0 {\n            for j in 0..<lst2.count {\n                if lst2[j]\
    \ % 2 == 0 {\n                    lst1[i] = lst2[j]\n                    lst2[j]\
    \ = lst1[i]\n                    evens = lst1.filter { $0 % 2 == 0 }\n       \
    \             if evens.count == lst1.count {\n                        return \"\
    YES\"\n                    }\n                }\n            }\n        }\n  \
    \  }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1: [1, 2,\
    \ 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3, 4], lst2:\
    \ [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 4])\
    \ == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) == \"NO\")\n\
    assert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1]) == \"NO\"\
    )\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmphwmhc0it/tmphwmhc0it.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b50acc62c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b50ac959b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b50ac959988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b50ac9587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphwmhc0it                        0x000056256b9ce93f <unavailable> + 6463

    5    libc.so.6                          0x00002b50ace4e460 __libc_start_main +
    245

    6    tmphwmhc0it                        0x000056256b9ce399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evenCount = 0\n    for\
    \ i in 0..<lst1.count {\n        if lst1[i] % 2 == 0 {\n            evenCount\
    \ += 1\n        }\n    }\n    if evenCount == lst1.count {\n        return \"\
    YES\"\n    }\n    for i in 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n \
    \           for j in 0..<lst2.count {\n                if lst2[j] % 2 == 0 {\n\
    \                    lst1[i] = lst2[j]\n                    lst2[j] = lst1[i]\n\
    \                    evenCount += 1\n                    break\n             \
    \   }\n            }\n        }\n    }\n    if evenCount == lst1.count {\n   \
    \     return \"YES\"\n    }\n    return \"NO\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1: [1, 2, 3,\
    \ 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2:\
    \ [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2, 6, 3]) ==\
    \ \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5, 1, 1, 1])\
    \ == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) == \"YES\")"
  status: Exception
  stderr: 'tmp7ahofa27/tmp7ahofa27.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3926504c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39261fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39261fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39261fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7ahofa27                        0x00005615ec50b87f <unavailable> + 6271

    5    libc.so.6                          0x00002b39266f0460 __libc_start_main +
    245

    6    tmp7ahofa27                        0x00005615ec50b2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824655
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var count = 0\n    for i in\
    \ 0..<lst1.count {\n        if lst1[i] % 2 != 0 {\n            for j in 0..<lst2.count\
    \ {\n                if lst2[j] % 2 == 0 {\n                    lst1[i] = lst2[j]\n\
    \                    lst2[j] = lst1[i]\n                    count += 1\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return count == lst1.count ? \"YES\" : \"NO\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmp4u5ipydk/tmp4u5ipydk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0daac7cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0daa973b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0daa973988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0daa9727b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4u5ipydk                        0x000055c9de68470d <unavailable> + 5901

    5    libc.so.6                          0x00002b0daae68460 __libc_start_main +
    245

    6    tmp4u5ipydk                        0x000055c9de6842d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1659824656
- exit_code: -4
  program: "\n/// In this problem, you will implement a function that takes two lists\
    \ of numbers,\n/// and determines whether it is possible to perform an exchange\
    \ of elements\n/// between them to make lst1 a list of only even numbers.\n///\
    \ There is no limit on the number of exchanged elements between lst1 and lst2.\n\
    /// If it is possible to exchange elements between the lst1 and lst2 to make\n\
    /// all the elements of lst1 to be even, return \"YES\".\n/// Otherwise, return\
    \ \"NO\".\n/// For example:\n/// exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\
    \n/// exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n/// It is assumed that the\
    \ input lists will be non-empty.\nfunc exchange(lst1: [Int], lst2: [Int]) -> String\
    \ {\n    var lst1 = lst1\n    var lst2 = lst2\n    var evens = 0\n    var odds\
    \ = 0\n    for i in lst1 {\n        if i % 2 == 0 {\n            evens += 1\n\
    \        } else {\n            odds += 1\n        }\n    }\n    for i in lst2\
    \ {\n        if i % 2 == 0 {\n            evens += 1\n        } else {\n     \
    \       odds += 1\n        }\n    }\n    if evens > odds {\n        return \"\
    YES\"\n    } else {\n        return \"NO\"\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 2, 3, 4]) == \"YES\"\
    )\nassert(exchange(lst1: [1, 2, 3, 4], lst2: [1, 5, 3, 4]) == \"NO\")\nassert(exchange(lst1:\
    \ [1, 2, 3, 4], lst2: [2, 1, 4, 3]) == \"YES\")\nassert(exchange(lst1: [5, 7,\
    \ 3], lst2: [2, 6, 4]) == \"YES\")\nassert(exchange(lst1: [5, 7, 3], lst2: [2,\
    \ 6, 3]) == \"NO\")\nassert(exchange(lst1: [3, 2, 6, 1, 8, 9], lst2: [3, 5, 5,\
    \ 1, 1, 1]) == \"NO\")\nassert(exchange(lst1: [100, 200], lst2: [200, 200]) ==\
    \ \"YES\")"
  status: Exception
  stderr: 'tmpe33b_a6o/tmpe33b_a6o.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b676cf83c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b676cc7ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b676cc7a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b676cc797b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe33b_a6o                        0x00005644f1dd967d <unavailable> + 5757

    5    libc.so.6                          0x00002b676d16f460 __libc_start_main +
    245

    6    tmpe33b_a6o                        0x00005644f1dd9249 <unavailable> + 4681

    '
  stdout: ''
  timestamp: 1659824656
