language: swift
name: HumanEval_34_unique
results:
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var list = l\n    list.sort()\n    var result: [Int] = []\n    var previous\
    \ = -1\n    for item in list {\n        if item != previous {\n            result.append(item)\n\
    \        }\n        previous = item\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n    }\n  \
    \  return Array(s).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n    }\n\
    \    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpotkxv9bv/tmpotkxv9bv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c81c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c818fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c818fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c818f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotkxv9bv                        0x0000559435c2d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b0c81def460 __libc_start_main +
    245

    6    tmpotkxv9bv                        0x0000559435c2d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n    }\n  \
    \  return Array(s).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var list = l\n    list.sort { $0 < $1 }\n    var last = list[0]\n   \
    \ var result = [Int]()\n    result.append(last)\n    for i in 1..<list.count {\n\
    \        if last != list[i] {\n            result.append(list[i])\n          \
    \  last = list[i]\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var list = l\n    list.sort()\n    var last = list[0]\n    var i = 1\n\
    \    while i < list.count {\n        if list[i] == last {\n            list.removeAtIndex(i)\n\
    \        } else {\n            last = list[i]\n            i += 1\n        }\n\
    \    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpta8zs7w5.swift:12:18: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n            list.removeAtIndex(i)\n            ~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013621
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n    }\n  \
    \  return Array(s).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpotkxv9bv/tmpotkxv9bv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c81c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c818fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c818fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c818f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotkxv9bv                        0x0000559435c2d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b0c81def460 __libc_start_main +
    245

    6    tmpotkxv9bv                        0x0000559435c2d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var s = Set<Int>()\n    for x in l {\n        s.insert(x)\n    }\n  \
    \  return Array(s).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpotkxv9bv/tmpotkxv9bv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c81c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c818fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c818fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c818f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotkxv9bv                        0x0000559435c2d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b0c81def460 __libc_start_main +
    245

    6    tmpotkxv9bv                        0x0000559435c2d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n    }\n  \
    \  return s.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var set = Set<Int>()\n    for i in l {\n        set.insert(i)\n    }\n\
    \    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var list = l\n    list.sort()\n    var last = list[0]\n    var i = 1\n\
    \    while i < list.count {\n        if list[i] == last {\n            list.removeAtIndex(i)\n\
    \        } else {\n            last = list[i]\n            i += 1\n        }\n\
    \    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpta8zs7w5.swift:12:18: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n            list.removeAtIndex(i)\n            ~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013621
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    var result = [Int]()\n    for x in l {\n \
    \       if !seen.contains(x) {\n            seen.insert(x)\n            result.append(x)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpg1pgtrv7/tmpg1pgtrv7.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b500e833c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b500e52ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b500e52a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b500e5297b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg1pgtrv7                        0x00005652b412e785 <unavailable> + 6021

    5    libc.so.6                          0x00002b500ea1f460 __libc_start_main +
    245

    6    tmpg1pgtrv7                        0x00005652b412e339 <unavailable> + 4921

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpotkxv9bv/tmpotkxv9bv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c81c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c818fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c818fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c818f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotkxv9bv                        0x0000559435c2d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b0c81def460 __libc_start_main +
    245

    6    tmpotkxv9bv                        0x0000559435c2d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var unique = [Int]()\n    for i in l {\n        if !unique.contains(i)\
    \ {\n            unique.append(i)\n        }\n    }\n    return unique.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList: [Int] = []\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var u = [Int]()\n    for i in l {\n        if !u.contains(i) {\n    \
    \        u.append(i)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var list = l\n    list.sort()\n    var result = [Int]()\n    for i in\
    \ list {\n        if result.last != i {\n            result.append(i)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int:Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpwwdtf9a7/tmpwwdtf9a7.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb492c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb48fbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb48fbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb48fbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwdtf9a7                        0x0000559304418625 <unavailable> + 5669

    5    libc.so.6                          0x00002afb494b3460 __libc_start_main +
    245

    6    tmpwwdtf9a7                        0x00005593044181d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n    }\n  \
    \  return Array(s).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpotkxv9bv/tmpotkxv9bv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c81c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c818fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c818fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c818f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotkxv9bv                        0x0000559435c2d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b0c81def460 __libc_start_main +
    245

    6    tmpotkxv9bv                        0x0000559435c2d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var list = l\n    list.sort()\n    var result: [Int] = []\n    for item\
    \ in list {\n        if result.last != item {\n            result.append(item)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpotkxv9bv/tmpotkxv9bv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c81c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c818fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c818fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c818f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotkxv9bv                        0x0000559435c2d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b0c81def460 __libc_start_main +
    245

    6    tmpotkxv9bv                        0x0000559435c2d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpotkxv9bv/tmpotkxv9bv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c81c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c818fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c818fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c818f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotkxv9bv                        0x0000559435c2d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b0c81def460 __libc_start_main +
    245

    6    tmpotkxv9bv                        0x0000559435c2d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int:Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpwwdtf9a7/tmpwwdtf9a7.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb492c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb48fbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb48fbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb48fbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwdtf9a7                        0x0000559304418625 <unavailable> + 5669

    5    libc.so.6                          0x00002afb494b3460 __libc_start_main +
    245

    6    tmpwwdtf9a7                        0x00005593044181d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpotkxv9bv/tmpotkxv9bv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c81c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c818fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c818fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c818f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotkxv9bv                        0x0000559435c2d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b0c81def460 __libc_start_main +
    245

    6    tmpotkxv9bv                        0x0000559435c2d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var set = Set<Int>()\n    for item in l {\n        set.insert(item)\n\
    \    }\n    return Array(set).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpyd55t_ge/tmpyd55t_ge.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af388d8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af388a86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af388a86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af388a857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyd55t_ge                        0x000055e72d11b575 <unavailable> + 5493

    5    libc.so.6                          0x00002af388f7b460 __libc_start_main +
    245

    6    tmpyd55t_ge                        0x000055e72d11b129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter {\n        if seen.contains($0)\
    \ {\n            return false\n        } else {\n            seen.insert($0)\n\
    \            return true\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpjuwro5br/tmpjuwro5br.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b06d6c92c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b06d6989b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b06d6989988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b06d69887b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuwro5br                        0x0000565480493635 <unavailable> + 5685

    5    libc.so.6                          0x00002b06d6e7e460 __libc_start_main +
    245

    6    tmpjuwro5br                        0x00005654804931e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var res = [Int]()\n    for i in l {\n        if !res.contains(i) {\n\
    \            res.append(i)\n        }\n    }\n    return res.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpotkxv9bv/tmpotkxv9bv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c81c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c818fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c818fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c818f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotkxv9bv                        0x0000559435c2d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b0c81def460 __libc_start_main +
    245

    6    tmpotkxv9bv                        0x0000559435c2d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpotkxv9bv/tmpotkxv9bv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c81c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c818fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c818fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c818f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotkxv9bv                        0x0000559435c2d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b0c81def460 __libc_start_main +
    245

    6    tmpotkxv9bv                        0x0000559435c2d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 1
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var list = l\n    list.sort()\n    var last = list[0]\n    var i = 1\n\
    \    while i < list.count {\n        if list[i] == last {\n            list.removeAtIndex(i)\n\
    \        } else {\n            last = list[i]\n            i += 1\n        }\n\
    \    }\n    return list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: SyntaxError
  stderr: "/tmp/tmpta8zs7w5.swift:12:18: error: value of type '[Int]' has no member\
    \ 'removeAtIndex'\n            list.removeAtIndex(i)\n            ~~~~ ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013621
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for item in l {\n        if !result.contains(item)\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpotkxv9bv/tmpotkxv9bv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c81c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c818fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c818fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c818f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotkxv9bv                        0x0000559435c2d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b0c81def460 __libc_start_main +
    245

    6    tmpotkxv9bv                        0x0000559435c2d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int:Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpwwdtf9a7/tmpwwdtf9a7.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afb492c7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afb48fbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afb48fbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afb48fbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwwdtf9a7                        0x0000559304418625 <unavailable> + 5669

    5    libc.so.6                          0x00002afb494b3460 __libc_start_main +
    245

    6    tmpwwdtf9a7                        0x00005593044181d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpotkxv9bv/tmpotkxv9bv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c81c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c818fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c818fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c818f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotkxv9bv                        0x0000559435c2d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b0c81def460 __libc_start_main +
    245

    6    tmpotkxv9bv                        0x0000559435c2d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var u = [Int]()\n    for i in l {\n        if !u.contains(i) {\n    \
    \        u.append(i)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var list = l\n    list.sort()\n    var result: [Int] = []\n    var prev\
    \ = -1\n    for item in list {\n        if item != prev {\n            result.append(item)\n\
    \        }\n        prev = item\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for item in l {\n        if !result.contains(item)\
    \ {\n            result.append(item)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var uniqueList = [Int]()\n    for item in l {\n        if !uniqueList.contains(item)\
    \ {\n            uniqueList.append(item)\n        }\n    }\n    return uniqueList.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen: [Int: Bool] = [:]\n    return l.filter { seen.updateValue(true,\
    \ forKey: $0) == nil }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmpotkxv9bv/tmpotkxv9bv.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c81c03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c818fab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c818fa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c818f97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpotkxv9bv                        0x0000559435c2d625 <unavailable> + 5669

    5    libc.so.6                          0x00002b0c81def460 __libc_start_main +
    245

    6    tmpotkxv9bv                        0x0000559435c2d1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var list = l\n    list.sort()\n    var result = [Int]()\n    for i in\
    \ list {\n        if result.last != i {\n            result.append(i)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var u = [Int]()\n    for x in l {\n        if !u.contains(x) {\n    \
    \        u.append(x)\n        }\n    }\n    return u.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3,\
    \ 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var u = [Int]()\n    for item in l {\n        if !u.contains(item) {\n\
    \            u.append(item)\n        }\n    }\n    return u.sorted()\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: -4
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var seen = Set<Int>()\n    return l.filter { seen.insert($0).inserted\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: Exception
  stderr: 'tmphgxm80ke/tmphgxm80ke.swift:23: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac026db6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac026aadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac026aad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac026aac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphgxm80ke                        0x0000557cba03a5e5 <unavailable> + 5605

    5    libc.so.6                          0x00002ac026fa2460 __libc_start_main +
    245

    6    tmphgxm80ke                        0x0000557cba03a199 <unavailable> + 4505

    '
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var s = Set<Int>()\n    for i in l {\n        s.insert(i)\n    }\n  \
    \  return Array(s).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(unique(l:\
    \ [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    return Array(Set(l)).sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result = [Int]()\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
- exit_code: 0
  program: "\n/// Return sorted unique elements in a list\n/// >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n/// [0, 2, 3, 5, 9, 123]\nfunc unique(l: [Int]) -> [Int]\
    \ {\n    var result: [Int] = []\n    for i in l {\n        if !result.contains(i)\
    \ {\n            result.append(i)\n        }\n    }\n    return result.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(unique(l: [5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013622
