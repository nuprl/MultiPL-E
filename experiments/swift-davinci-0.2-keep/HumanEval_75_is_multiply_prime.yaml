name: HumanEval_75_is_multiply_prime
language: swift
prompt: "\n/// Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n/// and false otherwise.\n/// Knowing that (a) is less then\
  \ 100. \n/// Example:\n/// is_multiply_prime(30) == True\n/// 30 = 2 * 3 * 5\nfunc\
  \ is_multiply_prime(a: Int) -> Bool {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(is_multiply_prime(a: 5) == false)\nassert(is_multiply_prime(a:\
  \ 30) == true)\nassert(is_multiply_prime(a: 8) == true)\nassert(is_multiply_prime(a:\
  \ 10) == false)\nassert(is_multiply_prime(a: 125) == true)\nassert(is_multiply_prime(a:\
  \ 105) == true)\nassert(is_multiply_prime(a: 126) == false)\nassert(is_multiply_prime(a:\
  \ 729) == false)\nassert(is_multiply_prime(a: 891) == false)\nassert(is_multiply_prime(a:\
  \ 1001) == true)"
completions: ["    var isPrime = true\n    var i = 2\n    while i < a {\n        if\
    \ a % i == 0 {\n            isPrime = false\n        }\n        i += 1\n    }\n\
    \    return isPrime", "    var isPrime = true\n    var i = 2\n    while i < a\
    \ {\n        if a % i == 0 {\n            isPrime = false\n        }\n       \
    \ i += 1\n    }\n    return isPrime", "    var result = false\n    var count =\
    \ 0\n    for i in 2...a {\n        if a % i == 0 {\n            count += 1\n \
    \       }\n    }\n    if count == 3 {\n        result = true\n    }\n    return\
    \ result", "    var isMultiplyPrime = false\n    var a = a\n    var i = 2\n  \
    \  while i < a {\n        if a % i == 0 {\n            isMultiplyPrime = is_prime(a:\
    \ i)\n            if isMultiplyPrime {\n                a /= i\n             \
    \   i = 2\n            } else {\n                i += 1\n            }\n     \
    \   } else {\n            i += 1\n        }\n    }\n    return is_prime(a: a)",
  "    var is_multiply_prime = false\n    var i = 2\n    var j = 2\n    var k = 2\n\
    \    while i < a {\n        while j < a {\n            while k < a {\n       \
    \         if i * j * k == a {\n                    is_multiply_prime = true\n\
    \                }\n                k += 1\n            }\n            j += 1\n\
    \        }\n        i += 1\n    }\n    return is_multiply_prime", "    var result\
    \ = false\n    var a = a\n    var i = 2\n    var count = 0\n    while i < a {\n\
    \        if a % i == 0 {\n            a /= i\n            count += 1\n       \
    \ } else {\n            i += 1\n        }\n    }\n    if count == 2 {\n      \
    \  result = true\n    }\n    return result", "    var a = a\n    var result =\
    \ true\n    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(i)\
    \ {\n            primes.append(i)\n        }\n    }\n    for i in primes {\n \
    \       if a % i == 0 {\n            a /= i\n        }\n    }\n    if a != 1 {\n\
    \        result = false\n    }\n    return result", "    var result = false\n\
    \    var primes = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n\
    \            primes.append(i)\n        }\n    }\n    for i in 0..<primes.count\
    \ {\n        for j in i..<primes.count {\n            for k in j..<primes.count\
    \ {\n                if primes[i] * primes[j] * primes[k] == a {\n           \
    \         result = true\n                }\n            }\n        }\n    }\n\
    \    return result", "    var is_multiply_prime = false\n    var prime_numbers\
    \ = [Int]()\n    for i in 2...a {\n        var is_prime = true\n        for j\
    \ in 2..<i {\n            if i % j == 0 {\n                is_prime = false\n\
    \                break\n            }\n        }\n        if is_prime {\n    \
    \        prime_numbers.append(i)\n        }\n    }\n    for i in 0..<prime_numbers.count\
    \ {\n        for j in 0..<prime_numbers.count {\n            for k in 0..<prime_numbers.count\
    \ {\n                if prime_numbers[i] * prime_numbers[j] * prime_numbers[k]\
    \ == a {\n                    is_multiply_prime = true\n                }\n  \
    \          }\n        }\n    }\n    return is_multiply_prime", "    var isPrime\
    \ = true\n    var number = a\n    var i = 2\n    while i < number {\n        if\
    \ number % i == 0 {\n            number /= i\n            isPrime = false\n  \
    \      } else {\n            i += 1\n        }\n    }\n    return isPrime", " \
    \   var isPrime = true\n    var isMultiply = false\n    var i = 2\n    var j =\
    \ 2\n    var k = 2\n    while i < a {\n        while j < a {\n            while\
    \ k < a {\n                if i * j * k == a {\n                    isMultiply\
    \ = true\n                }\n                k += 1\n            }\n         \
    \   j += 1\n        }\n        i += 1\n    }\n    return isPrime && isMultiply",
  '    return false', "    var num = a\n    var prime = 2\n    var count = 0\n   \
    \ while num > 1 {\n        if num % prime == 0 {\n            count += 1\n   \
    \         num /= prime\n        } else {\n            prime += 1\n        }\n\
    \    }\n    return count == 3", "    var isPrime = true\n    var a = a\n    var\
    \ i = 2\n    while i < a && isPrime {\n        if a % i == 0 {\n            a\
    \ /= i\n            isPrime = is_prime(a: i)\n        }\n        i += 1\n    }\n\
    \    return isPrime", "    var is_multiply_prime = false\n    var a = a\n    var\
    \ prime_numbers = [Int]()\n    for i in 2...a {\n        if is_prime(i) {\n  \
    \          prime_numbers.append(i)\n        }\n    }\n    for prime_number in\
    \ prime_numbers {\n        if a % prime_number == 0 {\n            a /= prime_number\n\
    \        }\n    }\n    if a == 1 {\n        is_multiply_prime = true\n    }\n\
    \    return is_multiply_prime", "    var isMultiply = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if isPrime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    isMultiply =\
    \ true\n                }\n            }\n        }\n    }\n    return isMultiply",
  "    var result = false\n    var primes = [Int]()\n    for i in 2...a {\n      \
    \  if is_prime(i) {\n            primes.append(i)\n        }\n    }\n    for i\
    \ in 0..<primes.count {\n        for j in i..<primes.count {\n            for\
    \ k in j..<primes.count {\n                if primes[i] * primes[j] * primes[k]\
    \ == a {\n                    result = true\n                }\n            }\n\
    \        }\n    }\n    return result", "    var result = false\n    var primeNumbers\
    \ = [Int]()\n    for i in 2...a {\n        if is_prime(a: i) {\n            primeNumbers.append(i)\n\
    \        }\n    }\n    for i in 0..<primeNumbers.count {\n        for j in i+1..<primeNumbers.count\
    \ {\n            for k in j+1..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result", "   \
    \ var primeNumbers = [Int]()\n    for i in 2...a {\n        if is_prime(a: i)\
    \ {\n            primeNumbers.append(i)\n        }\n    }\n    var result = false\n\
    \    for i in 0..<primeNumbers.count {\n        for j in i..<primeNumbers.count\
    \ {\n            for k in j..<primeNumbers.count {\n                if primeNumbers[i]\
    \ * primeNumbers[j] * primeNumbers[k] == a {\n                    result = true\n\
    \                }\n            }\n        }\n    }\n    return result", "   \
    \ var isPrime = true\n    var primeNumbers = [Int]()\n    for i in 2...a {\n \
    \       for j in 2..<i {\n            if i % j == 0 {\n                isPrime\
    \ = false\n            }\n        }\n        if isPrime {\n            primeNumbers.append(i)\n\
    \        }\n        isPrime = true\n    }\n    for i in 0..<primeNumbers.count\
    \ {\n        for j in 0..<primeNumbers.count {\n            for k in 0..<primeNumbers.count\
    \ {\n                if primeNumbers[i] * primeNumbers[j] * primeNumbers[k] ==\
    \ a {\n                    return true\n                }\n            }\n   \
    \     }\n    }\n    return false"]
stop_tokens:
- "\n}"
