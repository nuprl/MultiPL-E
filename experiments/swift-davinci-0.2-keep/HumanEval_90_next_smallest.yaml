name: HumanEval_90_next_smallest
language: swift
prompt: "\n/// You are given a list of integers.\n/// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n/// Return None if there is\
  \ no such element.\n/// next_smallest([1, 2, 3, 4, 5]) == 2\n/// next_smallest([5,\
  \ 1, 4, 3, 2]) == 2\n/// next_smallest([]) == None\n/// next_smallest([1, 1]) ==\
  \ None\nfunc next_smallest(lst: [Int]) -> Int? {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(next_smallest(lst: [1, 2, 3, 4, 5]) == 2)\n\
  assert(next_smallest(lst: [5, 1, 4, 3, 2]) == 2)\nassert(next_smallest(lst: [] as\
  \ [Int]) == nil)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [1, 1, 1, 1, 0]) == 1)\nassert(next_smallest(lst: [1, 1]) == nil)\nassert(next_smallest(lst:\
  \ [-35, 34, 12, -45]) == -35)"
completions: ["    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n\
    \    var next = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < min\
    \ {\n            next = min\n            min = lst[i]\n        } else if lst[i]\
    \ < next {\n            next = lst[i]\n        }\n    }\n    return next", " \
    \   guard lst.count > 1 else {\n        return nil\n    }\n    var min = lst[0]\n\
    \    var min2 = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min\
    \ {\n            min2 = min\n            min = lst[i]\n        } else if lst[i]\
    \ < min2 {\n            min2 = lst[i]\n        }\n    }\n    return min2", " \
    \   guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var min2\
    \ = lst[1]\n    for i in lst {\n        if i < min {\n            min2 = min\n\
    \            min = i\n        } else if i < min2 {\n            min2 = i\n   \
    \     }\n    }\n    return min2", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin\
    \ {\n        min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var next = lst[1]\n    for i in lst {\n   \
    \     if i < min {\n            next = min\n            min = i\n        } else\
    \ if i < next {\n            next = i\n        }\n    }\n    return next", " \
    \   if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ second = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < min {\n \
    \           second = min\n            min = lst[i]\n        } else if lst[i] <\
    \ second {\n            second = lst[i]\n        }\n    }\n    return second",
  "    var min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n      \
    \  if i < min {\n            secondMin = min\n            min = i\n        } else\
    \ if i < secondMin {\n            secondMin = i\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    let sorted = lst.sorted()\n    var last = sorted[0]\n    for i in\
    \ 1..<sorted.count {\n        if sorted[i] != last {\n            return sorted[i]\n\
    \        }\n        last = sorted[i]\n    }\n    return nil", "    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin", "    var\
    \ min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n        if i\
    \ < min {\n            secondMin = min\n            min = i\n        } else if\
    \ i < secondMin {\n            secondMin = i\n        }\n    }\n    return secondMin\
    \ == Int.max ? nil : secondMin", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    if min > nextMin {\n\
    \        min = nextMin\n        nextMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var min = Int.max\n    var min2 = Int.max\n\
    \    for i in lst {\n        if i < min {\n            min2 = min\n          \
    \  min = i\n        } else if i < min2 {\n            min2 = i\n        }\n  \
    \  }\n    return min2 == Int.max ? nil : min2", "    if lst.count < 2 {\n    \
    \    return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin", "    var min = Int.max\n  \
    \  var secondMin = Int.max\n    for item in lst {\n        if item < min {\n \
    \           secondMin = min\n            min = item\n        } else if item <\
    \ secondMin {\n            secondMin = item\n        }\n    }\n    return secondMin\
    \ == Int.max ? nil : secondMin", "    guard lst.count > 1 else {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in lst {\n    \
    \    if i < min {\n            nextMin = min\n            min = i\n        } else\
    \ if i < nextMin {\n            nextMin = i\n        }\n    }\n    return nextMin",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ secondMin = lst[1]\n    for i in lst {\n        if i < min {\n            secondMin\
    \ = min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin", "    if lst.count < 2 {\n    \
    \    return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin", "    var min = lst[0]\n   \
    \ var nextMin = lst[0]\n    for i in lst {\n        if i < min {\n           \
    \ nextMin = min\n            min = i\n        } else if i < nextMin {\n      \
    \      nextMin = i\n        }\n    }\n    return nextMin", "    if lst.count <\
    \ 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    if min > secondMin {\n        min = lst[1]\n        secondMin = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin", "    if\
    \ lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var min2\
    \ = lst[1]\n    if min > min2 {\n        min = min2\n        min2 = lst[0]\n \
    \   }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            min2\
    \ = min\n            min = lst[i]\n        } else if lst[i] < min2 {\n       \
    \     min2 = lst[i]\n        }\n    }\n    return min2", "    if lst.count < 2\
    \ {\n        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            nextMin = min\n       \
    \     min = i\n        } else if i < nextMin {\n            nextMin = i\n    \
    \    }\n    }\n    return nextMin", "    guard lst.count > 1 else { return nil\
    \ }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var min = Int.max\n    var min2 = Int.max\n\
    \    for i in lst {\n        if i < min {\n            min2 = min\n          \
    \  min = i\n        } else if i < min2 {\n            min2 = i\n        }\n  \
    \  }\n    return min2 == Int.max ? nil : min2", "    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ 1..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n    \
    \        min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin", "    guard lst.count > 1 else\
    \ {\n        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            nextMin = min\n       \
    \     min = i\n        } else if i < nextMin {\n            nextMin = i\n    \
    \    }\n    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var min = Int.max\n    var secondMin = Int.max\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin == Int.max ? nil : secondMin", "    if\
    \ lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var next\
    \ = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < min {\n        \
    \    next = min\n            min = lst[i]\n        } else if lst[i] < next {\n\
    \            next = lst[i]\n        }\n    }\n    return next", "    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin", "    guard\
    \ lst.count > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n    \
    \        nextMin = lst[i]\n        }\n    }\n    return nextMin", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            min2 = min\n          \
    \  min = i\n        } else if i < min2 {\n            min2 = i\n        }\n  \
    \  }\n    return min2", "    guard lst.count > 1 else { return nil }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n        if i <\
    \ min {\n            secondMin = min\n            min = i\n        } else if i\
    \ < secondMin {\n            secondMin = i\n        }\n    }\n    return secondMin",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in lst {\n        if i < min {\n            secondMin =\
    \ min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin", "    if lst.count < 2 {\n    \
    \    return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n   \
    \ for i in lst {\n        if i < min {\n            secondMin = min\n        \
    \    min = i\n        } else if i < secondMin {\n            secondMin = i\n \
    \       }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    guard lst.count > 1 else { return nil }\n  \
    \  var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count {\n\
    \        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n    if min > next_min\
    \ {\n        min = next_min\n        next_min = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            next_min = min\n            min =\
    \ lst[i]\n        } else if lst[i] < next_min {\n            next_min = lst[i]\n\
    \        }\n    }\n    return next_min", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in lst\
    \ {\n        if i < min {\n            secondMin = min\n            min = i\n\
    \        } else if i < secondMin {\n            secondMin = i\n        }\n   \
    \ }\n    return secondMin", "    guard lst.count > 1 else { return nil }\n   \
    \ let sorted = lst.sorted()\n    var prev = sorted[0]\n    for i in 1..<sorted.count\
    \ {\n        if sorted[i] != prev {\n            return sorted[i]\n        }\n\
    \        prev = sorted[i]\n    }\n    return nil", "    guard lst.count > 1 else\
    \ { return nil }\n    var sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i != prev {\n            return i\n       \
    \ }\n        prev = i\n    }\n    return nil", "    guard lst.count > 1 else {\
    \ return nil }\n    var min = lst[0]\n    var next = lst[1]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            next = min\n            min = lst[i]\n\
    \        } else if lst[i] < next {\n            next = lst[i]\n        }\n   \
    \ }\n    return next == min ? nil : next", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    guard lst.count > 1 else { return nil }\n  \
    \  var min1 = lst[0]\n    var min2 = lst[1]\n    if min1 > min2 {\n        (min1,\
    \ min2) = (min2, min1)\n    }\n    for i in 2..<lst.count {\n        if lst[i]\
    \ < min1 {\n            min2 = min1\n            min1 = lst[i]\n        } else\
    \ if lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n    return\
    \ min2", "    var min = Int.max\n    var secondMin = Int.max\n    for i in lst\
    \ {\n        if i < min {\n            secondMin = min\n            min = i\n\
    \        } else if i < secondMin {\n            secondMin = i\n        }\n   \
    \ }\n    return secondMin == Int.max ? nil : secondMin", "    var min = lst[0]\n\
    \    var secondMin = lst[0]\n    for i in lst {\n        if i < min {\n      \
    \      secondMin = min\n            min = i\n        } else if i < secondMin {\n\
    \            secondMin = i\n        }\n    }\n    return secondMin", "    var\
    \ min = Int.max\n    var second = Int.max\n    for i in lst {\n        if i <\
    \ min {\n            second = min\n            min = i\n        } else if i <\
    \ second {\n            second = i\n        }\n    }\n    return second == Int.max\
    \ ? nil : second", "    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n     \
    \   if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var min2 = lst[1]\n    if min > min2 {\n      \
    \  (min, min2) = (min2, min)\n    }\n    for i in 2..<lst.count {\n        if\
    \ lst[i] < min {\n            min2 = min\n            min = lst[i]\n        }\
    \ else if lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n    return\
    \ min2", "    var min = Int.max\n    var secondMin = Int.max\n    for i in lst\
    \ {\n        if i < min {\n            secondMin = min\n            min = i\n\
    \        } else if i < secondMin {\n            secondMin = i\n        }\n   \
    \ }\n    return secondMin == Int.max ? nil : secondMin", "    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            secondMin = min\n     \
    \       min = i\n        } else if i < secondMin {\n            secondMin = i\n\
    \        }\n    }\n    return secondMin", "    var smallest = lst[0]\n    var\
    \ secondSmallest = lst[0]\n    for i in lst {\n        if i < smallest {\n   \
    \         secondSmallest = smallest\n            smallest = i\n        } else\
    \ if i < secondSmallest {\n            secondSmallest = i\n        }\n    }\n\
    \    return secondSmallest", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    var min = Int.max\n    var secondMin\
    \ = Int.max\n    for i in lst {\n        if i < min {\n            secondMin =\
    \ min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin", " \
    \   guard lst.count > 1 else { return nil }\n    var sorted = lst.sorted()\n \
    \   var prev = sorted.removeFirst()\n    while let next = sorted.first {\n   \
    \     if next != prev {\n            return next\n        }\n        prev = sorted.removeFirst()\n\
    \    }\n    return nil", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    var min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n\
    \        min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin\
    \ {\n        swap(&min, &secondMin)\n    }\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    guard lst.count > 1 else { return nil }\n  \
    \  var min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n  \
    \      min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin\
    \ {\n        min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] > min && lst[i] < secondMin {\n           \
    \ secondMin = lst[i]\n        }\n    }\n    return secondMin", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n\
    \    if min > min2 {\n        min = min2\n        min2 = lst[0]\n    }\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < min {\n            min2 = min\n  \
    \          min = lst[i]\n        } else if lst[i] < min2 {\n            min2 =\
    \ lst[i]\n        }\n    }\n    return min2", "    var sorted = lst.sorted()\n\
    \    var prev = sorted.removeFirst()\n    for i in sorted {\n        if i != prev\
    \ {\n            return i\n        }\n        prev = i\n    }\n    return nil",
  "    let sorted = lst.sorted()\n    if sorted.count < 2 {\n        return nil\n\
    \    }\n    return sorted[1]", "    guard lst.count > 1 else { return nil }\n\
    \    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n\
    \        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var next_min = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            next_min = min\n            min =\
    \ lst[i]\n        } else if lst[i] < next_min {\n            next_min = lst[i]\n\
    \        }\n    }\n    return next_min", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    guard lst.count > 1 else { return nil }\n  \
    \  var min = lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n\
    \        if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in lst\
    \ {\n        if i < min {\n            secondMin = min\n            min = i\n\
    \        } else if i < secondMin {\n            secondMin = i\n        }\n   \
    \ }\n    return secondMin", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    var min = lst[0]\n    var min2 = lst[1]\n    for i in lst {\n        if i\
    \ < min {\n            min2 = min\n            min = i\n        } else if i <\
    \ min2 {\n            min2 = i\n        }\n    }\n    return min2", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin =\
    \ lst[1]\n    for i in lst {\n        if i < min {\n            secondMin = min\n\
    \            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin", "    guard lst.count > 1 else\
    \ { return nil }\n    var sorted = lst.sorted()\n    var last = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i != last {\n            return i\n       \
    \ }\n        last = i\n    }\n    return nil", "    guard lst.count > 1 else {\
    \ return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var min = Int.max\n    var nextMin = Int.max\n\
    \    for num in lst {\n        if num < min {\n            nextMin = min\n   \
    \         min = num\n        } else if num < nextMin {\n            nextMin =\
    \ num\n        }\n    }\n    return nextMin == Int.max ? nil : nextMin", "   \
    \ guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n        \
    \    secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ nextMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n\
    \            nextMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return nextMin",
  "    var sorted = lst.sorted()\n    var prev: Int?\n    for item in sorted {\n \
    \       if prev != nil && prev != item {\n            return item\n        }\n\
    \        prev = item\n    }\n    return nil", "    if lst.count < 2 {\n      \
    \  return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n    for\
    \ i in lst {\n        if i < min {\n            next_min = min\n            min\
    \ = i\n        } else if i < next_min {\n            next_min = i\n        }\n\
    \    }\n    return next_min", "    if lst.count < 2 {\n        return nil\n  \
    \  }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n \
    \       if i < min {\n            secondMin = min\n            min = i\n     \
    \   } else if i < secondMin {\n            secondMin = i\n        }\n    }\n \
    \   return secondMin", "    if lst.count < 2 {\n        return nil\n    }\n  \
    \  var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n\
    \        if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin", "    var sorted = lst.sorted()\n    var\
    \ last: Int?\n    for i in sorted {\n        if last == nil {\n            last\
    \ = i\n        } else if last != i {\n            return i\n        }\n    }\n\
    \    return nil", "    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var nextMin = lst[1]\n    for i in lst {\n        if i < min\
    \ {\n            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin", "    guard\
    \ lst.count > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            nextMin = min\n       \
    \     min = i\n        } else if i < nextMin {\n            nextMin = i\n    \
    \    }\n    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var min = Int.max\n    var min2 = Int.max\n\
    \    for i in lst {\n        if i < min {\n            min2 = min\n          \
    \  min = i\n        } else if i < min2 {\n            min2 = i\n        }\n  \
    \  }\n    return min2 == Int.max ? nil : min2", "    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var next = lst[0]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            next = min\n            min = lst[i]\n\
    \        } else if lst[i] < next {\n            next = lst[i]\n        }\n   \
    \ }\n    return next", "    if lst.count < 2 {\n        return nil\n    }\n  \
    \  var min = lst[0]\n    var min2 = lst[1]\n    for i in lst {\n        if i <\
    \ min {\n            min2 = min\n            min = i\n        } else if i < min2\
    \ {\n            min2 = i\n        }\n    }\n    return min2", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n    \
    \        nextMin = lst[i]\n        }\n    }\n    return nextMin", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin =\
    \ lst[1]\n    for i in lst {\n        if i < min {\n            secondMin = min\n\
    \            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin", "    if lst.count < 2 {\n    \
    \    return nil\n    }\n    var min = lst[0]\n    var next = lst[1]\n    for i\
    \ in 1..<lst.count {\n        if lst[i] < min {\n            next = min\n    \
    \        min = lst[i]\n        } else if lst[i] < next {\n            next = lst[i]\n\
    \        }\n    }\n    return next", "    guard lst.count > 1 else {\n       \
    \ return nil\n    }\n    var min = lst[0]\n    var min2 = lst[1]\n    for i in\
    \ lst {\n        if i < min {\n            min2 = min\n            min = i\n \
    \       } else if i < min2 {\n            min2 = i\n        }\n    }\n    return\
    \ min2", "    guard lst.count > 1 else { return nil }\n    return lst.sorted()[1]",
  "    var min = lst[0]\n    var nextMin = lst[0]\n    var found = false\n    for\
    \ i in lst {\n        if i < min {\n            nextMin = min\n            min\
    \ = i\n            found = true\n        } else if i < nextMin && i != min {\n\
    \            nextMin = i\n            found = true\n        }\n    }\n    return\
    \ found ? nextMin : nil", "    guard lst.count > 1 else { return nil }\n    var\
    \ sorted = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted\
    \ {\n        if i != last {\n            return i\n        }\n        last = i\n\
    \    }\n    return nil", "    guard lst.count > 1 else { return nil }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n        if i <\
    \ min {\n            secondMin = min\n            min = i\n        } else if i\
    \ < secondMin {\n            secondMin = i\n        }\n    }\n    return secondMin",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ secondMin = lst[1]\n    if min > secondMin {\n        min = lst[1]\n       \
    \ secondMin = lst[0]\n    }\n    for i in 2..<lst.count {\n        if lst[i] <\
    \ min {\n            secondMin = min\n            min = lst[i]\n        } else\
    \ if lst[i] < secondMin {\n            secondMin = lst[i]\n        }\n    }\n\
    \    return secondMin", "    guard lst.count > 1 else { return nil }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin", "    guard lst.count > 1 else { return nil\
    \ }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var min = Int.max\n    var min2 = Int.max\n\
    \    for i in lst {\n        if i < min {\n            min2 = min\n          \
    \  min = i\n        } else if i < min2 {\n            min2 = i\n        }\n  \
    \  }\n    return min2 == Int.max ? nil : min2", "    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ lst {\n        if i < min {\n            nextMin = min\n            min = i\n\
    \        } else if i < nextMin {\n            nextMin = i\n        }\n    }\n\
    \    return nextMin", "    guard lst.count > 1 else { return nil }\n    var min\
    \ = lst[0]\n    var nextMin = lst[1]\n    for i in lst {\n        if i < min {\n\
    \            nextMin = min\n            min = i\n        } else if i < nextMin\
    \ {\n            nextMin = i\n        }\n    }\n    return nextMin", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            next_min = min\n      \
    \      min = i\n        } else if i < next_min {\n            next_min = i\n \
    \       }\n    }\n    return next_min", "    guard lst.count > 1 else { return\
    \ nil }\n    var sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i != prev {\n            return i\n       \
    \ }\n        prev = i\n    }\n    return nil", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n    if\
    \ min > next_min {\n        min = next_min\n        next_min = lst[0]\n    }\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            nextMin = min\n       \
    \     min = i\n        } else if i < nextMin {\n            nextMin = i\n    \
    \    }\n    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin\
    \ {\n        min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    var min = Int.max\n    var min2\
    \ = Int.max\n    for i in lst {\n        if i < min {\n            min2 = min\n\
    \            min = i\n        } else if i < min2 {\n            min2 = i\n   \
    \     }\n    }\n    return min2 == Int.max ? nil : min2", "    if lst.count <\
    \ 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            secondMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < secondMin {\n  \
    \          secondMin = lst[i]\n        }\n    }\n    return secondMin", "    if\
    \ lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n        \
    \    secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var nextMin\
    \ = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < min {\n        \
    \    nextMin = min\n            min = lst[i]\n        } else if lst[i] < nextMin\
    \ {\n            nextMin = lst[i]\n        }\n    }\n    return min == nextMin\
    \ ? nil : nextMin", "    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count {\n     \
    \   if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var sorted = lst.sorted()\n    var prev = sorted.removeFirst()\n\
    \    for i in sorted {\n        if i != prev {\n            return i\n       \
    \ }\n        prev = i\n    }\n    return nil", "    if lst.count < 2 {\n     \
    \   return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for\
    \ i in lst {\n        if i < min {\n            nextMin = min\n            min\
    \ = i\n        } else if i < nextMin {\n            nextMin = i\n        }\n \
    \   }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    var smallest = lst[0]\n    var secondSmallest = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < smallest {\n            secondSmallest = smallest\n \
    \           smallest = lst[i]\n        } else if lst[i] < secondSmallest {\n \
    \           secondSmallest = lst[i]\n        }\n    }\n    return secondSmallest",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n        \
    \    secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var nextMin\
    \ = lst[1]\n    for i in lst {\n        if i < min {\n            nextMin = min\n\
    \            min = i\n        } else if i < nextMin {\n            nextMin = i\n\
    \        }\n    }\n    return nextMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin\
    \ {\n        min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in lst {\n    \
    \    if i < min {\n            nextMin = min\n            min = i\n        } else\
    \ if i < nextMin {\n            nextMin = i\n        }\n    }\n    return nextMin",
  "    guard lst.count > 1 else {\n        return nil\n    }\n    var sortedLst =\
    \ lst.sorted()\n    var prev = sortedLst[0]\n    for i in 1..<sortedLst.count\
    \ {\n        if sortedLst[i] != prev {\n            return sortedLst[i]\n    \
    \    }\n        prev = sortedLst[i]\n    }\n    return nil", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n    \
    \        nextMin = lst[i]\n        }\n    }\n    return nextMin", "    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return min == nextMin ? nil : nextMin",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ nextMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n\
    \            nextMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return nextMin",
  "    var min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n      \
    \  if i < min {\n            secondMin = min\n            min = i\n        } else\
    \ if i < secondMin {\n            secondMin = i\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in lst\
    \ {\n        if i < min {\n            secondMin = min\n            min = i\n\
    \        } else if i < secondMin {\n            secondMin = i\n        }\n   \
    \ }\n    return secondMin", "    guard lst.count > 1 else { return nil }\n   \
    \ var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n\
    \        if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin", "    var sorted = lst.sorted()\n    var\
    \ last = sorted.removeFirst()\n    for i in sorted {\n        if i != last {\n\
    \            return i\n        }\n        last = i\n    }\n    return nil", " \
    \   if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ secondMin = lst[1]\n    for i in lst {\n        if i < min {\n            secondMin\
    \ = min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin", "    let sorted = lst.sorted()\n\
    \    if sorted.count < 2 {\n        return nil\n    }\n    return sorted[1]",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ nextMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n\
    \            nextMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return nextMin",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < min {\n\
    \            nextMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return nextMin",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ nextMin = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < min {\n\
    \            nextMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return nextMin",
  "    var min = Int.max\n    var secondMin = Int.max\n    for i in lst {\n      \
    \  if i < min {\n            secondMin = min\n            min = i\n        } else\
    \ if i < secondMin {\n            secondMin = i\n        }\n    }\n    return\
    \ secondMin == Int.max ? nil : secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var min2 = lst[1]\n    if min > min2 {\n      \
    \  min = min2\n        min2 = lst[0]\n    }\n    for i in 2..<lst.count {\n  \
    \      if lst[i] < min {\n            min2 = min\n            min = lst[i]\n \
    \       } else if lst[i] < min2 {\n            min2 = lst[i]\n        }\n    }\n\
    \    return min2", "    guard lst.count > 1 else { return nil }\n    let sorted\
    \ = lst.sorted()\n    return sorted[1]", "    var min = lst[0]\n    var nextMin\
    \ = lst[0]\n    for i in lst {\n        if i < min {\n            nextMin = min\n\
    \            min = i\n        } else if i < nextMin {\n            nextMin = i\n\
    \        }\n    }\n    return nextMin", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    var min = Int.max\n    var min2\
    \ = Int.max\n    for i in lst {\n        if i < min {\n            min2 = min\n\
    \            min = i\n        } else if i < min2 {\n            min2 = i\n   \
    \     }\n    }\n    return min2 == Int.max ? nil : min2", "    if lst.count <\
    \ 2 {\n        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min", "    var\
    \ min = Int.max\n    var next = Int.max\n    for i in lst {\n        if i < min\
    \ {\n            next = min\n            min = i\n        } else if i < next {\n\
    \            next = i\n        }\n    }\n    return next == Int.max ? nil : next",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ secondMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n\
    \            secondMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < secondMin {\n            secondMin = lst[i]\n        }\n    }\n    return\
    \ secondMin", "    var min = Int.max\n    var secondMin = Int.max\n    for i in\
    \ lst {\n        if i < min {\n            secondMin = min\n            min =\
    \ i\n        } else if i < secondMin {\n            secondMin = i\n        }\n\
    \    }\n    return secondMin == Int.max ? nil : secondMin", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n    \
    \        nextMin = lst[i]\n        }\n    }\n    return nextMin", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    if min > next_min {\n        min = next_min\n        next_min = lst[0]\n\
    \    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n            next_min\
    \ = min\n            min = lst[i]\n        } else if lst[i] < next_min {\n   \
    \         next_min = lst[i]\n        }\n    }\n    return next_min", "    guard\
    \ lst.count > 1 else { return nil }\n    var smallest = lst[0]\n    var secondSmallest\
    \ = Int.max\n    for i in lst {\n        if i < smallest {\n            secondSmallest\
    \ = smallest\n            smallest = i\n        } else if i < secondSmallest {\n\
    \            secondSmallest = i\n        }\n    }\n    return secondSmallest ==\
    \ Int.max ? nil : secondSmallest", "    var min = Int.max\n    var secondMin =\
    \ Int.max\n    for i in lst {\n        if i < min {\n            secondMin = min\n\
    \            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin", " \
    \   guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var next\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n        \
    \    next = min\n            min = lst[i]\n        } else if lst[i] < next {\n\
    \            next = lst[i]\n        }\n    }\n    return next", "    guard lst.count\
    \ > 1 else { return nil }\n    var smallest = lst[0]\n    var secondSmallest =\
    \ lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < smallest {\n     \
    \       secondSmallest = smallest\n            smallest = lst[i]\n        } else\
    \ if lst[i] < secondSmallest {\n            secondSmallest = lst[i]\n        }\n\
    \    }\n    return secondSmallest", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in lst {\n    \
    \    if i < min {\n            nextMin = min\n            min = i\n        } else\
    \ if i < nextMin {\n            nextMin = i\n        }\n    }\n    return nextMin",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ secondMin = lst[1]\n    for i in lst {\n        if i < min {\n            secondMin\
    \ = min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin", "    guard lst.count > 1 else\
    \ { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in\
    \ lst {\n        if i < min {\n            nextMin = min\n            min = i\n\
    \        } else if i < nextMin {\n            nextMin = i\n        }\n    }\n\
    \    return nextMin", "    guard lst.count > 1 else { return nil }\n    var min\
    \ = lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n       \
    \ if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < secondMin {\n            secondMin = lst[i]\n     \
    \   }\n    }\n    return secondMin", "    guard lst.count > 1 else { return nil\
    \ }\n    var min1 = lst[0]\n    var min2 = lst[1]\n    if min1 > min2 {\n    \
    \    min1 = lst[1]\n        min2 = lst[0]\n    }\n    for i in 2..<lst.count {\n\
    \        if lst[i] < min1 {\n            min2 = min1\n            min1 = lst[i]\n\
    \        } else if lst[i] < min2 {\n            min2 = lst[i]\n        }\n   \
    \ }\n    return min2", "    if lst.count < 2 {\n        return nil\n    }\n  \
    \  var min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n\
    \        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    var lst = lst\n    if lst.count < 2 {\n    \
    \    return nil\n    }\n    lst.sort()\n    for i in 1..<lst.count {\n       \
    \ if lst[i] != lst[i - 1] {\n            return lst[i]\n        }\n    }\n   \
    \ return nil", "    if lst.count < 2 {\n        return nil\n    }\n    var min\
    \ = lst[0]\n    var secondMin = lst[1]\n    for i in lst {\n        if i < min\
    \ {\n            secondMin = min\n            min = i\n        } else if i < secondMin\
    \ {\n            secondMin = i\n        }\n    }\n    return secondMin", "   \
    \ if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ nextMin = lst[1]\n    for i in lst {\n        if i < min {\n            nextMin\
    \ = min\n            min = i\n        } else if i < nextMin {\n            nextMin\
    \ = i\n        }\n    }\n    return nextMin", "    var lst = lst\n    lst.sort()\n\
    \    var smallest = lst[0]\n    for i in 1..<lst.count {\n        if lst[i] >\
    \ smallest {\n            return lst[i]\n        }\n    }\n    return nil", " \
    \   guard lst.count > 1 else { return nil }\n    var sorted = lst.sorted()\n \
    \   var last = sorted.removeFirst()\n    while let next = sorted.first {\n   \
    \     if next > last {\n            return next\n        }\n        last = next\n\
    \        sorted.removeFirst()\n    }\n    return nil", "    guard lst.count >\
    \ 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for\
    \ i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin = min\n\
    \            min = lst[i]\n        } else if lst[i] < nextMin {\n            nextMin\
    \ = lst[i]\n        }\n    }\n    return nextMin", "    var min = Int.max\n  \
    \  var min2 = Int.max\n    for i in lst {\n        if i < min {\n            min2\
    \ = min\n            min = i\n        } else if i < min2 {\n            min2 =\
    \ i\n        }\n    }\n    return min2 == Int.max ? nil : min2", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n\
    \    for i in 2..<lst.count {\n        if lst[i] < min {\n            nextMin\
    \ = min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n    \
    \        nextMin = lst[i]\n        }\n    }\n    return nextMin", "    guard lst.count\
    \ > 1 else { return nil }\n    var min = lst[0]\n    var nextMin = lst[1]\n  \
    \  for i in 1..<lst.count {\n        if lst[i] < min {\n            nextMin =\
    \ min\n            min = lst[i]\n        } else if lst[i] < nextMin {\n      \
    \      nextMin = lst[i]\n        }\n    }\n    return nextMin", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var next_min = lst[1]\n\
    \    for i in lst {\n        if i < min {\n            next_min = min\n      \
    \      min = i\n        } else if i < next_min {\n            next_min = i\n \
    \       }\n    }\n    return next_min", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin\
    \ {\n        min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    var min = Int.max\n    var secondMin\
    \ = Int.max\n    for i in lst {\n        if i < min {\n            secondMin =\
    \ min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin", " \
    \   if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ nextMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n\
    \            nextMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return nextMin",
  "    guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var nextMin\
    \ = Int.max\n    for i in 1..<lst.count {\n        if lst[i] < min {\n       \
    \     nextMin = min\n            min = lst[i]\n        } else if lst[i] < nextMin\
    \ {\n            nextMin = lst[i]\n        }\n    }\n    return nextMin == Int.max\
    \ ? nil : nextMin", "    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count {\n   \
    \     if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n    \
    \    }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var secondMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in lst\
    \ {\n        if i < min {\n            nextMin = min\n            min = i\n  \
    \      } else if i < nextMin {\n            nextMin = i\n        }\n    }\n  \
    \  return nextMin", "    guard lst.count > 1 else { return nil }\n    var sorted\
    \ = lst.sorted()\n    var last = sorted.removeFirst()\n    for i in sorted {\n\
    \        if i != last {\n            return i\n        }\n        last = i\n \
    \   }\n    return nil", "    guard lst.count > 1 else { return nil }\n    var\
    \ smallest = lst[0]\n    var nextSmallest = lst[1]\n    for i in lst {\n     \
    \   if i < smallest {\n            nextSmallest = smallest\n            smallest\
    \ = i\n        } else if i < nextSmallest {\n            nextSmallest = i\n  \
    \      }\n    }\n    return nextSmallest", "    guard lst.count > 1 else { return\
    \ nil }\n    var min = lst[0]\n    var min2 = lst[1]\n    for i in lst {\n   \
    \     if i < min {\n            min2 = min\n            min = i\n        } else\
    \ if i < min2 {\n            min2 = i\n        }\n    }\n    return min2", " \
    \   guard lst.count > 1 else {\n        return nil\n    }\n    var min = lst[0]\n\
    \    var next_min = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] <\
    \ min {\n            next_min = min\n            min = lst[i]\n        } else\
    \ if lst[i] < next_min {\n            next_min = lst[i]\n        }\n    }\n  \
    \  return next_min", "    if lst.count < 2 {\n        return nil\n    }\n    var\
    \ min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin {\n       \
    \ min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return\
    \ nil\n    }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var nextMin = lst[1]\n    for i in lst {\n    \
    \    if i < min {\n            nextMin = min\n            min = i\n        } else\
    \ if i < nextMin {\n            nextMin = i\n        }\n    }\n    return nextMin",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ min2 = lst[1]\n    for i in 1..<lst.count {\n        if lst[i] < min {\n   \
    \         min2 = min\n            min = lst[i]\n        } else if lst[i] < min2\
    \ {\n            min2 = lst[i]\n        }\n    }\n    return min2", "    if lst.count\
    \ < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var secondMin =\
    \ lst[1]\n    if min > secondMin {\n        min = lst[1]\n        secondMin =\
    \ lst[0]\n    }\n    for i in 2..<lst.count {\n        if lst[i] < min {\n   \
    \         secondMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < secondMin {\n            secondMin = lst[i]\n        }\n    }\n    return\
    \ secondMin", "    if lst.count < 2 {\n        return nil\n    }\n    var min\
    \ = lst[0]\n    var secondMin = lst[1]\n    for i in 1..<lst.count {\n       \
    \ if lst[i] < min {\n            secondMin = min\n            min = lst[i]\n \
    \       } else if lst[i] < secondMin {\n            secondMin = lst[i]\n     \
    \   }\n    }\n    return secondMin", "    if lst.count < 2 {\n        return nil\n\
    \    }\n    var min = lst[0]\n    var min2 = lst[1]\n    for i in lst {\n    \
    \    if i < min {\n            min2 = min\n            min = i\n        } else\
    \ if i < min2 {\n            min2 = i\n        }\n    }\n    return min2", " \
    \   var smallest = Int.max\n    var secondSmallest = Int.max\n    for num in lst\
    \ {\n        if num < smallest {\n            secondSmallest = smallest\n    \
    \        smallest = num\n        } else if num < secondSmallest {\n          \
    \  secondSmallest = num\n        }\n    }\n    return secondSmallest == Int.max\
    \ ? nil : secondSmallest", "    if lst.count < 2 {\n        return nil\n    }\n\
    \    var min = lst[0]\n    var nextMin = lst[1]\n    for i in 1..<lst.count {\n\
    \        if lst[i] < min {\n            nextMin = min\n            min = lst[i]\n\
    \        } else if lst[i] < nextMin {\n            nextMin = lst[i]\n        }\n\
    \    }\n    return nextMin", "    if lst.count < 2 {\n        return nil\n   \
    \ }\n    var min = lst[0]\n    var secondMin = lst[1]\n    if min > secondMin\
    \ {\n        min = lst[1]\n        secondMin = lst[0]\n    }\n    for i in 2..<lst.count\
    \ {\n        if lst[i] < min {\n            secondMin = min\n            min =\
    \ lst[i]\n        } else if lst[i] < secondMin {\n            secondMin = lst[i]\n\
    \        }\n    }\n    return secondMin", "    var min = Int.max\n    var secondMin\
    \ = Int.max\n    for i in lst {\n        if i < min {\n            secondMin =\
    \ min\n            min = i\n        } else if i < secondMin {\n            secondMin\
    \ = i\n        }\n    }\n    return secondMin == Int.max ? nil : secondMin", " \
    \   guard lst.count > 1 else { return nil }\n    var min = lst[0]\n    var secondMin\
    \ = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n        \
    \    secondMin = min\n            min = lst[i]\n        } else if lst[i] < secondMin\
    \ {\n            secondMin = lst[i]\n        }\n    }\n    return secondMin",
  "    if lst.count < 2 {\n        return nil\n    }\n    var min = lst[0]\n    var\
    \ nextMin = lst[1]\n    for i in 2..<lst.count {\n        if lst[i] < min {\n\
    \            nextMin = min\n            min = lst[i]\n        } else if lst[i]\
    \ < nextMin {\n            nextMin = lst[i]\n        }\n    }\n    return nextMin"]
stop_tokens:
- "\n}"
