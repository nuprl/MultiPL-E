name: HumanEval_26_remove_duplicates
language: swift
prompt: "\n/// From a list of integers, remove all elements that occur more than once.\n\
  /// Keep order of elements left the same as in the input.\n/// >>> remove_duplicates([1,\
  \ 2, 3, 2, 4])\n/// [1, 3, 4]\nfunc remove_duplicates(numbers: [Int]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(remove_duplicates(numbers: [] as [Int])\
  \ == [] as [Int])\nassert(remove_duplicates(numbers: [1, 2, 3, 4]) == [1, 2, 3,\
  \ 4])\nassert(remove_duplicates(numbers: [1, 2, 3, 2, 4, 3, 5]) == [1, 4, 5])"
completions: ["    var result: [Int] = []\n    for number in numbers {\n        if\
    \ !result.contains(number) {\n            result.append(number)\n        }\n \
    \   }\n    return result", "    var result: [Int] = []\n    var seen: [Int: Bool]\
    \ = [:]\n    for number in numbers {\n        if seen[number] == nil {\n     \
    \       result.append(number)\n            seen[number] = true\n        }\n  \
    \  }\n    return result", "    var result = [Int]()\n    var seen = Set<Int>()\n\
    \    for number in numbers {\n        if !seen.contains(number) {\n          \
    \  result.append(number)\n            seen.insert(number)\n        }\n    }\n\
    \    return result", "    var result = [Int]()\n    for number in numbers {\n\
    \        if !result.contains(number) {\n            result.append(number)\n  \
    \      }\n    }\n    return result", "    var result: [Int] = []\n    var set:\
    \ Set<Int> = []\n    for number in numbers {\n        if !set.contains(number)\
    \ {\n            result.append(number)\n            set.insert(number)\n     \
    \   }\n    }\n    return result", "    var result: [Int] = []\n    var seen: [Int:\
    \ Bool] = [:]\n    for number in numbers {\n        if seen[number] == nil {\n\
    \            result.append(number)\n            seen[number] = true\n        }\n\
    \    }\n    return result", "    var uniqueNumbers = [Int]()\n    for number in\
    \ numbers {\n        if !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers", "    var result = [Int]()\n    var\
    \ numbersSet = Set<Int>()\n    for number in numbers {\n        if !numbersSet.contains(number)\
    \ {\n            result.append(number)\n            numbersSet.insert(number)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var set\
    \ = Set<Int>()\n    for number in numbers {\n        if !set.contains(number)\
    \ {\n            result.append(number)\n            set.insert(number)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    var seen = Set<Int>()\n\
    \    for number in numbers {\n        if !seen.contains(number) {\n          \
    \  result.append(number)\n            seen.insert(number)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    var seen: [Int: Bool] =\
    \ [:]\n    for number in numbers {\n        if seen[number] == nil {\n       \
    \     result.append(number)\n            seen[number] = true\n        }\n    }\n\
    \    return result", "    var uniqueNumbers: [Int] = []\n    for number in numbers\
    \ {\n        if !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers", "    var result = [Int]()\n    var\
    \ seen = Set<Int>()\n    for number in numbers {\n        if !seen.contains(number)\
    \ {\n            result.append(number)\n            seen.insert(number)\n    \
    \    }\n    }\n    return result", "    var result: [Int] = []\n    for number\
    \ in numbers {\n        if !result.contains(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    var set:\
    \ Set<Int> = []\n    for number in numbers {\n        if !set.contains(number)\
    \ {\n            result.append(number)\n            set.insert(number)\n     \
    \   }\n    }\n    return result", "    var result = [Int]()\n    for number in\
    \ numbers {\n        if !result.contains(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    var seen:\
    \ [Int: Bool] = [:]\n    for number in numbers {\n        if seen[number] == nil\
    \ {\n            result.append(number)\n            seen[number] = true\n    \
    \    }\n    }\n    return result", "    var result: [Int] = []\n    var seen:\
    \ [Int: Bool] = [:]\n    for number in numbers {\n        if seen[number] == nil\
    \ {\n            result.append(number)\n            seen[number] = true\n    \
    \    }\n    }\n    return result", "    var result: [Int] = []\n    var seen:\
    \ [Int: Bool] = [:]\n    for number in numbers {\n        if seen[number] == nil\
    \ {\n            result.append(number)\n            seen[number] = true\n    \
    \    }\n    }\n    return result", "    var result: [Int] = []\n    var seen:\
    \ [Int: Bool] = [:]\n    for number in numbers {\n        if seen[number] == nil\
    \ {\n            result.append(number)\n            seen[number] = true\n    \
    \    }\n    }\n    return result", "    var result: [Int] = []\n    var set: Set<Int>\
    \ = []\n    for number in numbers {\n        if !set.contains(number) {\n    \
    \        result.append(number)\n            set.insert(number)\n        }\n  \
    \  }\n    return result", "    var unique = [Int]()\n    for number in numbers\
    \ {\n        if !unique.contains(number) {\n            unique.append(number)\n\
    \        }\n    }\n    return unique", "    var result: [Int] = []\n    for number\
    \ in numbers {\n        if !result.contains(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var uniqueNumbers = [Int]()\n    for\
    \ number in numbers {\n        if !uniqueNumbers.contains(number) {\n        \
    \    uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var set: Set<Int> = []\n    for number in numbers\
    \ {\n        if !set.contains(number) {\n            result.append(number)\n \
    \           set.insert(number)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var numbers_set: Set<Int> = []\n    for number\
    \ in numbers {\n        if !numbers_set.contains(number) {\n            result.append(number)\n\
    \            numbers_set.insert(number)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var set = Set<Int>()\n    for number in numbers {\n  \
    \      if !set.contains(number) {\n            result.append(number)\n       \
    \     set.insert(number)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in numbers {\n \
    \       if seen[number] == nil {\n            result.append(number)\n        \
    \    seen[number] = true\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in numbers {\n \
    \       if seen[number] == nil {\n            result.append(number)\n        \
    \    seen[number] = true\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var seen = Set<Int>()\n    for number in numbers {\n        if\
    \ !seen.contains(number) {\n            result.append(number)\n            seen.insert(number)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var seen\
    \ = Set<Int>()\n    for number in numbers {\n        if !seen.contains(number)\
    \ {\n            result.append(number)\n            seen.insert(number)\n    \
    \    }\n    }\n    return result", "    var result: [Int] = []\n    var seen:\
    \ [Int] = []\n    for number in numbers {\n        if !seen.contains(number) {\n\
    \            result.append(number)\n            seen.append(number)\n        }\n\
    \    }\n    return result", "    var result = [Int]()\n    var set = Set<Int>()\n\
    \    for number in numbers {\n        if !set.contains(number) {\n           \
    \ result.append(number)\n            set.insert(number)\n        }\n    }\n  \
    \  return result", "    var uniqueNumbers = [Int]()\n    for number in numbers\
    \ {\n        if !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers", "    var uniqueNumbers = [Int]()\n\
    \    for number in numbers {\n        if !uniqueNumbers.contains(number) {\n \
    \           uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var set: Set<Int> = []\n    for number in numbers {\n\
    \        if !set.contains(number) {\n            result.append(number)\n     \
    \       set.insert(number)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var set = Set<Int>()\n    for number in numbers {\n  \
    \      if !set.contains(number) {\n            result.append(number)\n       \
    \     set.insert(number)\n        }\n    }\n    return result", "    var uniqueNumbers\
    \ = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in numbers\
    \ {\n        if seen[number] == nil {\n            result.append(number)\n   \
    \         seen[number] = true\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var set: Set<Int> = []\n    for number in numbers\
    \ {\n        if !set.contains(number) {\n            result.append(number)\n \
    \           set.insert(number)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var set = Set<Int>()\n    for number in numbers {\n  \
    \      if !set.contains(number) {\n            result.append(number)\n       \
    \     set.insert(number)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var set: Set<Int> = []\n    for number in numbers {\n      \
    \  if !set.contains(number) {\n            result.append(number)\n           \
    \ set.insert(number)\n        }\n    }\n    return result", "    var uniqueNumbers\
    \ = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var set: Set<Int> = []\n    for number in numbers\
    \ {\n        if !set.contains(number) {\n            result.append(number)\n \
    \           set.insert(number)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers {\n \
    \       if !seen.contains(number) {\n            result.append(number)\n     \
    \       seen.insert(number)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in numbers {\n \
    \       if seen[number] == nil {\n            result.append(number)\n        \
    \    seen[number] = true\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var seen = Set<Int>()\n    for number in numbers {\n        if\
    \ !seen.contains(number) {\n            result.append(number)\n            seen.insert(number)\n\
    \        }\n    }\n    return result", "    var uniqueNumbers = [Int]()\n    for\
    \ number in numbers {\n        if !uniqueNumbers.contains(number) {\n        \
    \    uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    var uniqueNumbersSet = Set<Int>()\n    \n\
    \    for number in numbers {\n        if !uniqueNumbersSet.contains(number) {\n\
    \            uniqueNumbers.append(number)\n            uniqueNumbersSet.insert(number)\n\
    \        }\n    }\n    \n    return uniqueNumbers", "    var result: [Int] = []\n\
    \    var seen: [Int: Bool] = [:]\n    for number in numbers {\n        if seen[number]\
    \ == nil {\n            result.append(number)\n            seen[number] = true\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    var seen:\
    \ [Int: Bool] = [:]\n    for number in numbers {\n        if seen[number] == nil\
    \ {\n            result.append(number)\n            seen[number] = true\n    \
    \    }\n    }\n    return result", "    var uniqueNumbers: [Int] = []\n    for\
    \ number in numbers {\n        if !uniqueNumbers.contains(number) {\n        \
    \    uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    var set = Set<Int>()\n    for number in numbers {\n\
    \        if !set.contains(number) {\n            result.append(number)\n     \
    \       set.insert(number)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var set: Set<Int> = []\n    for number in numbers {\n      \
    \  if !set.contains(number) {\n            result.append(number)\n           \
    \ set.insert(number)\n        }\n    }\n    return result", "    var uniqueNumbers\
    \ = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    var set = Set<Int>()\n    for number in numbers {\n\
    \        if !set.contains(number) {\n            result.append(number)\n     \
    \       set.insert(number)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var set: Set<Int> = []\n    for number in numbers {\n      \
    \  if !set.contains(number) {\n            result.append(number)\n           \
    \ set.insert(number)\n        }\n    }\n    return result", "    var unique =\
    \ [Int]()\n    for number in numbers {\n        if !unique.contains(number) {\n\
    \            unique.append(number)\n        }\n    }\n    return unique", "  \
    \  var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    var dict: [Int: Int] = [:]\n    for n in numbers\
    \ {\n        if dict[n] == nil {\n            dict[n] = 1\n            result.append(n)\n\
    \        }\n    }\n    return result", "    var uniqueNumbers = [Int]()\n    for\
    \ number in numbers {\n        if !uniqueNumbers.contains(number) {\n        \
    \    uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  '    return Array(Set(numbers))', "    var uniqueNumbers = [Int]()\n    for number\
    \ in numbers {\n        if !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers", "    var result = [Int]()\n    var\
    \ seen = Set<Int>()\n    for number in numbers {\n        if !seen.contains(number)\
    \ {\n            result.append(number)\n            seen.insert(number)\n    \
    \    }\n    }\n    return result", "    var result: [Int] = []\n    var seen:\
    \ [Int: Bool] = [:]\n    for number in numbers {\n        if seen[number] == nil\
    \ {\n            result.append(number)\n            seen[number] = true\n    \
    \    }\n    }\n    return result", "    var unique = [Int]()\n    for number in\
    \ numbers {\n        if !unique.contains(number) {\n            unique.append(number)\n\
    \        }\n    }\n    return unique", "    var uniqueNumbers = [Int]()\n    for\
    \ number in numbers {\n        if !uniqueNumbers.contains(number) {\n        \
    \    uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ unique_numbers = [Int]()\n    for number in numbers {\n        if !unique_numbers.contains(number)\
    \ {\n            unique_numbers.append(number)\n        }\n    }\n    return unique_numbers",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in numbers\
    \ {\n        if seen[number] == nil {\n            result.append(number)\n   \
    \         seen[number] = true\n        }\n    }\n    return result", "    var\
    \ uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    var set = Set<Int>()\n    for number in numbers {\n\
    \        if !set.contains(number) {\n            result.append(number)\n     \
    \       set.insert(number)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ seen = Set<Int>()\n    var result = [Int]()\n    for number in numbers {\n \
    \       if !seen.contains(number) {\n            seen.insert(number)\n       \
    \     result.append(number)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var set = Set<Int>()\n    for number in numbers {\n        if\
    \ !set.contains(number) {\n            result.append(number)\n            set.insert(number)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var seen\
    \ = Set<Int>()\n    for number in numbers {\n        if !seen.contains(number)\
    \ {\n            result.append(number)\n            seen.insert(number)\n    \
    \    }\n    }\n    return result", "    var uniqueNumbers = [Int]()\n    for number\
    \ in numbers {\n        if !uniqueNumbers.contains(number) {\n            uniqueNumbers.append(number)\n\
    \        }\n    }\n    return uniqueNumbers", "    var result = [Int]()\n    var\
    \ set = Set<Int>()\n    for number in numbers {\n        if !set.contains(number)\
    \ {\n            result.append(number)\n            set.insert(number)\n     \
    \   }\n    }\n    return result", "    var result: [Int] = []\n    for number\
    \ in numbers {\n        if !result.contains(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var uniqueNumbers = [Int]()\n    for\
    \ number in numbers {\n        if !uniqueNumbers.contains(number) {\n        \
    \    uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ seen = Set<Int>()\n    var result = [Int]()\n    for number in numbers {\n \
    \       if !seen.contains(number) {\n            seen.insert(number)\n       \
    \     result.append(number)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in numbers {\n \
    \       if seen[number] == nil {\n            result.append(number)\n        \
    \    seen[number] = true\n        }\n    }\n    return result", "    var uniqueNumbers\
    \ = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    var set: Set<Int> = []\n    for number in numbers\
    \ {\n        if !set.contains(number) {\n            result.append(number)\n \
    \           set.insert(number)\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in numbers\
    \ {\n        if seen[number] == nil {\n            result.append(number)\n   \
    \         seen[number] = true\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var set: Set<Int> = []\n    for number in numbers {\n\
    \        if !set.contains(number) {\n            result.append(number)\n     \
    \       set.insert(number)\n        }\n    }\n    return result", "    var uniqueNumbers\
    \ = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  '    return []', "    var result: [Int] = []\n    for number in numbers {\n    \
    \    if !result.contains(number) {\n            result.append(number)\n      \
    \  }\n    }\n    return result", "    var result = [Int]()\n    var seen = Set<Int>()\n\
    \    for number in numbers {\n        if !seen.contains(number) {\n          \
    \  result.append(number)\n            seen.insert(number)\n        }\n    }\n\
    \    return result", "    var result: [Int] = []\n    var seen: [Int: Bool] =\
    \ [:]\n    for number in numbers {\n        if seen[number] == nil {\n       \
    \     result.append(number)\n            seen[number] = true\n        }\n    }\n\
    \    return result", "    var new_numbers = [Int]()\n    for number in numbers\
    \ {\n        if !new_numbers.contains(number) {\n            new_numbers.append(number)\n\
    \        }\n    }\n    return new_numbers", "    var result = [Int]()\n    for\
    \ number in numbers {\n        if !result.contains(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var uniqueNumbers = [Int]()\n    for\
    \ number in numbers {\n        if !uniqueNumbers.contains(number) {\n        \
    \    uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  '    return []', "    var result = [Int]()\n    var seen = Set<Int>()\n    for number\
    \ in numbers {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in numbers\
    \ {\n        if seen[number] == nil {\n            result.append(number)\n   \
    \         seen[number] = true\n        }\n    }\n    return result", "    var\
    \ uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in numbers\
    \ {\n        if seen[number] == nil {\n            result.append(number)\n   \
    \         seen[number] = true\n        }\n    }\n    return result", "    var\
    \ result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers {\n \
    \       if !seen.contains(number) {\n            result.append(number)\n     \
    \       seen.insert(number)\n        }\n    }\n    return result", "    var seen:\
    \ [Int: Bool] = [:]\n    var result: [Int] = []\n    for number in numbers {\n\
    \        if seen[number] == nil {\n            seen[number] = true\n         \
    \   result.append(number)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var seen = Set<Int>()\n    for number in numbers {\n        if\
    \ !seen.contains(number) {\n            result.append(number)\n            seen.insert(number)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    var set\
    \ = Set<Int>()\n    for number in numbers {\n        if !set.contains(number)\
    \ {\n            result.append(number)\n            set.insert(number)\n     \
    \   }\n    }\n    return result", "    var unique = [Int]()\n    for number in\
    \ numbers {\n        if !unique.contains(number) {\n            unique.append(number)\n\
    \        }\n    }\n    return unique", "    var result = [Int]()\n    for number\
    \ in numbers {\n        if !result.contains(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var seen: [Int: Bool] = [:]\n    return\
    \ numbers.filter { seen.updateValue(true, forKey: $0) == nil }", "    var uniqueNumbers\
    \ = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var set = Set<Int>()\n    var result = [Int]()\n    for number in numbers {\n\
    \        if !set.contains(number) {\n            set.insert(number)\n        \
    \    result.append(number)\n        }\n    }\n    return result", "    var result:\
    \ [Int] = []\n    var set: Set<Int> = []\n    for number in numbers {\n      \
    \  if !set.contains(number) {\n            result.append(number)\n           \
    \ set.insert(number)\n        }\n    }\n    return result", "    var uniqueNumbers\
    \ = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result = [Int]()\n    var seen = Set<Int>()\n    for number in numbers\
    \ {\n        if !seen.contains(number) {\n            result.append(number)\n\
    \            seen.insert(number)\n        }\n    }\n    return result", "    var\
    \ uniqueNumbers = [Int]()\n    for number in numbers {\n        if !uniqueNumbers.contains(number)\
    \ {\n            uniqueNumbers.append(number)\n        }\n    }\n    return uniqueNumbers",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in numbers\
    \ {\n        if seen[number] == nil {\n            result.append(number)\n   \
    \         seen[number] = true\n        }\n    }\n    return result", "    var\
    \ result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result: [Int] = []\n    var seen: [Int: Bool] = [:]\n    for number in\
    \ numbers {\n        if seen[number] == nil {\n            result.append(number)\n\
    \            seen[number] = true\n        }\n    }\n    return result", "    var\
    \ unique = [Int]()\n    for number in numbers {\n        if !unique.contains(number)\
    \ {\n            unique.append(number)\n        }\n    }\n    return unique",
  "    var result: [Int] = []\n    for number in numbers {\n        if !result.contains(number)\
    \ {\n            result.append(number)\n        }\n    }\n    return result",
  "    var result = [Int]()\n    var set = Set<Int>()\n    for number in numbers {\n\
    \        if !set.contains(number) {\n            result.append(number)\n     \
    \       set.insert(number)\n        }\n    }\n    return result", "    var result\
    \ = [Int]()\n    var set = Set<Int>()\n    for number in numbers {\n        if\
    \ !set.contains(number) {\n            result.append(number)\n            set.insert(number)\n\
    \        }\n    }\n    return result", "    var result: [Int] = []\n    for number\
    \ in numbers {\n        if !result.contains(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for number\
    \ in numbers {\n        if !result.contains(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result", "    var result = [Int]()\n    for number\
    \ in numbers {\n        if !result.contains(number) {\n            result.append(number)\n\
    \        }\n    }\n    return result"]
stop_tokens:
- "\n}"
