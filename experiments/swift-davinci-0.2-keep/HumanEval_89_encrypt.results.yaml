language: swift
name: HumanEval_89_encrypt
results:
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let unicode = c.unicodeScalars.first!.value\n\
    \        let unicode2 = unicode + 2 * 2\n        let scalar = UnicodeScalar(unicode2)\n\
    \        result.append(Character(scalar))\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpduv23718.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpduv23718.swift:17:33:\
    \ error: value of optional type 'Unicode.Scalar?' must be unwrapped to a value\
    \ of type 'Unicode.Scalar'\n        result.append(Character(scalar))\n       \
    \                         ^\n/tmp/tmpduv23718.swift:16:13: note: short-circuit\
    \ using 'guard' to exit this function early if the optional value contains 'nil'\n\
    \        let scalar = UnicodeScalar(unicode2)\n            ^\n        guard  \
    \                              else { return <#default value#> }\n/tmp/tmpduv23718.swift:16:22:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let scalar = UnicodeScalar(unicode2)\n                     ^\n\
    \                                             ?? <#default value#>\n/tmp/tmpduv23718.swift:16:22:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let scalar = UnicodeScalar(unicode2)\n                     ^\n\
    \                                            !\n/tmp/tmpduv23718.swift:17:33:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result.append(Character(scalar))\n                          \
    \      ^\n                                       ?? <#default value#>\n/tmp/tmpduv23718.swift:17:33:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.append(Character(scalar))\n                          \
    \      ^\n                                      !\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    // your\
    \ code here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmphzeo9wz3/tmphzeo9wz3.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3f9ca13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3f9c70ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3f9c70a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3f9c7097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphzeo9wz3                        0x000055be5fc70307 <unavailable> + 4871

    5    libc.so.6                          0x00002b3f9cbff460 __libc_start_main +
    245

    6    tmphzeo9wz3                        0x000055be5fc6ff49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + 2 * 2) % 26\n        result.append(alphabet[newIndex])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp11oh4biu.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp11oh4biu.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmp11oh4biu.swift:16:23: error: cannot find\
    \ 'alphabet' in scope\n        result.append(alphabet[newIndex])\n           \
    \           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let charIndex = alphabet.indexOf(String(char))\n\
    \        let encryptedIndex = (charIndex! + (2 * 2)) % 26\n        encryptedString.append(alphabet[encryptedIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpnsq51_h9.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnsq51_h9.swift:14:25:\
    \ error: cannot find 'alphabet' in scope\n        let charIndex = alphabet.indexOf(String(char))\n\
    \                        ^~~~~~~~\n/tmp/tmpnsq51_h9.swift:16:32: error: cannot\
    \ find 'alphabet' in scope\n        encryptedString.append(alphabet[encryptedIndex])\n\
    \                               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let asciiValue = Int(String(char).unicodeScalars.first!.value)\n\
    \        let newAsciiValue = asciiValue + 2 * 2\n        let newChar = Character(UnicodeScalar(newAsciiValue)!)\n\
    \        encryptedString.append(newChar)\n    }\n    return encryptedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmppuhazan1.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    // Write\
    \ your code here\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp90zf6v95/tmp90zf6v95.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b984896cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9848663b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9848663988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98486627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp90zf6v95                        0x0000557894dda307 <unavailable> + 4871

    5    libc.so.6                          0x00002b9848b58460 __libc_start_main +
    245

    6    tmp90zf6v95                        0x0000557894dd9f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for letter in s {\n        let unicode = letter.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedLetter\
    \ = Character(UnicodeScalar(encryptedUnicode)!)\n        encryptedString.append(encryptedLetter)\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp28x0k65o/tmp28x0k65o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584a1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95847157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28x0k65o                        0x0000564ea001bb7e <unavailable> + 7038

    5    libc.so.6                          0x00002b9584c0b460 __libc_start_main +
    245

    6    tmp28x0k65o                        0x0000564ea001b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedChar =\
    \ Character(UnicodeScalar(encryptedUnicode))\n        encryptedString.append(encryptedChar)\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpmi662lhf.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmi662lhf.swift:16:39:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \        let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n    \
    \                                  ^\n/tmp/tmpmi662lhf.swift:16:39: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n       \
    \                               ^\n                                          \
    \                            ?? <#default value#>\n/tmp/tmpmi662lhf.swift:16:39:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n\
    \                                      ^\n                                   \
    \                                  !\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let unicode = c.unicodeScalars.first!.value\n\
    \        let newUnicode = unicode + 2 * 2\n        let newChar = Character(UnicodeScalar(newUnicode))\n\
    \        result.append(newChar)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmparcfk7x4.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmparcfk7x4.swift:16:33:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \        let newChar = Character(UnicodeScalar(newUnicode))\n                \
    \                ^\n/tmp/tmparcfk7x4.swift:16:33: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        let newChar\
    \ = Character(UnicodeScalar(newUnicode))\n                                ^\n\
    \                                                          ?? <#default value#>\n\
    /tmp/tmparcfk7x4.swift:16:33: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        let newChar = Character(UnicodeScalar(newUnicode))\n\
    \                                ^\n                                         \
    \                !\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedChar =\
    \ Character(UnicodeScalar(encryptedUnicode))\n        encryptedString.append(encryptedChar)\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpmi662lhf.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmi662lhf.swift:16:39:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \        let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n    \
    \                                  ^\n/tmp/tmpmi662lhf.swift:16:39: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n       \
    \                               ^\n                                          \
    \                            ?? <#default value#>\n/tmp/tmpmi662lhf.swift:16:39:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n\
    \                                      ^\n                                   \
    \                                  !\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + 2 * 2) % 26\n        encrypted += String(alphabet[newIndex])\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpmqqpf5s0.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmqqpf5s0.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpmqqpf5s0.swift:16:29: error: cannot find\
    \ 'alphabet' in scope\n        encrypted += String(alphabet[newIndex])\n     \
    \                       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + (2 * 2)) % alphabet.count\n        encrypted\
    \ += alphabet[newIndex]\n    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpopvb19zw.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpopvb19zw.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpopvb19zw.swift:15:44: error: cannot find\
    \ 'alphabet' in scope\n        let newIndex = (index + (2 * 2)) % alphabet.count\n\
    \                                           ^~~~~~~~\n/tmp/tmpopvb19zw.swift:16:22:\
    \ error: cannot find 'alphabet' in scope\n        encrypted += alphabet[newIndex]\n\
    \                     ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let index = alphabet.indexOf(String(char))\n\
    \        encryptedString += alphabet[(index! + 2) % 26]\n    }\n    return encryptedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpj36yj1rh.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpj36yj1rh.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(char))\n\
    \                    ^~~~~~~~\n/tmp/tmpj36yj1rh.swift:15:28: error: cannot find\
    \ 'alphabet' in scope\n        encryptedString += alphabet[(index! + 2) % 26]\n\
    \                           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for letter in s {\n        let unicode = letter.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedLetter\
    \ = Character(UnicodeScalar(encryptedUnicode)!)\n        encryptedString.append(encryptedLetter)\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp28x0k65o/tmp28x0k65o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584a1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95847157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28x0k65o                        0x0000564ea001bb7e <unavailable> + 7038

    5    libc.so.6                          0x00002b9584c0b460 __libc_start_main +
    245

    6    tmp28x0k65o                        0x0000564ea001b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let index = alphabet.indexOf(String(char))\n\
    \        let newIndex = index! + (2 * 2)\n        encryptedString += alphabet[newIndex]\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpxjrg_cc0.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpxjrg_cc0.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(char))\n\
    \                    ^~~~~~~~\n/tmp/tmpxjrg_cc0.swift:16:28: error: cannot find\
    \ 'alphabet' in scope\n        encryptedString += alphabet[newIndex]\n       \
    \                    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + (2 * 2)) % 26\n        encrypted += String(alphabet[newIndex])\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpng50jgwk.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpng50jgwk.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpng50jgwk.swift:16:29: error: cannot find\
    \ 'alphabet' in scope\n        encrypted += String(alphabet[newIndex])\n     \
    \                       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for letter in\
    \ s {\n        if let index = alphabet.firstIndex(of: letter) {\n            let\
    \ newIndex = index + 2 * 2\n            if newIndex > alphabet.count - 1 {\n \
    \               let newIndex = newIndex - alphabet.count\n                encrypted.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n            } else {\n                encrypted.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n            }\n        }\n    }\n    return encrypted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp6zfvtdt6.swift:16:28: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let newIndex = index + 2 * 2\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let newUnicode = unicode + (2 * 2)\n        let newChar = Character(UnicodeScalar(newUnicode)!)\n\
    \        result.append(newChar)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmptx334uoz/tmptx334uoz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48fd823c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48fd51ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48fd51a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48fd5197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptx334uoz                        0x000056254c152b7e <unavailable> + 7038

    5    libc.so.6                          0x00002b48fda0f460 __libc_start_main +
    245

    6    tmptx334uoz                        0x000056254c152379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        result += String(char.unicodeScalars.first!.value\
    \ + 2 * 2)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpdlt37wl5/tmpdlt37wl5.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1515943c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b151563ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b151563a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b15156397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdlt37wl5                        0x000055c69e317787 <unavailable> + 6023

    5    libc.so.6                          0x00002b1515b2f460 __libc_start_main +
    245

    6    tmpdlt37wl5                        0x000055c69e3173c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let index = alphabet.indexOf(String(char))\n\
    \        let newIndex = (index! + 2) * 2\n        encryptedString += alphabet[newIndex]\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpm_yhz0yw.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpm_yhz0yw.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(char))\n\
    \                    ^~~~~~~~\n/tmp/tmpm_yhz0yw.swift:16:28: error: cannot find\
    \ 'alphabet' in scope\n        encryptedString += alphabet[newIndex]\n       \
    \                    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 0
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let lowercaseS = s.lowercased()\n    var\
    \ encryptedString = \"\"\n    for char in lowercaseS {\n        if let index =\
    \ alphabet.index(of: char) {\n            let newIndex = (index.encodedOffset\
    \ + 4) % alphabet.count\n            let newChar = alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)]\n            encryptedString.append(newChar)\n        }\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let charIndex = alphabet.indexOf(char)\n\
    \        let newIndex = (charIndex! + 2) * 2\n        encryptedString.append(alphabet[newIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp7bvb2mow.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp7bvb2mow.swift:14:25:\
    \ error: cannot find 'alphabet' in scope\n        let charIndex = alphabet.indexOf(char)\n\
    \                        ^~~~~~~~\n/tmp/tmp7bvb2mow.swift:16:32: error: cannot\
    \ find 'alphabet' in scope\n        encryptedString.append(alphabet[newIndex])\n\
    \                               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let unicode2 = unicode + 2 * 2\n        let scalar = UnicodeScalar(unicode2)\n\
    \        result.append(Character(scalar!))\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmp8fp2ekeo/tmp8fp2ekeo.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9a2cda4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9a2ca9bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9a2ca9b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9a2ca9a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8fp2ekeo                        0x000055d2b092bb7e <unavailable> + 7038

    5    libc.so.6                          0x00002b9a2cf90460 __libc_start_main +
    245

    6    tmp8fp2ekeo                        0x000055d2b092b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let newAlphabet = \"cdefghijklmnopqrstuvwxyzab\"\
    \n    var encryptedString = \"\"\n    for letter in s {\n        if let index\
    \ = alphabet.index(of: letter) {\n            encryptedString.append(newAlphabet[index])\n\
    \        }\n    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\")\
    \ == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmpzfhochjw/tmpzfhochjw.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b536884ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5368541b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5368541988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53685407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzfhochjw                        0x000055e2fcbda587 <unavailable> + 5511

    5    libc.so.6                          0x00002b5368a36460 __libc_start_main +
    245

    6    tmpzfhochjw                        0x000055e2fcbda1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        if let index = alphabet.firstIndex(of: char) {\n           \
    \ let newIndex = index.advanced(by: 2 * 2)\n            let newChar = alphabet[newIndex]\n\
    \            encryptedString.append(newChar)\n        }\n    }\n    return encryptedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp3r8d379a.swift:16:34: error: value of type 'String.Index' has no\
    \ member 'advanced'\n            let newIndex = index.advanced(by: 2 * 2)\n  \
    \                         ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + 2 * 2) % alphabet.count\n        result += alphabet[newIndex]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmphba58wxv.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphba58wxv.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmphba58wxv.swift:15:42: error: cannot find\
    \ 'alphabet' in scope\n        let newIndex = (index + 2 * 2) % alphabet.count\n\
    \                                         ^~~~~~~~\n/tmp/tmphba58wxv.swift:16:19:\
    \ error: cannot find 'alphabet' in scope\n        result += alphabet[newIndex]\n\
    \                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedChar =\
    \ Character(UnicodeScalar(encryptedUnicode))\n        encryptedString.append(encryptedChar)\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpmi662lhf.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmi662lhf.swift:16:39:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \        let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n    \
    \                                  ^\n/tmp/tmpmi662lhf.swift:16:39: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n       \
    \                               ^\n                                          \
    \                            ?? <#default value#>\n/tmp/tmpmi662lhf.swift:16:39:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n\
    \                                      ^\n                                   \
    \                                  !\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        if let index = alphabet.firstIndex(of: char) {\n           \
    \ let newIndex = index + 2 * 2\n            if newIndex > alphabet.count - 1 {\n\
    \                let newIndex = newIndex - alphabet.count\n                encryptedString.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n            } else {\n                encryptedString.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n            }\n        }\n    }\n    return encryptedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp2l_aez3a.swift:16:28: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let newIndex = index + 2 * 2\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let ascii = char.asciiValue!\n        let\
    \ newAscii = ascii + 2 * 2\n        let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \        result.append(newChar)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpn_yluah2.swift:16:56: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n        let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                ~~~~~~~~~~~~~~~~~~~~~~~^\n                  \
    \                                     \n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let charIndex = alphabet.indexOf(String(char))\n\
    \        let encryptedCharIndex = (charIndex! + 2) * 2\n        encryptedString\
    \ += String(alphabet[encryptedCharIndex])\n    }\n    return encryptedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpedzx3zm7.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpedzx3zm7.swift:14:25:\
    \ error: cannot find 'alphabet' in scope\n        let charIndex = alphabet.indexOf(String(char))\n\
    \                        ^~~~~~~~\n/tmp/tmpedzx3zm7.swift:16:35: error: cannot\
    \ find 'alphabet' in scope\n        encryptedString += String(alphabet[encryptedCharIndex])\n\
    \                                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for c in s {\n\
    \        if let index = alphabet.index(of: c) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encrypted.append(alphabet[newIndex])\n        }\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpi1d81_9x/tmpi1d81_9x.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b32e35dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b32e32d5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b32e32d5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b32e32d47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpi1d81_9x                        0x0000564f807eb5e7 <unavailable> + 5607

    5    libc.so.6                          0x00002b32e37ca460 __libc_start_main +
    245

    6    tmpi1d81_9x                        0x0000564f807eb229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let ascii = char.asciiValue!\n        let\
    \ newAscii = ascii + (2 * 2)\n        let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \        result += String(newChar)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp_fkkjtmh.swift:16:56: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n        let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                ~~~~~~~~~~~~~~~~~~~~~~~^\n                  \
    \                                     \n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let index = alphabet.index(of: char)\n\
    \        let newIndex = (index! + (2 * 2)) % 26\n        result += String(alphabet[newIndex])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpv3gfis0p.swift:14:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: char)\n                    ^~~~~~~~\n\
    /tmp/tmpv3gfis0p.swift:16:26: error: cannot find 'alphabet' in scope\n       \
    \ result += String(alphabet[newIndex])\n                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for letter in s {\n        let unicode = letter.unicodeScalars.first!.value\n\
    \        let unicodeEncrypted = unicode + (2 * 2)\n        let encryptedLetter\
    \ = String(UnicodeScalar(UInt8(unicodeEncrypted)))\n        encryptedString +=\
    \ encryptedLetter\n    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmpolniokzv/tmpolniokzv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b360a418c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b360a10fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b360a10f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b360a10e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpolniokzv                        0x0000557c98ba5d4e <unavailable> + 7502

    5    libc.so.6                          0x00002b360a604460 __libc_start_main +
    245

    6    tmpolniokzv                        0x0000557c98ba5549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        result += String(Character(UnicodeScalar(UInt8(char.asciiValue!)\
    \ + 2 * 2))))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpoz6aryfg.swift:14:84: error: consecutive statements on a line must\
    \ be separated by ';'\n        result += String(Character(UnicodeScalar(UInt8(char.asciiValue!)\
    \ + 2 * 2))))\n                                                              \
    \                     ^\n                                                    \
    \                               ;\n/tmp/tmpoz6aryfg.swift:14:84: error: expected\
    \ expression\n        result += String(Character(UnicodeScalar(UInt8(char.asciiValue!)\
    \ + 2 * 2))))\n                                                              \
    \                     ^\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        let index = alphabet.index(of: char)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp3po1jkrn/tmp3po1jkrn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac966598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96628fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96628f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96628e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3po1jkrn                        0x00005627f8106687 <unavailable> + 5767

    5    libc.so.6                          0x00002ac966784460 __libc_start_main +
    245

    6    tmp3po1jkrn                        0x00005627f81062c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + (2 * 2)) % 26\n        encrypted += String(alphabet[newIndex])\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpng50jgwk.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpng50jgwk.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpng50jgwk.swift:16:29: error: cannot find\
    \ 'alphabet' in scope\n        encrypted += String(alphabet[newIndex])\n     \
    \                       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var result = \"\"\n    for char in s {\n\
    \        if let index = alphabet.index(of: char) {\n            let newIndex =\
    \ alphabet.index(index, offsetBy: 2 * 2)\n            result.append(alphabet[newIndex])\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba73d646c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba73d33d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba73d33d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba73d33d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba73d33cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba73d470ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002ba73d429660 String.subscript.getter
    + 34

    7    tmpzcn6awps                        0x0000563bc6758fdf <unavailable> + 8159

    8    tmpzcn6awps                        0x0000563bc675893d <unavailable> + 6461

    9    libc.so.6                          0x00002ba73d832460 __libc_start_main +
    245

    10   tmpzcn6awps                        0x0000563bc6758229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let newUnicode = unicode + (2 * 2)\n        let newChar = Character(UnicodeScalar(newUnicode)!)\n\
    \        result.append(newChar)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmptx334uoz/tmptx334uoz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48fd823c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48fd51ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48fd51a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48fd5197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptx334uoz                        0x000056254c152b7e <unavailable> + 7038

    5    libc.so.6                          0x00002b48fda0f460 __libc_start_main +
    245

    6    tmptx334uoz                        0x000056254c152379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var newString\
    \ = \"\"\n    for i in s.characters {\n        let index = alphabet.index(of:\
    \ i)\n        let newIndex = (index! + 2) * 2\n        newString.append(alphabet[newIndex])\n\
    \    }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpwgvztmbo.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpwgvztmbo.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.index(of:\
    \ i)\n                    ^~~~~~~~\n/tmp/tmpwgvztmbo.swift:16:26: error: cannot\
    \ find 'alphabet' in scope\n        newString.append(alphabet[newIndex])\n   \
    \                      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        result += String(c.unicodeScalars.first!.value\
    \ + 2 * 2)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpqkteinjm.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let index = alphabet.indexOf(String(char))\n\
    \        let newIndex = (index! + (2 * 2)) % alphabet.count\n        encryptedString\
    \ += alphabet[newIndex]\n    }\n    return encryptedString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp9m0ygdcb.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9m0ygdcb.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(char))\n\
    \                    ^~~~~~~~\n/tmp/tmp9m0ygdcb.swift:15:45: error: cannot find\
    \ 'alphabet' in scope\n        let newIndex = (index! + (2 * 2)) % alphabet.count\n\
    \                                            ^~~~~~~~\n/tmp/tmp9m0ygdcb.swift:16:28:\
    \ error: cannot find 'alphabet' in scope\n        encryptedString += alphabet[newIndex]\n\
    \                           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let ascii = char.asciiValue!\n        let\
    \ newAscii = ascii + 2 * 2\n        let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \        result.append(newChar)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpn_yluah2.swift:16:56: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n        let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                ~~~~~~~~~~~~~~~~~~~~~~~^\n                  \
    \                                     \n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    // TODO:\
    \ Implement this function\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\")\
    \ == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmpw_o0h9rl/tmpw_o0h9rl.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b975049ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9750191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9750191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97501907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_o0h9rl                        0x000055e2f444d307 <unavailable> + 4871

    5    libc.so.6                          0x00002b9750686460 __libc_start_main +
    245

    6    tmpw_o0h9rl                        0x000055e2f444cf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let shifted = unicode + (2 * 2)\n        let shiftedChar = UnicodeScalar(UInt8(shifted))\n\
    \        result.append(Character(shiftedChar!))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmppjdepb57.swift:17:44: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n        result.append(Character(shiftedChar!))\n\
    \                                ~~~~~~~~~~~^\n                              \
    \             \n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encrypted = unicode + (2 * 2)\n        let encryptedChar = Character(UnicodeScalar(encrypted)!)\n\
    \        result.append(encryptedChar)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmpmt7wftey/tmpmt7wftey.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b61afcddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b61af9d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b61af9d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b61af9d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmt7wftey                        0x0000564d23cdcb7e <unavailable> + 7038

    5    libc.so.6                          0x00002b61afec9460 __libc_start_main +
    245

    6    tmpmt7wftey                        0x0000564d23cdc379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedCharacter\
    \ = Character(UnicodeScalar(encryptedUnicode)!)\n        encrypted.append(encryptedCharacter)\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpyio4wxcm/tmpyio4wxcm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d200dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d1fdd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d1fdd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d1fdd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyio4wxcm                        0x000055fc0f4c7b7e <unavailable> + 7038

    5    libc.so.6                          0x00002b4d202ca460 __libc_start_main +
    245

    6    tmpyio4wxcm                        0x000055fc0f4c7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))\n\
    \        let newIndex = (index! + 2) % 26\n        encryptedString.append(alphabet[newIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpqgz0fnmy.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpqgz0fnmy.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))\n\
    \                    ^~~~~~~~\n/tmp/tmpqgz0fnmy.swift:16:32: error: cannot find\
    \ 'alphabet' in scope\n        encryptedString.append(alphabet[newIndex])\n  \
    \                             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        if let index = alphabet.index(of: char) {\n            let newIndex\
    \ = index.encodedOffset + 2 * 2\n            let newChar = alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)]\n            encryptedString.append(newChar)\n        }\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a32924c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a3261b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8a3261b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8a3261b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8a3261abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b8a3274eec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b8a32707660 String.subscript.getter
    + 34

    7    tmpupdzjx_h                        0x000055f0445930ef <unavailable> + 8431

    8    tmpupdzjx_h                        0x000055f0445929fd <unavailable> + 6653

    9    libc.so.6                          0x00002b8a32b10460 __libc_start_main +
    245

    10   tmpupdzjx_h                        0x000055f0445922e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + (2 * 2)) % 26\n        result += String(alphabet[newIndex])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpcw52txzm.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpcw52txzm.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpcw52txzm.swift:16:26: error: cannot find\
    \ 'alphabet' in scope\n        result += String(alphabet[newIndex])\n        \
    \                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let charIndex = alphabet.indexOf(char)\n\
    \        let encryptedIndex = (charIndex! + (2 * 2)) % 26\n        encryptedString.append(alphabet[encryptedIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp9we9p68y.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9we9p68y.swift:14:25:\
    \ error: cannot find 'alphabet' in scope\n        let charIndex = alphabet.indexOf(char)\n\
    \                        ^~~~~~~~\n/tmp/tmp9we9p68y.swift:16:32: error: cannot\
    \ find 'alphabet' in scope\n        encryptedString.append(alphabet[encryptedIndex])\n\
    \                               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        var ascii = char.asciiValue!\n\
    \        ascii += (ascii >= 97 && ascii <= 122) ? 2 : 0\n        encryptedString.append(Character(UnicodeScalar(ascii)))\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpeu7tu4vr.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + 2 * 2) % alphabet.count\n        result += alphabet[newIndex]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmphba58wxv.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmphba58wxv.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmphba58wxv.swift:15:42: error: cannot find\
    \ 'alphabet' in scope\n        let newIndex = (index + 2 * 2) % alphabet.count\n\
    \                                         ^~~~~~~~\n/tmp/tmphba58wxv.swift:16:19:\
    \ error: cannot find 'alphabet' in scope\n        result += alphabet[newIndex]\n\
    \                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var newString\
    \ = \"\"\n    for char in s.characters {\n        let newChar = char.unicodeScalarCodePoint()\
    \ + (2 * 2)\n        newString.append(Character(UnicodeScalar(newChar)))\n   \
    \ }\n    return newString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpjg9yirmk.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjg9yirmk.swift:14:28:\
    \ error: value of type 'Character' has no member 'unicodeScalarCodePoint'\n  \
    \      let newChar = char.unicodeScalarCodePoint() + (2 * 2)\n               \
    \       ~~~~ ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        result += String(alphabet[(index + 2) % alphabet.count])\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\"\
    ) == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp1y1v5mhb.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1y1v5mhb.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmp1y1v5mhb.swift:15:26: error: cannot find\
    \ 'alphabet' in scope\n        result += String(alphabet[(index + 2) % alphabet.count])\n\
    \                         ^~~~~~~~\n/tmp/tmp1y1v5mhb.swift:15:49: error: cannot\
    \ find 'alphabet' in scope\n        result += String(alphabet[(index + 2) % alphabet.count])\n\
    \                                                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 0
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for c in s {\n\
    \        if let index = alphabet.firstIndex(of: c) {\n            let newIndex\
    \ = (index.encodedOffset + 4) % alphabet.count\n            encrypted.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n        }\n    }\n    return encrypted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let index = alphabet.indexOf(String(char))\n\
    \        let newIndex = (index! + (2 * 2)) % 26\n        encryptedString.append(alphabet[newIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmps3w77yi1.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmps3w77yi1.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(char))\n\
    \                    ^~~~~~~~\n/tmp/tmps3w77yi1.swift:16:32: error: cannot find\
    \ 'alphabet' in scope\n        encryptedString.append(alphabet[newIndex])\n  \
    \                             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        result += String(Character(UnicodeScalar(UInt8(c.value)\
    \ + 2 * 2)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpz5_4vscm.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpz5_4vscm.swift:14:58:\
    \ error: value of type 'Character' has no member 'value'\n        result += String(Character(UnicodeScalar(UInt8(c.value)\
    \ + 2 * 2)))\n                                                       ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824799
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let charIndex = alphabet.indexOf(String(char))\n\
    \        let encryptedIndex = (charIndex! + 2) * 2\n        encryptedString.append(alphabet[encryptedIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp4rb33avi.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4rb33avi.swift:14:25:\
    \ error: cannot find 'alphabet' in scope\n        let charIndex = alphabet.indexOf(String(char))\n\
    \                        ^~~~~~~~\n/tmp/tmp4rb33avi.swift:16:32: error: cannot\
    \ find 'alphabet' in scope\n        encryptedString.append(alphabet[encryptedIndex])\n\
    \                               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    // TODO:\
    \ Implement this function\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\")\
    \ == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmpw_o0h9rl/tmpw_o0h9rl.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b975049ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9750191b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9750191988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b97501907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_o0h9rl                        0x000055e2f444d307 <unavailable> + 4871

    5    libc.so.6                          0x00002b9750686460 __libc_start_main +
    245

    6    tmpw_o0h9rl                        0x000055e2f444cf49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        let index = alphabet.index(of: char)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp3po1jkrn/tmp3po1jkrn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac966598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96628fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96628f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96628e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3po1jkrn                        0x00005627f8106687 <unavailable> + 5767

    5    libc.so.6                          0x00002ac966784460 __libc_start_main +
    245

    6    tmp3po1jkrn                        0x00005627f81062c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        encryptedString += String(char).unicodeScalars.map\
    \ {\n            if $0.value >= 97 && $0.value <= 122 {\n                return\
    \ UnicodeScalar(($0.value + 2) % 122) ?? $0\n            } else if $0.value >=\
    \ 65 && $0.value <= 90 {\n                return UnicodeScalar(($0.value + 2)\
    \ % 90) ?? $0\n            } else {\n                return $0\n            }\n\
    \        }.map { Character($0) }.reduce(\"\", +)\n    }\n    return encryptedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpstajic2z.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpstajic2z.swift:14:9:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n        encryptedString\
    \ += String(char).unicodeScalars.map {\n        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824829
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for letter in s {\n        let letterIndex = letter.asciiValue!\
    \ - 97\n        let encryptedIndex = (letterIndex + 2 * 2) % 26\n        let encryptedLetter\
    \ = Character(UnicodeScalar(encryptedIndex + 97)!)\n        encryptedString.append(encryptedLetter)\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpb9ansk7f.swift:16:75: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n        let encryptedLetter = Character(UnicodeScalar(encryptedIndex\
    \ + 97)!)\n                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                          \n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        if let index = alphabet.firstIndex(of: char) {\n           \
    \ encryptedString.append(alphabet[alphabet.index(index, offsetBy: 2)])\n     \
    \   }\n    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpu2mfdxag/tmpu2mfdxag.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b535baccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b535b7c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b535b7c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b535b7c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu2mfdxag                        0x00005651d3da25f7 <unavailable> + 5623

    5    libc.so.6                          0x00002b535bcb8460 __libc_start_main +
    245

    6    tmpu2mfdxag                        0x00005651d3da2239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let charIndex = alphabet.indexOf(char)\n\
    \        let encryptedIndex = (charIndex! + (2 * 2)) % alphabet.count\n      \
    \  encryptedString.append(alphabet[encryptedIndex])\n    }\n    return encryptedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmps1aden7l.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmps1aden7l.swift:14:25:\
    \ error: cannot find 'alphabet' in scope\n        let charIndex = alphabet.indexOf(char)\n\
    \                        ^~~~~~~~\n/tmp/tmps1aden7l.swift:15:55: error: cannot\
    \ find 'alphabet' in scope\n        let encryptedIndex = (charIndex! + (2 * 2))\
    \ % alphabet.count\n                                                      ^~~~~~~~\n\
    /tmp/tmps1aden7l.swift:16:32: error: cannot find 'alphabet' in scope\n       \
    \ encryptedString.append(alphabet[encryptedIndex])\n                         \
    \      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        let index = alphabet.index(of: char)\n        let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n        encryptedString.append(alphabet[newIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpatzs3w2t/tmpatzs3w2t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae52c3d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae52c0c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae52c0c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae52c0c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpatzs3w2t                        0x0000563572167687 <unavailable> + 5767

    5    libc.so.6                          0x00002ae52c5bc460 __libc_start_main +
    245

    6    tmpatzs3w2t                        0x00005635721672c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        let index = alphabet.index(of: char)\n        let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n        encryptedString.append(alphabet[newIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpatzs3w2t/tmpatzs3w2t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae52c3d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae52c0c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae52c0c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae52c0c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpatzs3w2t                        0x0000563572167687 <unavailable> + 5767

    5    libc.so.6                          0x00002ae52c5bc460 __libc_start_main +
    245

    6    tmpatzs3w2t                        0x00005635721672c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        result += String(alphabet[(index + (2 * 2)) % alphabet.count])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\"\
    ) == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpo9iolm4h.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpo9iolm4h.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpo9iolm4h.swift:15:26: error: cannot find\
    \ 'alphabet' in scope\n        result += String(alphabet[(index + (2 * 2)) % alphabet.count])\n\
    \                         ^~~~~~~~\n/tmp/tmpo9iolm4h.swift:15:55: error: cannot\
    \ find 'alphabet' in scope\n        result += String(alphabet[(index + (2 * 2))\
    \ % alphabet.count])\n                                                      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        let index = alphabet.index(of: char)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp3po1jkrn/tmp3po1jkrn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac966598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96628fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96628f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96628e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3po1jkrn                        0x00005627f8106687 <unavailable> + 5767

    5    libc.so.6                          0x00002ac966784460 __libc_start_main +
    245

    6    tmp3po1jkrn                        0x00005627f81062c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedCharacter\
    \ = Character(UnicodeScalar(encryptedUnicode)!)\n        encrypted.append(encryptedCharacter)\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpyio4wxcm/tmpyio4wxcm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d200dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d1fdd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d1fdd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d1fdd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyio4wxcm                        0x000055fc0f4c7b7e <unavailable> + 7038

    5    libc.so.6                          0x00002b4d202ca460 __libc_start_main +
    245

    6    tmpyio4wxcm                        0x000055fc0f4c7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let index = alphabet.indexOf(String(char))\n\
    \        let newIndex = (index! + (2 * 2)) % alphabet.count\n        encryptedString\
    \ += alphabet[newIndex]\n    }\n    return encryptedString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp9m0ygdcb.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9m0ygdcb.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(char))\n\
    \                    ^~~~~~~~\n/tmp/tmp9m0ygdcb.swift:15:45: error: cannot find\
    \ 'alphabet' in scope\n        let newIndex = (index! + (2 * 2)) % alphabet.count\n\
    \                                            ^~~~~~~~\n/tmp/tmp9m0ygdcb.swift:16:28:\
    \ error: cannot find 'alphabet' in scope\n        encryptedString += alphabet[newIndex]\n\
    \                           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for letter\
    \ in s {\n        let index = alphabet.index(of: letter)\n        let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n        encryptedString.append(alphabet[newIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp70r9gp58/tmp70r9gp58.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e4bcfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e4b9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e4b9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e4b9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70r9gp58                        0x000056005d303687 <unavailable> + 5767

    5    libc.so.6                          0x00002b6e4bee8460 __libc_start_main +
    245

    6    tmp70r9gp58                        0x000056005d3032c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let index = alphabet.indexOf(String(char))\n\
    \        let newIndex = (index! + (2 * 2)) % alphabet.count\n        encryptedString.append(alphabet[newIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpzugzy4o7.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpzugzy4o7.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(char))\n\
    \                    ^~~~~~~~\n/tmp/tmpzugzy4o7.swift:15:45: error: cannot find\
    \ 'alphabet' in scope\n        let newIndex = (index! + (2 * 2)) % alphabet.count\n\
    \                                            ^~~~~~~~\n/tmp/tmpzugzy4o7.swift:16:32:\
    \ error: cannot find 'alphabet' in scope\n        encryptedString.append(alphabet[newIndex])\n\
    \                               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        result += String(alphabet[(index + 4) % 26])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpzw4yszye.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpzw4yszye.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpzw4yszye.swift:15:26: error: cannot find\
    \ 'alphabet' in scope\n        result += String(alphabet[(index + 4) % 26])\n\
    \                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        if let ascii = UnicodeScalar(String(c))?.value\
    \ {\n            var newAscii = ascii + 2 * 2\n            if newAscii > 122 {\n\
    \                newAscii = newAscii - 26\n            }\n            result.append(Character(UnicodeScalar(newAscii)!))\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp_rasib41.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for char in s {\n        let charIndex = char.asciiValue! - 97\n\
    \        let newCharIndex = (charIndex + 4) % 26\n        let newChar = Character(UnicodeScalar(newCharIndex\
    \ + 97)!)\n        encrypted.append(newChar)\n    }\n    return encrypted\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpnnm4ior0.swift:16:65: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n        let newChar = Character(UnicodeScalar(newCharIndex\
    \ + 97)!)\n                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                \n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for letter in\
    \ s {\n        let index = alphabet.index(of: letter)\n        let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n        encrypted += String(alphabet[newIndex])\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpvrqtawf9/tmpvrqtawf9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2df73a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2df709bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2df709b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2df709a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvrqtawf9                        0x000055a0dd2436d7 <unavailable> + 5847

    5    libc.so.6                          0x00002b2df7590460 __libc_start_main +
    245

    6    tmpvrqtawf9                        0x000055a0dd243319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        let index = alphabet.index(of: char)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted += String(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpv4d08mc6/tmpv4d08mc6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76f5d65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76f5a5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76f5a5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76f5a5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4d08mc6                        0x000055952160e6d7 <unavailable> + 5847

    5    libc.so.6                          0x00002b76f5f51460 __libc_start_main +
    245

    6    tmpv4d08mc6                        0x000055952160e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for letter in\
    \ s {\n        let index = alphabet.index(of: letter)\n        let newIndex =\
    \ alphabet.index(index!, offsetBy: 2 * 2)\n        encrypted.append(alphabet[newIndex])\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ac2e7740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac2e7437561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac2e7437286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac2e743713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac2e7436bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ac2e756aec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002ac2e7523660 String.subscript.getter
    + 34

    7    tmph9rinobh                        0x00005559f03420e9 <unavailable> + 8425

    8    tmph9rinobh                        0x00005559f03419dd <unavailable> + 6621

    9    libc.so.6                          0x00002ac2e792c460 __libc_start_main +
    245

    10   tmph9rinobh                        0x00005559f03412c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        let index = alphabet.index(of: char)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp3po1jkrn/tmp3po1jkrn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac966598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96628fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96628f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96628e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3po1jkrn                        0x00005627f8106687 <unavailable> + 5767

    5    libc.so.6                          0x00002ac966784460 __libc_start_main +
    245

    6    tmp3po1jkrn                        0x00005627f81062c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for character in s.characters {\n        let unicode = character.unicodeScalars.first!.value\n\
    \        let unicodeEncrypted = unicode + (2 * 2)\n        let encryptedCharacter\
    \ = String(UnicodeScalar(UInt8(unicodeEncrypted)))\n        encryptedString +=\
    \ encryptedCharacter\n    }\n    return encryptedString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpbdkpl8pu.swift:13:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in s.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for letter in\
    \ s {\n        if let index = alphabet.firstIndex(of: letter) {\n            let\
    \ newIndex = (index + 2 * 2) % alphabet.count\n            encrypted.append(alphabet[newIndex])\n\
    \        }\n    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp70n3llkn.swift:16:29: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let newIndex = (index + 2 * 2)\
    \ % alphabet.count\n                            ^\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for letter in\
    \ s {\n        let index = alphabet.index(of: letter)\n        let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpguwlirh7/tmpguwlirh7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b372d6b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b372d3a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b372d3a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b372d3a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpguwlirh7                        0x000055b6048fd687 <unavailable> + 5767

    5    libc.so.6                          0x00002b372d89d460 __libc_start_main +
    245

    6    tmpguwlirh7                        0x000055b6048fd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        if let index = alphabet.firstIndex(of: char) {\n           \
    \ let newIndex = index.advanced(by: 2)\n            encryptedString.append(alphabet[newIndex])\n\
    \        }\n    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\")\
    \ == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpui8_scmp.swift:16:34: error: value of type 'String.Index' has no\
    \ member 'advanced'\n            let newIndex = index.advanced(by: 2)\n      \
    \                     ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + (2 * 2)) % 26\n        encrypted.append(alphabet[newIndex])\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpoil58w2h.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpoil58w2h.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpoil58w2h.swift:16:26: error: cannot find\
    \ 'alphabet' in scope\n        encrypted.append(alphabet[newIndex])\n        \
    \                 ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedCharacter\
    \ = Character(UnicodeScalar(encryptedUnicode)!)\n        encrypted.append(encryptedCharacter)\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpyio4wxcm/tmpyio4wxcm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d200dec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d1fdd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d1fdd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d1fdd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyio4wxcm                        0x000055fc0f4c7b7e <unavailable> + 7038

    5    libc.so.6                          0x00002b4d202ca460 __libc_start_main +
    245

    6    tmpyio4wxcm                        0x000055fc0f4c7379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let i = c.unicodeScalarCodePoint()\n\
    \        let j = i + 2 * 2\n        let k = UnicodeScalar(j)\n        result.append(k)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp_muv83fd.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp_muv83fd.swift:14:19:\
    \ error: value of type 'Character' has no member 'unicodeScalarCodePoint'\n  \
    \      let i = c.unicodeScalarCodePoint()\n                ~ ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for c in s.characters {\n        let ascii = c.asciiValue!\n   \
    \     let newAscii = ascii + 2 * 2\n        let newChar = Character(UnicodeScalar(newAscii))\n\
    \        encrypted += String(newChar)\n    }\n    return encrypted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpgn6ozvzb.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let shifted = unicode + (2 * 2)\n        let shiftedChar = Character(UnicodeScalar(UInt8(shifted)))\n\
    \        result.append(shiftedChar)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmp4w2ktur7/tmp4w2ktur7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5881306c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5880ffdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5880ffd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5880ffc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4w2ktur7                        0x0000561fbe09ed4e <unavailable> + 7502

    5    libc.so.6                          0x00002b58814f2460 __libc_start_main +
    245

    6    tmp4w2ktur7                        0x0000561fbe09e549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 0
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        if let index = alphabet.firstIndex(of: char) {\n            let\
    \ newIndex = index.encodedOffset + 4\n            let newChar = alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex % alphabet.count)]\n            encrypted.append(newChar)\n\
    \        }\n    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        result += String(alphabet[(index + (2 * 2)) % alphabet.count])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\"\
    ) == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpo9iolm4h.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpo9iolm4h.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpo9iolm4h.swift:15:26: error: cannot find\
    \ 'alphabet' in scope\n        result += String(alphabet[(index + (2 * 2)) % alphabet.count])\n\
    \                         ^~~~~~~~\n/tmp/tmpo9iolm4h.swift:15:55: error: cannot\
    \ find 'alphabet' in scope\n        result += String(alphabet[(index + (2 * 2))\
    \ % alphabet.count])\n                                                      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        result += String(c).unicodeScalars.map\
    \ {\n            let unicode = $0.value\n            if unicode >= 97 && unicode\
    \ <= 122 {\n                let newUnicode = unicode + 2 * 2\n               \
    \ if newUnicode > 122 {\n                    return UnicodeScalar(newUnicode -\
    \ 26)!\n                }\n                return UnicodeScalar(newUnicode)!\n\
    \            }\n            return $0\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpnisbanlg.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnisbanlg.swift:19:58:\
    \ error: cannot convert return expression of type 'UnicodeScalar' (aka 'Unicode.Scalar')\
    \ to return type 'String.Element' (aka 'Character')\n                    return\
    \ UnicodeScalar(newUnicode - 26)!\n                           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let charIndex = alphabet.indexOf(char)\n\
    \        let newCharIndex = (charIndex! + (2 * 2)) % 26\n        encryptedString.append(alphabet[newCharIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpy37vrmkx.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpy37vrmkx.swift:14:25:\
    \ error: cannot find 'alphabet' in scope\n        let charIndex = alphabet.indexOf(char)\n\
    \                        ^~~~~~~~\n/tmp/tmpy37vrmkx.swift:16:32: error: cannot\
    \ find 'alphabet' in scope\n        encryptedString.append(alphabet[newCharIndex])\n\
    \                               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for c in s {\n\
    \        let index = alphabet.index(of: c)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2 * 2)\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002abaf96f1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abaf93e8561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002abaf93e8286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002abaf93e813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002abaf93e7bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002abaf951bec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002abaf94d4660 String.subscript.getter
    + 34

    7    tmpxj8vvt5k                        0x0000561830b690e9 <unavailable> + 8425

    8    tmpxj8vvt5k                        0x0000561830b689dd <unavailable> + 6621

    9    libc.so.6                          0x00002abaf98dd460 __libc_start_main +
    245

    10   tmpxj8vvt5k                        0x0000561830b682c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let index = alphabet.index(of: char)\n\
    \        let newIndex = index! + (2 * 2)\n        result += String(alphabet[newIndex])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp2qtp8u7o.swift:14:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: char)\n                    ^~~~~~~~\n\
    /tmp/tmp2qtp8u7o.swift:16:26: error: cannot find 'alphabet' in scope\n       \
    \ result += String(alphabet[newIndex])\n                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for c in s {\n\
    \        let index = alphabet.index(of: c)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp8z5c2dug/tmp8z5c2dug.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b292e11ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b292de15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b292de15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b292de147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z5c2dug                        0x0000563dec9d7687 <unavailable> + 5767

    5    libc.so.6                          0x00002b292e30a460 __libc_start_main +
    245

    6    tmp8z5c2dug                        0x0000563dec9d72c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for letter in s {\n        let index = alphabet.index(of: letter)\n\
    \        let newIndex = (index! + 2) * 2\n        result += alphabet[newIndex]\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpk1bvr_u9.swift:14:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: letter)\n                    ^~~~~~~~\n\
    /tmp/tmpk1bvr_u9.swift:16:19: error: cannot find 'alphabet' in scope\n       \
    \ result += alphabet[newIndex]\n                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for c in s {\n\
    \        let index = alphabet.index(of: c)\n        if let index = index {\n \
    \           let newIndex = alphabet.index(index, offsetBy: 2 * 2)\n          \
    \  encrypted.append(alphabet[newIndex])\n        }\n    }\n    return encrypted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002aac167dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac164d2561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aac164d2286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aac164d213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aac164d1bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002aac16605ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002aac165be660 String.subscript.getter
    + 34

    7    tmpzwmm1kz_                        0x000056312d9de005 <unavailable> + 8197

    8    tmpzwmm1kz_                        0x000056312d9dd93d <unavailable> + 6461

    9    libc.so.6                          0x00002aac169c7460 __libc_start_main +
    245

    10   tmpzwmm1kz_                        0x000056312d9dd229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        result += String(alphabet[(index + 2 * 2) % alphabet.count])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\"\
    ) == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmppevb_vix.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmppevb_vix.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmppevb_vix.swift:15:26: error: cannot find\
    \ 'alphabet' in scope\n        result += String(alphabet[(index + 2 * 2) % alphabet.count])\n\
    \                         ^~~~~~~~\n/tmp/tmppevb_vix.swift:15:53: error: cannot\
    \ find 'alphabet' in scope\n        result += String(alphabet[(index + 2 * 2)\
    \ % alphabet.count])\n                                                    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        let index = alphabet.index(of: char)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted += String(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpv4d08mc6/tmpv4d08mc6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76f5d65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76f5a5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76f5a5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76f5a5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4d08mc6                        0x000055952160e6d7 <unavailable> + 5847

    5    libc.so.6                          0x00002b76f5f51460 __libc_start_main +
    245

    6    tmpv4d08mc6                        0x000055952160e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let charIndex = alphabet.indexOf(String(char))\n\
    \        encryptedString += alphabet[(charIndex! + (2 * 2)) % alphabet.count]\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpckljqmbd.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpckljqmbd.swift:14:25:\
    \ error: cannot find 'alphabet' in scope\n        let charIndex = alphabet.indexOf(String(char))\n\
    \                        ^~~~~~~~\n/tmp/tmpckljqmbd.swift:15:28: error: cannot\
    \ find 'alphabet' in scope\n        encryptedString += alphabet[(charIndex! +\
    \ (2 * 2)) % alphabet.count]\n                           ^~~~~~~~\n/tmp/tmpckljqmbd.swift:15:62:\
    \ error: cannot find 'alphabet' in scope\n        encryptedString += alphabet[(charIndex!\
    \ + (2 * 2)) % alphabet.count]\n                                             \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for letter in\
    \ s {\n        let index = alphabet.index(of: letter)\n        let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpguwlirh7/tmpguwlirh7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b372d6b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b372d3a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b372d3a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b372d3a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpguwlirh7                        0x000055b6048fd687 <unavailable> + 5767

    5    libc.so.6                          0x00002b372d89d460 __libc_start_main +
    245

    6    tmpguwlirh7                        0x000055b6048fd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let charIndex = alphabet.indexOf(String(char))\n\
    \        let encryptedIndex = (charIndex! + (2 * 2)) % 26\n        encryptedString.append(alphabet[encryptedIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpnsq51_h9.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpnsq51_h9.swift:14:25:\
    \ error: cannot find 'alphabet' in scope\n        let charIndex = alphabet.indexOf(String(char))\n\
    \                        ^~~~~~~~\n/tmp/tmpnsq51_h9.swift:16:32: error: cannot\
    \ find 'alphabet' in scope\n        encryptedString.append(alphabet[encryptedIndex])\n\
    \                               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let index = alphabet.index(of: char)\n\
    \        let newIndex = (index! + 2 * 2) % 26\n        result += String(alphabet[newIndex])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmptzkouf82.swift:14:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: char)\n                    ^~~~~~~~\n\
    /tmp/tmptzkouf82.swift:16:26: error: cannot find 'alphabet' in scope\n       \
    \ result += String(alphabet[newIndex])\n                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let newUnicode = unicode + (2 * 2)\n        let newChar = Character(UnicodeScalar(newUnicode)!)\n\
    \        result.append(newChar)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmptx334uoz/tmptx334uoz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48fd823c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48fd51ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48fd51a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48fd5197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptx334uoz                        0x000056254c152b7e <unavailable> + 7038

    5    libc.so.6                          0x00002b48fda0f460 __libc_start_main +
    245

    6    tmptx334uoz                        0x000056254c152379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let index = alphabet.indexOf(String(char))\n\
    \        let newIndex = (index! + 2) * 2\n        encryptedString += alphabet[newIndex]\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpm_yhz0yw.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpm_yhz0yw.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(char))\n\
    \                    ^~~~~~~~\n/tmp/tmpm_yhz0yw.swift:16:28: error: cannot find\
    \ 'alphabet' in scope\n        encryptedString += alphabet[newIndex]\n       \
    \                    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        let index = alphabet.index(of: char)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted += String(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpv4d08mc6/tmpv4d08mc6.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b76f5d65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b76f5a5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b76f5a5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b76f5a5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv4d08mc6                        0x000055952160e6d7 <unavailable> + 5847

    5    libc.so.6                          0x00002b76f5f51460 __libc_start_main +
    245

    6    tmpv4d08mc6                        0x000055952160e319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        var encryptedUnicode = unicode + 2 * 2\n        if encryptedUnicode >\
    \ 122 {\n            encryptedUnicode = encryptedUnicode - 26\n        }\n   \
    \     let encryptedCharacter = Character(UnicodeScalar(encryptedUnicode)!)\n \
    \       encryptedString.append(encryptedCharacter)\n    }\n    return encryptedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpa1xjd15z.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        result += String(c).rotate(2)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmptvnfxprp.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmptvnfxprp.swift:14:29:\
    \ error: value of type 'String' has no member 'rotate'\n        result += String(c).rotate(2)\n\
    \                  ~~~~~~~~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let charIndex = char.asciiValue! - 97\n\
    \        let newCharIndex = (charIndex + 2 * 2) % 26\n        let newChar = Character(UnicodeScalar(newCharIndex\
    \ + 97)!)\n        result.append(newChar)\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpscefeykr.swift:16:65: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n        let newChar = Character(UnicodeScalar(newCharIndex\
    \ + 97)!)\n                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                \n"
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let i = c.unicodeScalarCodePoint()\n\
    \        let j = i + (2 * 2)\n        let k = UnicodeScalar(j)\n        result.append(Character(k))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp4zx63_8w.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4zx63_8w.swift:14:19:\
    \ error: value of type 'Character' has no member 'unicodeScalarCodePoint'\n  \
    \      let i = c.unicodeScalarCodePoint()\n                ~ ^~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let newUnicode = unicode + (2 * 2)\n        let newChar = Character(UnicodeScalar(newUnicode)!)\n\
    \        encrypted.append(newChar)\n    }\n    return encrypted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmpal5arnrq/tmpal5arnrq.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b575e48ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b575e185b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b575e185988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b575e1847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpal5arnrq                        0x00005638e47c5b7e <unavailable> + 7038

    5    libc.so.6                          0x00002b575e67a460 __libc_start_main +
    245

    6    tmpal5arnrq                        0x00005638e47c5379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        result += String(alphabet[(index + 4) % 26])\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpzw4yszye.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpzw4yszye.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpzw4yszye.swift:15:26: error: cannot find\
    \ 'alphabet' in scope\n        result += String(alphabet[(index + 4) % 26])\n\
    \                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for letter in\
    \ s {\n        let index = alphabet.index(of: letter)\n        let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpguwlirh7/tmpguwlirh7.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b372d6b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b372d3a8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b372d3a8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b372d3a77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpguwlirh7                        0x000055b6048fd687 <unavailable> + 5767

    5    libc.so.6                          0x00002b372d89d460 __libc_start_main +
    245

    6    tmpguwlirh7                        0x000055b6048fd2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for char in s {\n        if let index = alphabet.firstIndex(of:\
    \ char) {\n            let newIndex = (index + (2 * 2)) % alphabet.count\n   \
    \         encrypted.append(alphabet[newIndex])\n        }\n    }\n    return encrypted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpig2srxl7.swift:14:24: error: cannot find 'alphabet' in scope\n\
    \        if let index = alphabet.firstIndex(of: char) {\n                    \
    \   ^~~~~~~~\n/tmp/tmpig2srxl7.swift:15:48: error: cannot find 'alphabet' in scope\n\
    \            let newIndex = (index + (2 * 2)) % alphabet.count\n             \
    \                                  ^~~~~~~~\n/tmp/tmpig2srxl7.swift:16:30: error:\
    \ cannot find 'alphabet' in scope\n            encrypted.append(alphabet[newIndex])\n\
    \                             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let shift = 2\n    var encrypted = \"\"\
    \n    for c in s {\n        if let index = alphabet.index(of: c) {\n         \
    \   let newIndex = (alphabet.distance(from: alphabet.startIndex, to: index) +\
    \ shift) % alphabet.count\n            encrypted.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n        }\n    }\n    return encrypted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmp5ofu0928/tmp5ofu0928.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc30023c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc2fd1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc2fd1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc2fd197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ofu0928                        0x00005592bea87797 <unavailable> + 6039

    5    libc.so.6                          0x00002acc3020f460 __libc_start_main +
    245

    6    tmp5ofu0928                        0x00005592bea873d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        result += String(alphabet[(index + (2 * 2)) % alphabet.count])\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\"\
    ) == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpo9iolm4h.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpo9iolm4h.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpo9iolm4h.swift:15:26: error: cannot find\
    \ 'alphabet' in scope\n        result += String(alphabet[(index + (2 * 2)) % alphabet.count])\n\
    \                         ^~~~~~~~\n/tmp/tmpo9iolm4h.swift:15:55: error: cannot\
    \ find 'alphabet' in scope\n        result += String(alphabet[(index + (2 * 2))\
    \ % alphabet.count])\n                                                      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for letter in\
    \ s {\n        if let index = alphabet.firstIndex(of: letter) {\n            let\
    \ newIndex = index.advanced(by: 2)\n            encrypted.append(alphabet[newIndex])\n\
    \        }\n    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpyv8bkddn.swift:16:34: error: value of type 'String.Index' has no\
    \ member 'advanced'\n            let newIndex = index.advanced(by: 2)\n      \
    \                     ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for c in s {\n\
    \        let index = alphabet.index(of: c)\n        let newIndex = (alphabet.index(index!,\
    \ offsetBy: 2))\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp57zkzxt3/tmp57zkzxt3.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b43369d2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b43366c9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b43366c9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b43366c87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp57zkzxt3                        0x0000557288148687 <unavailable> + 5767

    5    libc.so.6                          0x00002b4336bbe460 __libc_start_main +
    245

    6    tmp57zkzxt3                        0x00005572881482c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let lowercaseS = s.lowercased()\n    var\
    \ encrypted = \"\"\n    for char in lowercaseS {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = index.encodedOffset + 2\n            let\
    \ newChar = alphabet[alphabet.index(alphabet.startIndex, offsetBy: newIndex)]\n\
    \            encrypted.append(newChar)\n        }\n    }\n    return encrypted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmpeiepqlla/tmpeiepqlla.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aad85dc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aad85abcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aad85abc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aad85abb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeiepqlla                        0x000055d9d2036707 <unavailable> + 5895

    5    libc.so.6                          0x00002aad85fb1460 __libc_start_main +
    245

    6    tmpeiepqlla                        0x000055d9d2036349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + 2 * 2) % 26\n        result.append(alphabet[newIndex])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp11oh4biu.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp11oh4biu.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmp11oh4biu.swift:16:23: error: cannot find\
    \ 'alphabet' in scope\n        result.append(alphabet[newIndex])\n           \
    \           ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ s.map {\n        let char = String($0)\n        let index = ALPHABET.index(of:\
    \ char)!\n        let newIndex = (index + 2 * 2) % ALPHABET.count\n        return\
    \ ALPHABET[newIndex]\n    }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpu8gzpizi.swift:14:21: error: cannot find 'ALPHABET' in scope\n\
    \        let index = ALPHABET.index(of: char)!\n                    ^~~~~~~~\n\
    /tmp/tmpu8gzpizi.swift:15:42: error: cannot find 'ALPHABET' in scope\n       \
    \ let newIndex = (index + 2 * 2) % ALPHABET.count\n                          \
    \               ^~~~~~~~\n/tmp/tmpu8gzpizi.swift:16:16: error: cannot find 'ALPHABET'\
    \ in scope\n        return ALPHABET[newIndex]\n               ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + 2 * 2) % 26\n        encrypted += String(alphabet[newIndex])\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpmqqpf5s0.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmqqpf5s0.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpmqqpf5s0.swift:16:29: error: cannot find\
    \ 'alphabet' in scope\n        encrypted += String(alphabet[newIndex])\n     \
    \                       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        let index = alphabet.index(of: char)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2 * 2)\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4772eec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba476fe5561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ba476fe5286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ba476fe513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ba476fe4bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ba477118ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002ba4770d1660 String.subscript.getter
    + 34

    7    tmpforyblv0                        0x0000564a794b50e9 <unavailable> + 8425

    8    tmpforyblv0                        0x0000564a794b49dd <unavailable> + 6621

    9    libc.so.6                          0x00002ba4774da460 __libc_start_main +
    245

    10   tmpforyblv0                        0x0000564a794b42c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        result += String(UnicodeScalar(UInt8(c.value)\
    \ + 2 * 2))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp8hi5gzjg.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp8hi5gzjg.swift:14:48:\
    \ error: value of type 'Character' has no member 'value'\n        result += String(UnicodeScalar(UInt8(c.value)\
    \ + 2 * 2))\n                                             ~ ^~~~~\n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for char in s {\n        let index = alphabet.index(of: char)\n\
    \        let newIndex = (index! + (2 * 2)) % 26\n        encrypted.append(alphabet[newIndex])\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp1ive6cix.swift:14:21: error: cannot find 'alphabet' in scope\n\
    \        let index = alphabet.index(of: char)\n                    ^~~~~~~~\n\
    /tmp/tmp1ive6cix.swift:16:26: error: cannot find 'alphabet' in scope\n       \
    \ encrypted.append(alphabet[newIndex])\n                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        let index = alphabet.index(of: char)\n        let newIndex =\
    \ alphabet.index(index!, offsetBy: 4)\n        encryptedString.append(alphabet[newIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fe759cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fe7293561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0fe7293286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0fe729313c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0fe7292bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b0fe73c6ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b0fe737f660 String.subscript.getter
    + 34

    7    tmpigswltd2                        0x00005634d64d40e9 <unavailable> + 8425

    8    tmpigswltd2                        0x00005634d64d39dd <unavailable> + 6621

    9    libc.so.6                          0x00002b0fe7788460 __libc_start_main +
    245

    10   tmpigswltd2                        0x00005634d64d32c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        if let index = alphabet.firstIndex(of: char) {\n           \
    \ let newIndex = index + 2 * 2\n            if newIndex > alphabet.count - 1 {\n\
    \                let index = newIndex - alphabet.count\n                encryptedString.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: index)])\n            } else {\n                encryptedString.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n            }\n        }\n    }\n    return encryptedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpg8b7fvsl.swift:16:28: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let newIndex = index + 2 * 2\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let newChar = char.unicodeScalars.first!.value\
    \ + 2 * 2\n        result.append(Character(UnicodeScalar(newChar)!))\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\"\
    ) == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp0kvbps3g/tmp0kvbps3g.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af227d04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2279fbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2279fb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af2279fa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0kvbps3g                        0x00005623823dab7e <unavailable> + 7038

    5    libc.so.6                          0x00002af227ef0460 __libc_start_main +
    245

    6    tmp0kvbps3g                        0x00005623823da379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        result += String(Character(UnicodeScalar(UInt8(char.asciiValue!)\
    \ + 2 * 2)!))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp2q3iwyz2.swift:14:82: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n        result += String(Character(UnicodeScalar(UInt8(char.asciiValue!)\
    \ + 2 * 2)!))\n                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                            \
    \     \n"
  stdout: ''
  timestamp: 1659824799
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let newAlphabet = \"cdefghijklmnopqrstuvwxyzab\"\
    \n    var encryptedString = \"\"\n    for char in s {\n        if let index =\
    \ alphabet.index(of: char) {\n            encryptedString.append(newAlphabet[index])\n\
    \        }\n    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\")\
    \ == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmpedsos7vp/tmpedsos7vp.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aedbf95ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aedbf655b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aedbf655988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aedbf6547b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpedsos7vp                        0x000055d0f37ca587 <unavailable> + 5511

    5    libc.so.6                          0x00002aedbfb4a460 __libc_start_main +
    245

    6    tmpedsos7vp                        0x000055d0f37ca1c9 <unavailable> + 4553

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let charIndex = alphabet.indexOf(char)\n\
    \        let encryptedIndex = (charIndex! + 2) * 2\n        let encryptedChar\
    \ = alphabet[encryptedIndex]\n        encryptedString.append(encryptedChar)\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp1qqzdec0.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp1qqzdec0.swift:14:25:\
    \ error: cannot find 'alphabet' in scope\n        let charIndex = alphabet.indexOf(char)\n\
    \                        ^~~~~~~~\n/tmp/tmp1qqzdec0.swift:16:29: error: cannot\
    \ find 'alphabet' in scope\n        let encryptedChar = alphabet[encryptedIndex]\n\
    \                            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for c in s {\n\
    \        let index = alphabet.index(of: c)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp8z5c2dug/tmp8z5c2dug.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b292e11ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b292de15b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b292de15988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b292de147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8z5c2dug                        0x0000563dec9d7687 <unavailable> + 5767

    5    libc.so.6                          0x00002b292e30a460 __libc_start_main +
    245

    6    tmp8z5c2dug                        0x0000563dec9d72c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for letter in s {\n        let unicode = letter.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedLetter\
    \ = String(UnicodeScalar(UInt8(encryptedUnicode)))\n        encryptedString +=\
    \ encryptedLetter\n    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmprxsalfqt/tmprxsalfqt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b531aec7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b531abbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b531abbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b531abbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprxsalfqt                        0x0000560d1ae0ed4e <unavailable> + 7502

    5    libc.so.6                          0x00002b531b0b3460 __libc_start_main +
    245

    6    tmprxsalfqt                        0x0000560d1ae0e549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for letter\
    \ in s {\n        let index = alphabet.index(of: letter)\n        let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n        encryptedString.append(alphabet[newIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp70r9gp58/tmp70r9gp58.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e4bcfcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e4b9f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e4b9f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e4b9f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp70r9gp58                        0x000056005d303687 <unavailable> + 5767

    5    libc.so.6                          0x00002b6e4bee8460 __libc_start_main +
    245

    6    tmp70r9gp58                        0x000056005d3032c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for character in s.characters {\n        let unicode = character.unicodeScalars.first!.value\n\
    \        let unicodeEncrypted = unicode + (2 * 2)\n        let encryptedCharacter\
    \ = String(UnicodeScalar(UInt8(unicodeEncrypted)))\n        encryptedString +=\
    \ encryptedCharacter\n    }\n    return encryptedString\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpbdkpl8pu.swift:13:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in s.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedChar =\
    \ Character(UnicodeScalar(encryptedUnicode))\n        encryptedString.append(encryptedChar)\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpmi662lhf.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmi662lhf.swift:16:39:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \        let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n    \
    \                                  ^\n/tmp/tmpmi662lhf.swift:16:39: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n       \
    \                               ^\n                                          \
    \                            ?? <#default value#>\n/tmp/tmpmi662lhf.swift:16:39:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n\
    \                                      ^\n                                   \
    \                                  !\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + (2 * 2)) % alphabet.count\n        result +=\
    \ alphabet[newIndex]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\")\
    \ == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpmj96myi2.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmj96myi2.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpmj96myi2.swift:15:44: error: cannot find\
    \ 'alphabet' in scope\n        let newIndex = (index + (2 * 2)) % alphabet.count\n\
    \                                           ^~~~~~~~\n/tmp/tmpmj96myi2.swift:16:19:\
    \ error: cannot find 'alphabet' in scope\n        result += alphabet[newIndex]\n\
    \                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let charIndex = alphabet.indexOf(char)\n\
    \        let newCharIndex = (charIndex! + (2 * 2)) % alphabet.count\n        encryptedString.append(alphabet[newCharIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpa00o69dg.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpa00o69dg.swift:14:25:\
    \ error: cannot find 'alphabet' in scope\n        let charIndex = alphabet.indexOf(char)\n\
    \                        ^~~~~~~~\n/tmp/tmpa00o69dg.swift:15:53: error: cannot\
    \ find 'alphabet' in scope\n        let newCharIndex = (charIndex! + (2 * 2))\
    \ % alphabet.count\n                                                    ^~~~~~~~\n\
    /tmp/tmpa00o69dg.swift:16:32: error: cannot find 'alphabet' in scope\n       \
    \ encryptedString.append(alphabet[newCharIndex])\n                           \
    \    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for letter in\
    \ s {\n        if let index = alphabet.firstIndex(of: letter) {\n            let\
    \ newIndex = index.advanced(by: 2)\n            encrypted.append(alphabet[newIndex])\n\
    \        }\n    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpyv8bkddn.swift:16:34: error: value of type 'String.Index' has no\
    \ member 'advanced'\n            let newIndex = index.advanced(by: 2)\n      \
    \                     ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for c in s {\n\
    \        if let index = alphabet.firstIndex(of: c) {\n            let newIndex\
    \ = index.advanced(by: 2)\n            encrypted.append(alphabet[newIndex])\n\
    \        }\n    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpzlzzopun.swift:16:34: error: value of type 'String.Index' has no\
    \ member 'advanced'\n            let newIndex = index.advanced(by: 2)\n      \
    \                     ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encrypted = unicode + (2 * 2)\n        let encryptedChar = String(UnicodeScalar(UInt8(encrypted)))\n\
    \        result += encryptedChar\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmphj4mzljt/tmphj4mzljt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3517aec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3514a5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3514a5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3514a47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphj4mzljt                        0x0000564dd6cbed4e <unavailable> + 7502

    5    libc.so.6                          0x00002ac35199a460 __libc_start_main +
    245

    6    tmphj4mzljt                        0x0000564dd6cbe549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        if let index = alphabet.firstIndex(of: char) {\n           \
    \ let newIndex = index.advanced(by: 2)\n            encryptedString.append(alphabet[newIndex])\n\
    \        }\n    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\")\
    \ == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpui8_scmp.swift:16:34: error: value of type 'String.Index' has no\
    \ member 'advanced'\n            let newIndex = index.advanced(by: 2)\n      \
    \                     ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    let lowercaseS = s.lowercased()\n    var\
    \ encryptedString = \"\"\n    for char in lowercaseS {\n        if let index =\
    \ alphabet.index(of: char) {\n            let newIndex = index.encodedOffset +\
    \ 2\n            let newChar = alphabet[alphabet.index(alphabet.startIndex, offsetBy:\
    \ newIndex)]\n            encryptedString.append(newChar)\n        }\n    }\n\
    \    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpmxvhtbu6/tmpmxvhtbu6.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1059840c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1059537b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1059537988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10595367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmxvhtbu6                        0x0000562af7b23707 <unavailable> + 5895

    5    libc.so.6                          0x00002b1059a2c460 __libc_start_main +
    245

    6    tmpmxvhtbu6                        0x0000562af7b23349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let ascii = char.asciiValue!\n        if\
    \ ascii >= 97 && ascii <= 122 {\n            result += String(UnicodeScalar(ascii\
    \ + 2)!)\n        } else if ascii == 122 {\n            result += \"a\"\n    \
    \    } else if ascii == 123 {\n            result += \"b\"\n        } else {\n\
    \            result += String(char)\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp9zavfu5k.swift:16:54: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n            result += String(UnicodeScalar(ascii\
    \ + 2)!)\n                             ~~~~~~~~~~~~~~~~~~~~~~~~^\n           \
    \                                          \n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedCharacter\
    \ = String(UnicodeScalar(UInt8(encryptedUnicode)))\n        encrypted.append(encryptedCharacter)\n\
    \    }\n    return encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpj62n6674/tmpj62n6674.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2abf8e8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2abf5dfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2abf5df988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2abf5de7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj62n6674                        0x000055ae237ded4e <unavailable> + 7502

    5    libc.so.6                          0x00002b2abfad4460 __libc_start_main +
    245

    6    tmpj62n6674                        0x000055ae237de549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let u = String(c).unicodeScalars\n\
    \        let charCode = u[u.startIndex].value\n        let newCharCode = charCode\
    \ + 2 * 2\n        let newChar = Character(UnicodeScalar(newCharCode))\n     \
    \   result.append(newChar)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpow0fafj_.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpow0fafj_.swift:17:33:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \        let newChar = Character(UnicodeScalar(newCharCode))\n               \
    \                 ^\n/tmp/tmpow0fafj_.swift:17:33: note: coalesce using '??' to\
    \ provide a default when the optional value contains 'nil'\n        let newChar\
    \ = Character(UnicodeScalar(newCharCode))\n                                ^\n\
    \                                                           ?? <#default value#>\n\
    /tmp/tmpow0fafj_.swift:17:33: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        let newChar = Character(UnicodeScalar(newCharCode))\n\
    \                                ^\n                                         \
    \                 !\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let unicode = c.unicodeScalars.first!.value\n\
    \        let unicode2 = unicode + 2 * 2\n        let scalar = UnicodeScalar(unicode2)\n\
    \        result.append(Character(scalar))\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpduv23718.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpduv23718.swift:17:33:\
    \ error: value of optional type 'Unicode.Scalar?' must be unwrapped to a value\
    \ of type 'Unicode.Scalar'\n        result.append(Character(scalar))\n       \
    \                         ^\n/tmp/tmpduv23718.swift:16:13: note: short-circuit\
    \ using 'guard' to exit this function early if the optional value contains 'nil'\n\
    \        let scalar = UnicodeScalar(unicode2)\n            ^\n        guard  \
    \                              else { return <#default value#> }\n/tmp/tmpduv23718.swift:16:22:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        let scalar = UnicodeScalar(unicode2)\n                     ^\n\
    \                                             ?? <#default value#>\n/tmp/tmpduv23718.swift:16:22:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let scalar = UnicodeScalar(unicode2)\n                     ^\n\
    \                                            !\n/tmp/tmpduv23718.swift:17:33:\
    \ note: coalesce using '??' to provide a default when the optional value contains\
    \ 'nil'\n        result.append(Character(scalar))\n                          \
    \      ^\n                                       ?? <#default value#>\n/tmp/tmpduv23718.swift:17:33:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        result.append(Character(scalar))\n                          \
    \      ^\n                                      !\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for letter\
    \ in s {\n        if let index = alphabet.firstIndex(of: letter) {\n         \
    \   let newIndex = index.advanced(by: 2)\n            encryptedString.append(alphabet[newIndex])\n\
    \        }\n    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\")\
    \ == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp7passapi.swift:16:34: error: value of type 'String.Index' has no\
    \ member 'advanced'\n            let newIndex = index.advanced(by: 2)\n      \
    \                     ~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var newString\
    \ = \"\"\n    for letter in s.characters {\n        let unicode = letter.unicodeScalars.first!.value\n\
    \        let newUnicode = unicode + (2 * 2)\n        let newLetter = Character(UnicodeScalar(newUnicode))\n\
    \        newString.append(newLetter)\n    }\n    return newString\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpupmu2ybe.swift:13:21: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in s.characters {\n                    ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpupmu2ybe.swift:16:35:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \        let newLetter = Character(UnicodeScalar(newUnicode))\n              \
    \                    ^\n/tmp/tmpupmu2ybe.swift:16:35: note: coalesce using '??'\
    \ to provide a default when the optional value contains 'nil'\n        let newLetter\
    \ = Character(UnicodeScalar(newUnicode))\n                                  ^\n\
    \                                                            ?? <#default value#>\n\
    /tmp/tmpupmu2ybe.swift:16:35: note: force-unwrap using '!' to abort execution\
    \ if the optional value contains 'nil'\n        let newLetter = Character(UnicodeScalar(newUnicode))\n\
    \                                  ^\n                                       \
    \                    !\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        let index = alphabet.index(of: char)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp3po1jkrn/tmp3po1jkrn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac966598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96628fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96628f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96628e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3po1jkrn                        0x00005627f8106687 <unavailable> + 5767

    5    libc.so.6                          0x00002ac966784460 __libc_start_main +
    245

    6    tmp3po1jkrn                        0x00005627f81062c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        let index = alphabet.index(of: char)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp3po1jkrn/tmp3po1jkrn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac966598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96628fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96628f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96628e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3po1jkrn                        0x00005627f8106687 <unavailable> + 5767

    5    libc.so.6                          0x00002ac966784460 __libc_start_main +
    245

    6    tmp3po1jkrn                        0x00005627f81062c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 0
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for c in s {\n\
    \        if let index = alphabet.index(of: c) {\n            let newIndex = (index.encodedOffset\
    \ + 4) % alphabet.count\n            encrypted.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n        }\n    }\n    return encrypted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + (2 * 2)) % alphabet.count\n        result +=\
    \ alphabet[newIndex]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\")\
    \ == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpmj96myi2.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmj96myi2.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpmj96myi2.swift:15:44: error: cannot find\
    \ 'alphabet' in scope\n        let newIndex = (index + (2 * 2)) % alphabet.count\n\
    \                                           ^~~~~~~~\n/tmp/tmpmj96myi2.swift:16:19:\
    \ error: cannot find 'alphabet' in scope\n        result += alphabet[newIndex]\n\
    \                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let newUnicode = unicode + (2 * 2)\n        let newChar = Character(UnicodeScalar(newUnicode)!)\n\
    \        result.append(newChar)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmptx334uoz/tmptx334uoz.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48fd823c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48fd51ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48fd51a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48fd5197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptx334uoz                        0x000056254c152b7e <unavailable> + 7038

    5    libc.so.6                          0x00002b48fda0f460 __libc_start_main +
    245

    6    tmptx334uoz                        0x000056254c152379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        if let index = alphabet.firstIndex(of: char) {\n           \
    \ let newIndex = index + 2 * 2\n            let newChar = alphabet[newIndex %\
    \ alphabet.count]\n            encryptedString.append(newChar)\n        }\n  \
    \  }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(encrypt(s:\
    \ \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp56kyr77t.swift:16:28: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let newIndex = index + 2 * 2\n\
    \                           ^\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let newUnicode = unicode + 2 * 2\n        let newChar = Character(UnicodeScalar(newUnicode)!)\n\
    \        result.append(newChar)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmpwo600qzv/tmpwo600qzv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d44c30c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d44927b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d44927988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d449267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwo600qzv                        0x00005586a55f6b7e <unavailable> + 7038

    5    libc.so.6                          0x00002b1d44e1c460 __libc_start_main +
    245

    6    tmpwo600qzv                        0x00005586a55f6379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        let ascii = char.asciiValue!\n        let\
    \ newAscii = ascii + 2 * 2\n        let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \        result.append(newChar)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpn_yluah2.swift:16:56: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n        let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                ~~~~~~~~~~~~~~~~~~~~~~~^\n                  \
    \                                     \n"
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for character in s.characters {\n        let unicode = character.unicodeScalars.first!.value\n\
    \        let unicodeEncrypted = unicode + (2 * 2)\n        let encryptedCharacter\
    \ = String(UnicodeScalar(UInt8(unicodeEncrypted)))\n        encryptedString.append(encryptedCharacter)\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpcx_pkx1t.swift:13:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for character in s.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        let newIndex = (index + (2 * 2)) % alphabet.count\n        result +=\
    \ alphabet[newIndex]\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\")\
    \ == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpmj96myi2.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmj96myi2.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmpmj96myi2.swift:15:44: error: cannot find\
    \ 'alphabet' in scope\n        let newIndex = (index + (2 * 2)) % alphabet.count\n\
    \                                           ^~~~~~~~\n/tmp/tmpmj96myi2.swift:16:19:\
    \ error: cannot find 'alphabet' in scope\n        result += alphabet[newIndex]\n\
    \                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for letter in s {\n        let unicode = letter.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedLetter\
    \ = String(UnicodeScalar(UInt8(encryptedUnicode)))\n        encryptedString +=\
    \ encryptedLetter\n    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: Exception
  stderr: 'tmprxsalfqt/tmprxsalfqt.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b531aec7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b531abbeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b531abbe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b531abbd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprxsalfqt                        0x0000560d1ae0ed4e <unavailable> + 7502

    5    libc.so.6                          0x00002b531b0b3460 __libc_start_main +
    245

    6    tmprxsalfqt                        0x0000560d1ae0e549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        let index = alphabet.index(of: char)\n        let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n        encryptedString.append(alphabet[newIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpatzs3w2t/tmpatzs3w2t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae52c3d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae52c0c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae52c0c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae52c0c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpatzs3w2t                        0x0000563572167687 <unavailable> + 5767

    5    libc.so.6                          0x00002ae52c5bc460 __libc_start_main +
    245

    6    tmpatzs3w2t                        0x00005635721672c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encrypted\
    \ = \"\"\n    for char in s {\n        let ascii = char.asciiValue!\n        let\
    \ newAscii = ascii + (2 * 2)\n        let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \        encrypted += String(newChar)\n    }\n    return encrypted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpoiue71d7.swift:16:56: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n        let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \                                ~~~~~~~~~~~~~~~~~~~~~~~^\n                  \
    \                                     \n"
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedChar =\
    \ Character(UnicodeScalar(encryptedUnicode))\n        encryptedString.append(encryptedChar)\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpmi662lhf.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpmi662lhf.swift:16:39:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \        let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n    \
    \                                  ^\n/tmp/tmpmi662lhf.swift:16:39: note: coalesce\
    \ using '??' to provide a default when the optional value contains 'nil'\n   \
    \     let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n       \
    \                               ^\n                                          \
    \                            ?? <#default value#>\n/tmp/tmpmi662lhf.swift:16:39:\
    \ note: force-unwrap using '!' to abort execution if the optional value contains\
    \ 'nil'\n        let encryptedChar = Character(UnicodeScalar(encryptedUnicode))\n\
    \                                      ^\n                                   \
    \                                  !\n"
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let index = alphabet.indexOf(String(char))\n\
    \        let encryptedIndex = (index! + 2) * 2\n        encryptedString += alphabet[encryptedIndex]\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpkkkvb590.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpkkkvb590.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(char))\n\
    \                    ^~~~~~~~\n/tmp/tmpkkkvb590.swift:16:28: error: cannot find\
    \ 'alphabet' in scope\n        encryptedString += alphabet[encryptedIndex]\n \
    \                          ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for letter\
    \ in s {\n        if let index = alphabet.firstIndex(of: letter) {\n         \
    \   let newIndex = index + 4\n            if newIndex > 25 {\n               \
    \ let newIndex = newIndex - 26\n                encryptedString.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n            } else {\n                encryptedString.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n            }\n        }\n    }\n    return encryptedString\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmplma2o0ak.swift:16:28: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n            let newIndex = index + 4\n    \
    \                       ^\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        let index = alphabet.index(of: char)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp3po1jkrn/tmp3po1jkrn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac966598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96628fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96628f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96628e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3po1jkrn                        0x00005627f8106687 <unavailable> + 5767

    5    libc.so.6                          0x00002ac966784460 __libc_start_main +
    245

    6    tmp3po1jkrn                        0x00005627f81062c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let index = alphabet.indexOf(String(c))!\n\
    \        result += alphabet[(index + 2 * 2) % alphabet.count]\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vunla3w.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4vunla3w.swift:14:21:\
    \ error: cannot find 'alphabet' in scope\n        let index = alphabet.indexOf(String(c))!\n\
    \                    ^~~~~~~~\n/tmp/tmp4vunla3w.swift:15:19: error: cannot find\
    \ 'alphabet' in scope\n        result += alphabet[(index + 2 * 2) % alphabet.count]\n\
    \                  ^~~~~~~~\n/tmp/tmp4vunla3w.swift:15:46: error: cannot find\
    \ 'alphabet' in scope\n        result += alphabet[(index + 2 * 2) % alphabet.count]\n\
    \                                             ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let charIndex = alphabet.indexOf(String(char))\n\
    \        let encryptedIndex = (charIndex! + 2) * 2\n        encryptedString +=\
    \ String(alphabet[encryptedIndex])\n    }\n    return encryptedString\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
    \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
    \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
    )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp4f3tj8pb.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp4f3tj8pb.swift:14:25:\
    \ error: cannot find 'alphabet' in scope\n        let charIndex = alphabet.indexOf(String(char))\n\
    \                        ^~~~~~~~\n/tmp/tmp4f3tj8pb.swift:16:35: error: cannot\
    \ find 'alphabet' in scope\n        encryptedString += String(alphabet[encryptedIndex])\n\
    \                                  ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let ascii = Int(String(c).unicodeScalars.first!.value)\n\
    \        let newAscii = ascii + (2 * 2)\n        let newChar = Character(UnicodeScalar(newAscii)!)\n\
    \        result += String(newChar)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpayj94t9z.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    return\
    \ \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") == \"\
    lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"\
    gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\"\
    ) == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\"\
    )\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"\
    hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"a\") ==\
    \ \"e\")"
  status: Exception
  stderr: 'tmp_0nvz25a/tmp_0nvz25a.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0d91dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0d614b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0d614988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0d6137b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_0nvz25a                        0x000055f2daa66307 <unavailable> + 4871

    5    libc.so.6                          0x00002b6b0db09460 __libc_start_main +
    245

    6    tmp_0nvz25a                        0x000055f2daa65f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        let index = alphabet.index(of: char)\n        let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n        encryptedString.append(alphabet[newIndex])\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmpatzs3w2t/tmpatzs3w2t.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae52c3d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae52c0c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae52c0c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae52c0c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpatzs3w2t                        0x0000563572167687 <unavailable> + 5767

    5    libc.so.6                          0x00002ae52c5bc460 __libc_start_main +
    245

    6    tmpatzs3w2t                        0x00005635721672c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for letter in s {\n        let unicode = letter.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedLetter\
    \ = Character(UnicodeScalar(encryptedUnicode)!)\n        encryptedString.append(encryptedLetter)\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp28x0k65o/tmp28x0k65o.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9584a1fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9584716b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9584716988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95847157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp28x0k65o                        0x0000564ea001bb7e <unavailable> + 7038

    5    libc.so.6                          0x00002b9584c0b460 __libc_start_main +
    245

    6    tmp28x0k65o                        0x0000564ea001b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        let index = alphabet.index(of: char)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp3po1jkrn/tmp3po1jkrn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac966598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96628fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96628f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96628e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3po1jkrn                        0x00005627f8106687 <unavailable> + 5767

    5    libc.so.6                          0x00002ac966784460 __libc_start_main +
    245

    6    tmp3po1jkrn                        0x00005627f81062c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encryptedString = \"\"\n    for char\
    \ in s {\n        if let index = alphabet.index(of: char) {\n            let newIndex\
    \ = index.encodedOffset + 4\n            let newChar = alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)]\n            encryptedString.append(newChar)\n        }\n\
    \    }\n    return encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b3815556c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b381524d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b381524d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b381524d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b381524cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b3815380ec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b3815339660 String.subscript.getter
    + 34

    7    tmpyh42uw1i                        0x0000559558fce0ef <unavailable> + 8431

    8    tmpyh42uw1i                        0x0000559558fcd9fd <unavailable> + 6653

    9    libc.so.6                          0x00002b3815742460 __libc_start_main +
    245

    10   tmpyh42uw1i                        0x0000559558fcd2e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824798
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for char in s {\n        result += String(UnicodeScalar(UInt8(char.asciiValue!)\
    \ + 2 * 2)!)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\"\
    )\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\n\
    assert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s:\
    \ \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmp971w9fzm.swift:14:72: error: cannot force unwrap value of non-optional\
    \ type 'UnicodeScalar' (aka 'Unicode.Scalar')\n        result += String(UnicodeScalar(UInt8(char.asciiValue!)\
    \ + 2 * 2)!)\n                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^\n\
    \                                                                       \n"
  stdout: ''
  timestamp: 1659824800
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let charIndex = alphabet.indexOf(char)\n\
    \        let encryptedCharIndex = (charIndex! + (2 * 2)) % alphabet.count\n  \
    \      encryptedString.append(alphabet[encryptedCharIndex])\n    }\n    return\
    \ encryptedString\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\"\
    ) == \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpyhljilh6.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpyhljilh6.swift:14:25:\
    \ error: cannot find 'alphabet' in scope\n        let charIndex = alphabet.indexOf(char)\n\
    \                        ^~~~~~~~\n/tmp/tmpyhljilh6.swift:15:59: error: cannot\
    \ find 'alphabet' in scope\n        let encryptedCharIndex = (charIndex! + (2\
    \ * 2)) % alphabet.count\n                                                   \
    \       ^~~~~~~~\n/tmp/tmpyhljilh6.swift:16:32: error: cannot find 'alphabet'\
    \ in scope\n        encryptedString.append(alphabet[encryptedCharIndex])\n   \
    \                            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1659824798
- exit_code: -4
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encrypted = \"\"\n    for char in\
    \ s {\n        let index = alphabet.index(of: char)\n        let newIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n        encrypted.append(alphabet[newIndex])\n    }\n    return\
    \ encrypted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(encrypt(s: \"hi\") ==\
    \ \"lm\")\nassert(encrypt(s: \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s:\
    \ \"gf\") == \"kj\")\nassert(encrypt(s: \"et\") == \"ix\")\nassert(encrypt(s:\
    \ \"faewfawefaewg\") == \"jeiajeaijeiak\")\nassert(encrypt(s: \"hellomyfriend\"\
    ) == \"lippsqcjvmirh\")\nassert(encrypt(s: \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
    ) == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\nassert(encrypt(s: \"\
    a\") == \"e\")"
  status: Exception
  stderr: 'tmp3po1jkrn/tmp3po1jkrn.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac966598c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac96628fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac96628f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac96628e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3po1jkrn                        0x00005627f8106687 <unavailable> + 5767

    5    libc.so.6                          0x00002ac966784460 __libc_start_main +
    245

    6    tmp3po1jkrn                        0x00005627f81062c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1659824797
- exit_code: 1
  program: "\n/// Create a function encrypt that takes a string as an argument and\n\
    /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
    \ should be rotated in a manner such that the letters \n/// shift down by two\
    \ multiplied to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n\
    /// encrypt('asdfghjkl') returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n\
    /// encrypt('et') returns 'ix'\nfunc encrypt(s: String) -> String {\n    var result\
    \ = \"\"\n    for c in s.characters {\n        let unicode = c.unicodeScalars.first!.value\n\
    \        let newUnicode = unicode + 2 * 2\n        let newCharacter = Character(UnicodeScalar(newUnicode))\n\
    \        result.append(newCharacter)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s: \"asdfghjkl\"\
    ) == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s: \"\
    et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\")\n\
    assert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
    \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
    )\nassert(encrypt(s: \"a\") == \"e\")"
  status: SyntaxError
  stderr: "/tmp/tmpm6kal86y.swift:13:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpm6kal86y.swift:16:38:\
    \ error: value of optional type 'UnicodeScalar?' (aka 'Optional<Unicode.Scalar>')\
    \ must be unwrapped to a value of type 'UnicodeScalar' (aka 'Unicode.Scalar')\n\
    \        let newCharacter = Character(UnicodeScalar(newUnicode))\n           \
    \                          ^\n/tmp/tmpm6kal86y.swift:16:38: note: coalesce using\
    \ '??' to provide a default when the optional value contains 'nil'\n        let\
    \ newCharacter = Character(UnicodeScalar(newUnicode))\n                      \
    \               ^\n                                                          \
    \     ?? <#default value#>\n/tmp/tmpm6kal86y.swift:16:38: note: force-unwrap using\
    \ '!' to abort execution if the optional value contains 'nil'\n        let newCharacter\
    \ = Character(UnicodeScalar(newUnicode))\n                                   \
    \  ^\n                                                              !\n"
  stdout: ''
  timestamp: 1659824798
