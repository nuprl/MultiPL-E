language: swift
name: HumanEval_0_has_close_elements
results:
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var close_elements = false\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                close_elements = true\n            }\n      \
    \  }\n    }\n    return close_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count - 1 {\n      \
    \  var j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpntwbt7wa/tmpntwbt7wa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b036c79ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b036c491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b036c491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b036c4907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntwbt7wa                        0x000056041a0c250e <unavailable> + 5390

    5    libc.so.6                          0x00002b036c986460 __libc_start_main +
    245

    6    tmpntwbt7wa                        0x000056041a0c2139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n    for i\
    \ in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count-1\
    \ {\n        if sortedNumbers[i+1] - sortedNumbers[i] < threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var numbers = numbers.sorted()\n    for i in 0..<numbers.count\
    \ - 1 {\n        if numbers[i + 1] - numbers[i] < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var result = false\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                result = true\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 0\n    while i < numbers.count\
    \ {\n        j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count-1\
    \ {\n        if sorted[i+1] - sorted[i] < threshold {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpntwbt7wa/tmpntwbt7wa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b036c79ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b036c491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b036c491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b036c4907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntwbt7wa                        0x000056041a0c250e <unavailable> + 5390

    5    libc.so.6                          0x00002b036c986460 __libc_start_main +
    245

    6    tmpntwbt7wa                        0x000056041a0c2139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count\
    \ - 1 {\n        if sorted[i + 1] - sorted[i] < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted = numbers.sorted()\n    for i in 1..<sorted.count\
    \ {\n        if sorted[i] - sorted[i - 1] < threshold {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpntwbt7wa/tmpntwbt7wa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b036c79ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b036c491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b036c491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b036c4907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntwbt7wa                        0x000056041a0c250e <unavailable> + 5390

    5    libc.so.6                          0x00002b036c986460 __libc_start_main +
    245

    6    tmpntwbt7wa                        0x000056041a0c2139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count-1\
    \ {\n        if sortedNumbers[i+1] - sortedNumbers[i] < threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count-1\
    \ {\n        if sortedNumbers[i+1] - sortedNumbers[i] < threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var hasCloseElements = false\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                hasCloseElements = true\n            }\n    \
    \    }\n    }\n    return hasCloseElements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count {\n        var\
    \ j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count - 1 {\n      \
    \  var j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count-1\
    \ {\n        if sortedNumbers[i+1] - sortedNumbers[i] < threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if abs(sorted_numbers[i] - sorted_numbers[i + 1]) < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var hasCloseElements = false\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                hasCloseElements = true\n            }\n    \
    \    }\n    }\n    return hasCloseElements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 1..<sortedNumbers.count\
    \ {\n        if sortedNumbers[i] - sortedNumbers[i - 1] < threshold {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    var i = 0\n\
    \    while i < sortedNumbers.count - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i\
    \ + 1]) < threshold {\n            return true\n        }\n        i += 1\n  \
    \  }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count - 1 {\n      \
    \  var j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count\
    \ - 1 {\n        if sorted[i + 1] - sorted[i] < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in 0..<numbers.count\
    \ {\n            if i != j && abs(numbers[i] - numbers[j]) < threshold {\n   \
    \             return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count {\n        var\
    \ j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if sorted_numbers[i+1] - sorted_numbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count-1\
    \ {\n        if sortedNumbers[i+1] - sortedNumbers[i] < threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpntwbt7wa/tmpntwbt7wa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b036c79ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b036c491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b036c491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b036c4907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntwbt7wa                        0x000056041a0c250e <unavailable> + 5390

    5    libc.so.6                          0x00002b036c986460 __libc_start_main +
    245

    6    tmpntwbt7wa                        0x000056041a0c2139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    // TODO: Implement this function\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpyfbxt6av/tmpyfbxt6av.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02c0c05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02c08fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02c08fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02c08fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfbxt6av                        0x0000564875fa237e <unavailable> + 4990

    5    libc.so.6                          0x00002b02c0df1460 __libc_start_main +
    245

    6    tmpyfbxt6av                        0x0000564875fa1fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count-1\
    \ {\n        if sorted[i+1] - sorted[i] < threshold {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count-1\
    \ {\n        if sortedNumbers[i+1] - sortedNumbers[i] < threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var min_distance = Double.infinity\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < min_distance {\n                min_distance\
    \ = distance\n            }\n        }\n    }\n    return min_distance < threshold\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in 0..<numbers.count\
    \ {\n            if i != j && abs(numbers[i] - numbers[j]) < threshold {\n   \
    \             return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in 0..<numbers.count\
    \ {\n            if i != j && abs(numbers[i] - numbers[j]) < threshold {\n   \
    \             return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var has_close_elements = false\n    var i = 0\n    while\
    \ i < numbers.count - 1 && !has_close_elements {\n        var j = i + 1\n    \
    \    while j < numbers.count && !has_close_elements {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                has_close_elements = true\n   \
    \         }\n            j += 1\n        }\n        i += 1\n    }\n    return\
    \ has_close_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count\
    \ - 1 {\n        if sorted[i + 1] - sorted[i] < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count - 1 {\n      \
    \  var j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var result = false\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                result = true\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var has_close_elements = false\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                has_close_elements = true\n            }\n  \
    \      }\n    }\n    return has_close_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    // TODO: Implement me!\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp1w142xcu/tmp1w142xcu.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3966230c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3965f27b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3965f27988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3965f267b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1w142xcu                        0x000055fb6e3ef37e <unavailable> + 4990

    5    libc.so.6                          0x00002b396641c460 __libc_start_main +
    245

    6    tmp1w142xcu                        0x000055fb6e3eefa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count\
    \ - 1 {\n        if abs(sorted[i] - sorted[i + 1]) < threshold {\n           \
    \ return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count-1\
    \ {\n        if abs(sorted[i] - sorted[i+1]) < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n    for i\
    \ in 0..<numbers.count - 1 {\n        if abs(numbers[i] - numbers[i + 1]) < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var has_close_elements = false\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                has_close_elements = true\n            }\n  \
    \      }\n    }\n    return has_close_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var result = false\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                result = true\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count - 1 {\n      \
    \  var j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count {\n        var\
    \ j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    if numbers.count <= 1 {\n        return false\n    }\n\
    \    var sorted = numbers.sorted()\n    for i in 0..<sorted.count-1 {\n      \
    \  if sorted[i+1] - sorted[i] < threshold {\n            return true\n       \
    \ }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count {\n        var\
    \ j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count {\n        var\
    \ j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    var i = 0\n\
    \    while i < sorted_numbers.count - 1 {\n        if sorted_numbers[i+1] - sorted_numbers[i]\
    \ < threshold {\n            return true\n        }\n        i += 1\n    }\n \
    \   return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count-1\
    \ {\n        if abs(sorted[i] - sorted[i+1]) < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count-1\
    \ {\n        if sortedNumbers[i+1] - sortedNumbers[i] < threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ && j < numbers.count {\n        if abs(numbers[i] - numbers[j]) < threshold\
    \ {\n            return true\n        }\n        if numbers[i] < numbers[j] {\n\
    \            i += 1\n        } else {\n            j += 1\n        }\n    }\n\
    \    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmptfy1246u/tmptfy1246u.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b247f3b4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b247f0abb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b247f0ab988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b247f0aa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfy1246u                        0x0000558b1b66f611 <unavailable> + 5649

    5    libc.so.6                          0x00002b247f5a0460 __libc_start_main +
    245

    6    tmptfy1246u                        0x0000558b1b66f139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n    for i\
    \ in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var close_elements = false\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                close_elements = true\n            }\n      \
    \  }\n    }\n    return close_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count\
    \ - 1 {\n        if sorted[i + 1] - sorted[i] < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count-1\
    \ {\n        if sortedNumbers[i+1] - sortedNumbers[i] < threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count - 1 {\n        for j in i\
    \ + 1..<numbers.count {\n            if abs(numbers[i] - numbers[j]) < threshold\
    \ {\n                return true\n            }\n        }\n    }\n    return\
    \ false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count {\n        var\
    \ j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count\
    \ - 1 {\n        if sorted[i + 1] - sorted[i] < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var result = false\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                result = true\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpntwbt7wa/tmpntwbt7wa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b036c79ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b036c491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b036c491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b036c4907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntwbt7wa                        0x000056041a0c250e <unavailable> + 5390

    5    libc.so.6                          0x00002b036c986460 __libc_start_main +
    245

    6    tmpntwbt7wa                        0x000056041a0c2139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpntwbt7wa/tmpntwbt7wa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b036c79ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b036c491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b036c491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b036c4907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntwbt7wa                        0x000056041a0c250e <unavailable> + 5390

    5    libc.so.6                          0x00002b036c986460 __libc_start_main +
    245

    6    tmpntwbt7wa                        0x000056041a0c2139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpntwbt7wa/tmpntwbt7wa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b036c79ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b036c491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b036c491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b036c4907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntwbt7wa                        0x000056041a0c250e <unavailable> + 5390

    5    libc.so.6                          0x00002b036c986460 __libc_start_main +
    245

    6    tmpntwbt7wa                        0x000056041a0c2139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count - 1 {\n      \
    \  var j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count {\n        var\
    \ j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if abs(sorted_numbers[i] - sorted_numbers[i + 1]) < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count - 1 {\n      \
    \  var j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 1..<sorted_numbers.count\
    \ {\n        if sorted_numbers[i] - sorted_numbers[i - 1] < threshold {\n    \
    \        return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count-1\
    \ {\n        if sortedNumbers[i+1] - sortedNumbers[i] < threshold {\n        \
    \    return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count {\n        var\
    \ j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count\
    \ - 1 {\n        if sorted[i + 1] - sorted[i] < threshold {\n            return\
    \ true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n    for i\
    \ in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var has_close_elements = false\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                has_close_elements = true\n            }\n  \
    \      }\n    }\n    return has_close_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n    for i\
    \ in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count-1\
    \ {\n        if abs(sortedNumbers[i] - sortedNumbers[i+1]) < threshold {\n   \
    \         return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if abs(sortedNumbers[i] - sortedNumbers[i + 1]) < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n    for i\
    \ in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted(by: <)\n    for i\
    \ in 0..<sortedNumbers.count - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i]\
    \ < threshold {\n            return true\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n    for i\
    \ in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var min_distance = Double.infinity\n    for i in 0..<numbers.count\
    \ - 1 {\n        for j in i + 1..<numbers.count {\n            let distance =\
    \ abs(numbers[i] - numbers[j])\n            if distance < min_distance {\n   \
    \             min_distance = distance\n            }\n        }\n    }\n    return\
    \ min_distance < threshold\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if sorted_numbers[i+1] - sorted_numbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n    for i\
    \ in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 1..<sortedNumbers.count\
    \ {\n        if sortedNumbers[i] - sortedNumbers[i - 1] < threshold {\n      \
    \      return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2],\
    \ threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var close = false\n    for i in 0..<numbers.count-1 {\n\
    \        if abs(numbers[i] - numbers[i+1]) < threshold {\n            close =\
    \ true\n        }\n    }\n    return close\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp5q4wkao9/tmp5q4wkao9.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa199e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa196e0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa196e0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa196df7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5q4wkao9                        0x00005614fb00e894 <unavailable> + 6292

    5    libc.so.6                          0x00002afa19bd5460 __libc_start_main +
    245

    6    tmp5q4wkao9                        0x00005614fb00e2c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            if abs(numbers[i] - numbers[j]) < threshold {\n             \
    \   return true\n            }\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count {\n        var\
    \ j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var close = false\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                close = true\n            }\n        }\n    }\n\
    \    return close\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var numbers = numbers\n    numbers.sort()\n    for i\
    \ in 0..<numbers.count - 1 {\n        if numbers[i + 1] - numbers[i] < threshold\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    while i < numbers.count - 1 {\n      \
    \  var j = i + 1\n        while j < numbers.count {\n            if abs(numbers[i]\
    \ - numbers[j]) < threshold {\n                return true\n            }\n  \
    \          j += 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    for i in 0..<numbers.count {\n        for j in 0..<numbers.count\
    \ {\n            if i != j && abs(numbers[i] - numbers[j]) < threshold {\n   \
    \             return true\n            }\n        }\n    }\n    return false\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var result = false\n    for i in 0..<numbers.count {\n\
    \        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                result = true\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var result = false\n    for i in 0..<numbers.count {\n\
    \        for j in 0..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                result = true\n            }\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmp87_1t4gd/tmp87_1t4gd.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abfb36c2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abfb33b9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abfb33b9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abfb33b87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87_1t4gd                        0x00005610581637a1 <unavailable> + 6049

    5    libc.so.6                          0x00002abfb38ae460 __libc_start_main +
    245

    6    tmp87_1t4gd                        0x00005610581632c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted = numbers.sorted()\n    for i in 0..<sorted.count-1\
    \ {\n        if sorted[i+1] - sorted[i] < threshold {\n            return true\n\
    \        }\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sorted_numbers = numbers.sorted()\n    for i in 0..<sorted_numbers.count\
    \ - 1 {\n        if sorted_numbers[i + 1] - sorted_numbers[i] < threshold {\n\
    \            return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpntwbt7wa/tmpntwbt7wa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b036c79ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b036c491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b036c491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b036c4907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntwbt7wa                        0x000056041a0c250e <unavailable> + 5390

    5    libc.so.6                          0x00002b036c986460 __libc_start_main +
    245

    6    tmpntwbt7wa                        0x000056041a0c2139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: -4
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: Exception
  stderr: 'tmpntwbt7wa/tmpntwbt7wa.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b036c79ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b036c491b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b036c491988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b036c4907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpntwbt7wa                        0x000056041a0c250e <unavailable> + 5390

    5    libc.so.6                          0x00002b036c986460 __libc_start_main +
    245

    6    tmpntwbt7wa                        0x000056041a0c2139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var has_close_elements = false\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                has_close_elements = true\n            }\n  \
    \      }\n    }\n    return has_close_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2], threshold:\
    \ 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var sortedNumbers = numbers.sorted()\n    for i in 0..<sortedNumbers.count\
    \ - 1 {\n        if sortedNumbers[i + 1] - sortedNumbers[i] < threshold {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0, 2.0,\
    \ 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
- exit_code: 0
  program: "\n/// Check if in given list of numbers, are any two numbers closer to\
    \ each other than\n/// given threshold.\n/// >>> has_close_elements([1.0, 2.0,\
    \ 3.0], 0.5)\n/// False\n/// >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0,\
    \ 2.0], 0.3)\n/// True\nfunc has_close_elements(numbers: [Double], threshold:\
    \ Double) -> Bool {\n    var i = 0\n    var j = 1\n    while i < numbers.count\
    \ - 1 {\n        while j < numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < threshold {\n                return true\n            }\n            j +=\
    \ 1\n        }\n        i += 1\n        j = i + 1\n    }\n    return false\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(has_close_elements(numbers: [1.0, 2.0, 3.9, 4.0,\
    \ 5.0, 2.2], threshold: 0.3) == true)\nassert(has_close_elements(numbers: [1.0,\
    \ 2.0, 3.9, 4.0, 5.0, 2.2], threshold: 0.05) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.95) == true)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0], threshold: 0.8) == false)\nassert(has_close_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0], threshold: 0.1) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 1.0) == true)\nassert(has_close_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1], threshold: 0.5) == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013378
