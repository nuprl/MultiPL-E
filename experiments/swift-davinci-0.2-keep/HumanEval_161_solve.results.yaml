language: swift
name: HumanEval_161_solve
results:
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    guard !s.isEmpty else { return s }\n    var result = \"\"\n\
    \    for char in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpt_v5v5i4/tmpt_v5v5i4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae0b967ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae0b9371b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae0b9371988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae0b93707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpt_v5v5i4                        0x00005611690438d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ae0b9866460 __libc_start_main +
    245

    6    tmpt_v5v5i4                        0x0000561169043429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        result = String(s.reversed())\n    } else\
    \ {\n        result = s.map { $0.isLetter ? $0.toggle() : $0 }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpwm3dtesk.swift:17:20: error: cannot assign value of type '[String.Element]'\
    \ (aka 'Array<Character>') to type 'String'\n        result = s.map { $0.isLetter\
    \ ? $0.toggle() : $0 }\n                 ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpwm3dtesk.swift:17:43: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggle'\n        result = s.map { $0.isLetter ? $0.toggle() :\
    \ $0 }\n                                       ~~ ^~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vsunhig.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4vsunhig.swift:16:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return s.characters.map {\n        if $0.isLetter {\n     \
    \       return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n        }\n\
    \        return $0\n    }.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmv6094qn.swift:16:16: error: cannot convert return expression of\
    \ type 'String.Element' (aka 'Character') to return type 'String'\n        return\
    \ $0\n               ^~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            if c.isUppercase {\n                result.append(c.lowercased())\n\
    \            } else {\n                result.append(c.uppercased())\n       \
    \     }\n        } else {\n            result.append(c)\n        }\n    }\n  \
    \  if result.isEmpty {\n        return String(s.reversed())\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp2zj36_pe/tmp2zj36_pe.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2291865c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b229155cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b229155c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b229155b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2zj36_pe                        0x000055eda06da8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b2291a51460 __libc_start_main +
    245

    6    tmp2zj36_pe                        0x000055eda06da429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return String(s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp7dmvbhub/tmp7dmvbhub.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe967c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe65eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe65e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe65d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7dmvbhub                        0x000055eba66bc8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b4bfeb53460 __libc_start_main +
    245

    6    tmp7dmvbhub                        0x000055eba66bc429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    guard s.rangeOfCharacter(from: CharacterSet.letters) != nil\
    \ else {\n        return String(s.reversed())\n    }\n    var result = \"\"\n\
    \    for char in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpxsgwqnr_.swift:12:36: error: cannot find 'CharacterSet' in scope\n\
    \    guard s.rangeOfCharacter(from: CharacterSet.letters) != nil else {\n    \
    \                               ^~~~~~~~~~~~\n/tmp/tmpxsgwqnr_.swift:12:13: error:\
    \ value of type 'String' has no member 'rangeOfCharacter'\n    guard s.rangeOfCharacter(from:\
    \ CharacterSet.letters) != nil else {\n          ~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return String(s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp7dmvbhub/tmp7dmvbhub.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe967c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe65eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe65e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe65d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7dmvbhub                        0x000055eba66bc8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b4bfeb53460 __libc_start_main +
    245

    6    tmp7dmvbhub                        0x000055eba66bc429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    if s.rangeOfCharacter(from: CharacterSet.letters) == nil {\n\
    \        return String(s.reversed())\n    }\n    var result = \"\"\n    for c\
    \ in s {\n        if c.isLetter {\n            result += c.isUppercase ? c.lowercased()\
    \ : c.uppercased()\n        } else {\n            result += String(c)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmppg6b7362.swift:12:33: error: cannot find 'CharacterSet' in scope\n\
    \    if s.rangeOfCharacter(from: CharacterSet.letters) == nil {\n            \
    \                    ^~~~~~~~~~~~\n/tmp/tmppg6b7362.swift:12:10: error: value\
    \ of type 'String' has no member 'rangeOfCharacter'\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n       ~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return String(s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return String(s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return s.characters.map {\n        if $0.isLetter {\n     \
    \       return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n        }\n\
    \        return $0\n    }.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmv6094qn.swift:16:16: error: cannot convert return expression of\
    \ type 'String.Element' (aka 'Character') to return type 'String'\n        return\
    \ $0\n               ^~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result += c.isUppercase ? c.lowercased() : c.uppercased()\n \
    \       } else {\n            result += String(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp84r1s2qm/tmp84r1s2qm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2462d93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2462a8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2462a8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2462a897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84r1s2qm                        0x0000556a1326a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b2462f7f460 __libc_start_main +
    245

    6    tmp84r1s2qm                        0x0000556a1326a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return s.characters.map {\n        if $0.isLetter {\n     \
    \       return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n        }\n\
    \        return $0\n    }.reduce(\"\", { $0 + String($1) })\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpvhhts768.swift:14:35: error: cannot convert return expression of\
    \ type 'String' to return type 'Character'\n            return $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased()\n                   ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return s.characters.reduce(\"\") {\n        $1.isLetter ? $0\
    \ + String($1).lowercased() : $0 + String($1)\n    }.characters.reversed().reduce(\"\
    \") {\n        $1.isLetter ? $0 + String($1).uppercased() : $0 + String($1)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpls_l1y77.swift:12:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reduce(\"\") {\n             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpls_l1y77.swift:14:7:\
    \ error: 'characters' is unavailable: Please use String directly\n    }.characters.reversed().reduce(\"\
    \") {\n      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824542
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return s.characters.map {\n        if $0.isLetter {\n     \
    \       return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n        }\n\
    \        return $0\n    }.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmv6094qn.swift:16:16: error: cannot convert return expression of\
    \ type 'String.Element' (aka 'Character') to return type 'String'\n        return\
    \ $0\n               ^~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result += String(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result += String(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpa5hesmm0/tmpa5hesmm0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afac60e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afac5dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afac5ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afac5ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5hesmm0                        0x0000561b79d9d9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002afac62d2460 __libc_start_main +
    245

    6    tmpa5hesmm0                        0x0000561b79d9d549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp8co08tkq/tmp8co08tkq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adce26fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adce23f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adce23f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adce23f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8co08tkq                        0x000055e4d467d8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002adce28e9460 __libc_start_main +
    245

    6    tmp8co08tkq                        0x000055e4d467d429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return s.characters.map {\n        if $0.isLetter {\n     \
    \       return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n        }\n\
    \        return $0\n    }.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmv6094qn.swift:16:16: error: cannot convert return expression of\
    \ type 'String.Element' (aka 'Character') to return type 'String'\n        return\
    \ $0\n               ^~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result += c.isUppercase ? c.lowercased() : c.uppercased()\n \
    \       } else {\n            result += String(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp84r1s2qm/tmp84r1s2qm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2462d93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2462a8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2462a8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2462a897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84r1s2qm                        0x0000556a1326a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b2462f7f460 __libc_start_main +
    245

    6    tmp84r1s2qm                        0x0000556a1326a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp8co08tkq/tmp8co08tkq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adce26fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adce23f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adce23f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adce23f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8co08tkq                        0x000055e4d467d8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002adce28e9460 __libc_start_main +
    245

    6    tmp8co08tkq                        0x000055e4d467d429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    if s.rangeOfCharacter(from: CharacterSet.letters) == nil {\n\
    \        return String(s.reversed())\n    }\n    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpbfc5_vhe.swift:12:33: error: cannot find 'CharacterSet' in scope\n\
    \    if s.rangeOfCharacter(from: CharacterSet.letters) == nil {\n            \
    \                    ^~~~~~~~~~~~\n/tmp/tmpbfc5_vhe.swift:12:10: error: value\
    \ of type 'String' has no member 'rangeOfCharacter'\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n       ~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vsunhig.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4vsunhig.swift:16:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return String(s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp8co08tkq/tmp8co08tkq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adce26fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adce23f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adce23f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adce23f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8co08tkq                        0x000055e4d467d8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002adce28e9460 __libc_start_main +
    245

    6    tmp8co08tkq                        0x000055e4d467d429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return s.characters.map { char in\n        if char.isLetter\
    \ {\n            return char.isUppercase ? char.lowercase : char.uppercase\n \
    \       }\n        return char\n    }.reduce(\"\") { $0 + String($1) }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpxnb6u8db.swift:14:44: error: value of type 'String.Element' (aka\
    \ 'Character') has no member 'lowercase'\n            return char.isUppercase\
    \ ? char.lowercase : char.uppercase\n                                      ~~~~\
    \ ^~~~~~~~~\n/tmp/tmpxnb6u8db.swift:14:61: error: value of type 'String.Element'\
    \ (aka 'Character') has no member 'uppercase'\n            return char.isUppercase\
    \ ? char.lowercase : char.uppercase\n                                        \
    \               ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824541
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    return letters.isEmpty\
    \ ? String(s.reversed()) : String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return s.characters.map {\n        if $0.isLetter {\n     \
    \       return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n        }\n\
    \        return $0\n    }.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmv6094qn.swift:16:16: error: cannot convert return expression of\
    \ type 'String.Element' (aka 'Character') to return type 'String'\n        return\
    \ $0\n               ^~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return s.characters.reduce(\"\") {\n        $1.isLetter ? $0\
    \ + String($1).lowercased() : $0 + String($1)\n    }.reversed()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmrxb5dh0.swift:14:7: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    }.reversed()\n\
    ~~~~~~^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824544
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    if s.isEmpty {\n        return s\n    }\n    var result = \"\
    \"\n    for char in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpa5wqvxo_/tmpa5wqvxo_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac11e3ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac11e0e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac11e0e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac11e0e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5wqvxo_                        0x000055b355c498d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ac11e5d7460 __libc_start_main +
    245

    6    tmpa5wqvxo_                        0x000055b355c49429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: Exception
  stderr: 'tmptek2lu8n/tmptek2lu8n.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8868f3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8868c33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8868c33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8868c327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptek2lu8n                        0x0000560f01d2f717 <unavailable> + 5911

    5    libc.so.6                          0x00002b8869128460 __libc_start_main +
    245

    6    tmptek2lu8n                        0x0000560f01d2f269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return String(s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    guard s.rangeOfCharacter(from: CharacterSet.letters) != nil\
    \ else {\n        return String(s.reversed())\n    }\n    return String(s.map\
    \ { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") ==\
    \ \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") ==\
    \ \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp6dr2e0lo.swift:12:36: error: cannot find 'CharacterSet' in scope\n\
    \    guard s.rangeOfCharacter(from: CharacterSet.letters) != nil else {\n    \
    \                               ^~~~~~~~~~~~\n/tmp/tmp6dr2e0lo.swift:12:13: error:\
    \ value of type 'String' has no member 'rangeOfCharacter'\n    guard s.rangeOfCharacter(from:\
    \ CharacterSet.letters) != nil else {\n          ~ ^~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? s.reversed() : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp4tg_4qma.swift:24:27: error: cannot convert return expression of\
    \ type 'ReversedCollection<String>' to return type 'String'\n    return result.isEmpty\
    \ ? s.reversed() : result\n           ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vsunhig.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4vsunhig.swift:16:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return s.characters.map {\n        if $0.isLetter {\n     \
    \       return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n        }\n\
    \        return $0\n    }.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmv6094qn.swift:16:16: error: cannot convert return expression of\
    \ type 'String.Element' (aka 'Character') to return type 'String'\n        return\
    \ $0\n               ^~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.uppercased() == String(char) ? char.lowercased()\
    \ : char.uppercased())\n        } else {\n            result += String(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp8obkq6sq/tmp8obkq6sq.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc444d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc441c8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc441c8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc441c77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8obkq6sq                        0x000055f930f98997 <unavailable> + 6551

    5    libc.so.6                          0x00002acc446bd460 __libc_start_main +
    245

    6    tmp8obkq6sq                        0x000055f930f984e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp8co08tkq/tmp8co08tkq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adce26fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adce23f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adce23f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adce23f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8co08tkq                        0x000055e4d467d8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002adce28e9460 __libc_start_main +
    245

    6    tmp8co08tkq                        0x000055e4d467d429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return String(s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return String(s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            if c.isUppercase {\n                result.append(c.lowercased())\n\
    \            } else {\n                result.append(c.uppercased())\n       \
    \     }\n        } else {\n            result.append(c)\n        }\n    }\n  \
    \  return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpx1ge4gou/tmpx1ge4gou.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33ef2b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33eefa8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33eefa8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33eefa77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx1ge4gou                        0x000055904c2358d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b33ef49d460 __libc_start_main +
    245

    6    tmpx1ge4gou                        0x000055904c235429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    guard s.contains(where: { $0.isLetter }) else { return String(s.reversed())\
    \ }\n    return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpwodh_bwh.swift:13:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\"\
    ) == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\"\
    ) == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp7dmvbhub/tmp7dmvbhub.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4bfe967c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4bfe65eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4bfe65e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4bfe65d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7dmvbhub                        0x000055eba66bc8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b4bfeb53460 __libc_start_main +
    245

    6    tmp7dmvbhub                        0x000055eba66bc429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    if s.rangeOfCharacter(from: CharacterSet.letters)\
    \ == nil {\n        result = String(s.reversed())\n    } else {\n        for char\
    \ in s {\n            if char.isLetter {\n                if char.isUpper {\n\
    \                    result.append(char.lowercased())\n                } else\
    \ {\n                    result.append(char.uppercased())\n                }\n\
    \            } else {\n                result.append(char)\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpnsbatehq.swift:13:33: error: cannot find 'CharacterSet' in scope\n\
    \    if s.rangeOfCharacter(from: CharacterSet.letters) == nil {\n            \
    \                    ^~~~~~~~~~~~\n/tmp/tmpnsbatehq.swift:13:10: error: value\
    \ of type 'String' has no member 'rangeOfCharacter'\n    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n       ~ ^~~~~~~~~~~~~~~~\n/tmp/tmpnsbatehq.swift:18:25:\
    \ error: value of type 'Character' has no member 'isUpper'\n                if\
    \ char.isUpper {\n                   ~~~~ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp8co08tkq/tmp8co08tkq.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adce26fdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adce23f4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adce23f4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adce23f37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8co08tkq                        0x000055e4d467d8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002adce28e9460 __libc_start_main +
    245

    6    tmp8co08tkq                        0x000055e4d467d429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    if s.isEmpty {\n        return s\n    }\n    var result = \"\
    \"\n    for char in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpa5wqvxo_/tmpa5wqvxo_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac11e3ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac11e0e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac11e0e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac11e0e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5wqvxo_                        0x000055b355c498d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ac11e5d7460 __libc_start_main +
    245

    6    tmpa5wqvxo_                        0x000055b355c49429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    if s.isEmpty {\n        return s\n    }\n    var result = \"\
    \"\n    for char in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpa5wqvxo_/tmpa5wqvxo_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac11e3ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac11e0e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac11e0e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac11e0e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5wqvxo_                        0x000055b355c498d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ac11e5d7460 __libc_start_main +
    245

    6    tmpa5wqvxo_                        0x000055b355c49429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? String(char).lowercased() : String(char).uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp9r4y28oa/tmp9r4y28oa.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb4a5fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb4a2f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb4a2f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb4a2f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9r4y28oa                        0x0000559612bd98d7 <unavailable> + 6359

    5    libc.so.6                          0x00002adb4a7e6460 __libc_start_main +
    245

    6    tmp9r4y28oa                        0x0000559612bd9429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return s.characters.map {\n        if $0.isLetter {\n     \
    \       return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n        }\n\
    \        return $0\n    }.reduce(\"\", +)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"\
    4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\"\
    )\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\"\
    ) == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpmv6094qn.swift:16:16: error: cannot convert return expression of\
    \ type 'String.Element' (aka 'Character') to return type 'String'\n        return\
    \ $0\n               ^~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.toggleCase() : $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vsunhig.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.toggleCase() : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp4vsunhig.swift:16:37: error: value of type 'String.Element' (aka 'Character')\
    \ has no member 'toggleCase'\n    return s.map { $0.isLetter ? $0.toggleCase()\
    \ : $0 }\n                                 ~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    guard s.rangeOfCharacter(from: .letters) != nil else {\n  \
    \      return String(s.reversed())\n    }\n    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp4neypdcx.swift:12:13: error: value of type 'String' has no member\
    \ 'rangeOfCharacter'\n    guard s.rangeOfCharacter(from: .letters) != nil else\
    \ {\n          ~ ^~~~~~~~~~~~~~~~\n/tmp/tmp4neypdcx.swift:12:37: error: cannot\
    \ infer contextual base in reference to member 'letters'\n    guard s.rangeOfCharacter(from:\
    \ .letters) != nil else {\n                                   ~^~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp4fi9qtt3/tmp4fi9qtt3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba094bf9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba0948f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba0948f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0948ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4fi9qtt3                        0x0000561d264db8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ba094de5460 __libc_start_main +
    245

    6    tmp4fi9qtt3                        0x0000561d264db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    var letters = \"\"\n    for char in\
    \ s {\n        if char.isLetter {\n            letters.append(char)\n        }\
    \ else {\n            result.append(char)\n        }\n    }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    for char in letters {\n \
    \       if char.isUppercase {\n            result.append(char.lowercased())\n\
    \        } else {\n            result.append(char.uppercased())\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(solve(s: \"\
    AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpmc64mpd_/tmpmc64mpd_.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4fe9948c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4fe963fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4fe963f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4fe963e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmc64mpd_                        0x000055e40bd33b11 <unavailable> + 6929

    5    libc.so.6                          0x00002b4fe9b34460 __libc_start_main +
    245

    6    tmpmc64mpd_                        0x000055e40bd33429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    return s.characters.reduce(\"\") {\n        if $1.isLetter\
    \ {\n            return $0 + String($1).lowercased().uppercased()\n        }\n\
    \        return $0 + String($1)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\"\
    )\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\n\
    assert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") ==\
    \ \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\"\
    ) == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpdwr7u8hs.swift:12:14: error: 'characters' is unavailable: Please\
    \ use String directly\n    return s.characters.reduce(\"\") {\n             ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result += c.isUppercase ? c.lowercased() : c.uppercased()\n \
    \       } else {\n            result += String(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmp84r1s2qm/tmp84r1s2qm.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2462d93c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2462a8ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2462a8a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2462a897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp84r1s2qm                        0x0000556a1326a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b2462f7f460 __libc_start_main +
    245

    6    tmp84r1s2qm                        0x0000556a1326a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = CharacterSet.letters\n    var result = \"\"\n\
    \    for char in s {\n        if letters.contains(char.unicodeScalars.first!)\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmpuioq1q_w.swift:12:19: error: cannot find 'CharacterSet' in scope\n\
    \    let letters = CharacterSet.letters\n                  ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    if s.isEmpty {\n        return s\n    }\n    var result = \"\
    \"\n    for char in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
    \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s:\
    \ \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpa5wqvxo_/tmpa5wqvxo_.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac11e3ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac11e0e2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac11e0e2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac11e0e17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5wqvxo_                        0x000055b355c498d7 <unavailable> + 6359

    5    libc.so.6                          0x00002ac11e5d7460 __libc_start_main +
    245

    6    tmpa5wqvxo_                        0x000055b355c49429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            if c.isUppercase {\n                result.append(c.lowercased())\n\
    \            } else {\n                result.append(c.uppercased())\n       \
    \     }\n        } else {\n            result.append(c)\n        }\n    }\n  \
    \  return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpx1ge4gou/tmpx1ge4gou.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33ef2b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33eefa8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33eefa8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33eefa77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx1ge4gou                        0x000055904c2358d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b33ef49d460 __libc_start_main +
    245

    6    tmpx1ge4gou                        0x000055904c235429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            if c.isUppercase {\n                result.append(c.lowercased())\n\
    \            } else {\n                result.append(c.uppercased())\n       \
    \     }\n        } else {\n            result.append(c)\n        }\n    }\n  \
    \  return result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpx1ge4gou/tmpx1ge4gou.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b33ef2b1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33eefa8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33eefa8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33eefa77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx1ge4gou                        0x000055904c2358d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b33ef49d460 __libc_start_main +
    245

    6    tmpx1ge4gou                        0x000055904c235429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    let chars = s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n    return String(chars)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(solve(s:\
    \ \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s:\
    \ \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s:\
    \ \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s:\
    \ \"#$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: 1
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(solve(s: \"AsDf\") == \"\
    aSdF\")\nassert(solve(s: \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"\
    AB\")\nassert(solve(s: \"#a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\nassert(solve(s: \"#6@2\") == \"2@6#\")\nassert(solve(s: \"\
    #$a^D\") == \"#$A^d\")\nassert(solve(s: \"#ccc\") == \"#CCC\")"
  status: SyntaxError
  stderr: "/tmp/tmp06xcy1rd.swift:16:14: error: cannot convert return expression of\
    \ type '[String.Element]' (aka 'Array<Character>') to return type 'String'\n \
    \   return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }\n           ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for c in s {\n        if c.isLetter\
    \ {\n            result += String(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result += String(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpa5hesmm0/tmpa5hesmm0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afac60e6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afac5dddb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afac5ddd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afac5ddc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpa5hesmm0                        0x0000561b79d9d9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002afac62d2460 __libc_start_main +
    245

    6    tmpa5hesmm0                        0x0000561b79d9d549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: 0
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    var result = \"\"\n    for\
    \ char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmpvr7dwm1h/tmpvr7dwm1h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6ca35fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6ca056b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6ca056988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6ca0557b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvr7dwm1h                        0x000055937f18c9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002ae6ca54b460 __libc_start_main +
    245

    6    tmpvr7dwm1h                        0x000055937f18c549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
- exit_code: -4
  program: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n/// otherwise keep it as it is.\n\
    /// If the string contains no letters, reverse the string.\n/// The function should\
    \ return the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n\
    /// solve(\"ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String)\
    \ -> String {\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s: \"1234\"\
    ) == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"#a@C\")\
    \ == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
    \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
    \ \"#ccc\") == \"#CCC\")"
  status: Exception
  stderr: 'tmprc3a8xt0/tmprc3a8xt0.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aff4f55cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aff4f253b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aff4f253988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aff4f2527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprc3a8xt0                        0x000055764e16a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002aff4f748460 __libc_start_main +
    245

    6    tmprc3a8xt0                        0x000055764e16a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824540
