language: swift
name: HumanEval_22_filter_integers
results:
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int_value = value as? Int {\n            result.append(int_value)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int_value = value as? Int {\n            result.append(int_value)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 1
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return filter_integers(values: values, invert: false)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: SyntaxError
  stderr: "/tmp/tmp4s0ljah8.swift:8:52: error: extra argument 'invert' in call\n \
    \   return filter_integers(values: values, invert: false)\n                  \
    \        ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~\n"
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let int_value = value as? Int {\n            result.append(int_value)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int = value as? Int {\n            result.append(int)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let value = value as? Int {\n            result.append(value)\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let int_value = value as? Int {\n            result.append(int_value)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let int_value = value as? Int {\n            result.append(int_value)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let intValue = value as? Int {\n            result.append(intValue)\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result = [Int]()\n    for value in values {\n        if\
    \ let int_value = value as? Int {\n            result.append(int_value)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.filter { $0 is Int }.map { $0 as! Int }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable]) ==\
    \ [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    return values.compactMap { $0 as? Int }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(filter_integers(values: [] as [AnyHashable]) == [] as\
    \ [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
    \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
    \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
- exit_code: 0
  program: "\n/// Filter given list of any python values only for integers\n/// >>>\
    \ filter_integers(['a', 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3,\
    \ 'abc', {}, []])\n/// [1, 2, 3]\nfunc filter_integers(values: [AnyHashable])\
    \ -> [Int] {\n    var result: [Int] = []\n    for value in values {\n        if\
    \ let int_value = value as? Int {\n            result.append(int_value)\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(filter_integers(values:\
    \ [] as [AnyHashable]) == [] as [Int])\nassert(filter_integers(values: [4, [:]\
    \ as [AnyHashable : AnyHashable], [] as [AnyHashable], 23.2, 9, \"adasd\"]) ==\
    \ [4, 9])\nassert(filter_integers(values: [3, \"c\", 3, 3, \"a\", \"b\"]) == [3,\
    \ 3, 3])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824734
