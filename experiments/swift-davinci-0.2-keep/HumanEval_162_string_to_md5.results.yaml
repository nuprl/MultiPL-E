language: swift
name: HumanEval_162_string_to_md5
results:
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    data.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n    }\n    return digest.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpo044ulql.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpo044ulql.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpo044ulql.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo044ulql.swift:12:13:\
    \ error: cannot find 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n            ^~~~~~\n/tmp/tmpo044ulql.swift:12:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n                                   ^~~~~~~\n/tmp/tmpo044ulql.swift:14:31:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digest.map { String(format: \"%02x\", $0) }.joined()\n           \
    \                   ^~~~~~~\n                               repeating       count:\
    \ \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let cstr = text.cString(using:\
    \ String.Encoding.utf8)\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(cstr!, len, result)\n    let hash = NSMutableString()\n    for i in\
    \ 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n   \
    \ result.deinitialize()\n    return String(format: hash as String)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp1q54q8x0.swift:9:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmp1q54q8x0.swift:9:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmp1q54q8x0.swift:10:33:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp1q54q8x0.swift:10:61:\
    \ error: type 'String' has no member 'Encoding'\n    let len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \  ~~~~~~ ^~~~~~~~\n/tmp/tmp1q54q8x0.swift:11:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp1q54q8x0.swift:13:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(cstr!, len, result)\n    ^~~~~~\n/tmp/tmp1q54q8x0.swift:14:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmp1q54q8x0.swift:19:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let cstr = text.cString(using:\
    \ String.Encoding.utf8)\n    let data = NSData(bytes: cstr!, length: text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let result = data.md5()\n    return result.map {\
    \ String(format: \"%02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp37t6j9gl.swift:9:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmp37t6j9gl.swift:9:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmp37t6j9gl.swift:10:16:\
    \ error: cannot find 'NSData' in scope\n    let data = NSData(bytes: cstr!, length:\
    \ text.lengthOfBytes(using: String.Encoding.utf8))\n               ^~~~~~\n/tmp/tmp37t6j9gl.swift:10:50:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let data =\
    \ NSData(bytes: cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \                                            ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp37t6j9gl.swift:10:78:\
    \ error: type 'String' has no member 'Encoding'\n    let data = NSData(bytes:\
    \ cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                                                            ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp37t6j9gl.swift:12:31: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    return result.map { String(format: \"%02hhx\"\
    , $0) }.joined()\n                              ^~~~~~~\n                    \
    \           repeating         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let cstr = text.cString(using:\
    \ String.Encoding.utf8)\n    let data = NSData(bytes: cstr!, length: text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let result = data.md5()\n    return result.map {\
    \ String(format: \"%02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp37t6j9gl.swift:9:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmp37t6j9gl.swift:9:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmp37t6j9gl.swift:10:16:\
    \ error: cannot find 'NSData' in scope\n    let data = NSData(bytes: cstr!, length:\
    \ text.lengthOfBytes(using: String.Encoding.utf8))\n               ^~~~~~\n/tmp/tmp37t6j9gl.swift:10:50:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let data =\
    \ NSData(bytes: cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \                                            ~~~~ ^~~~~~~~~~~~~\n/tmp/tmp37t6j9gl.swift:10:78:\
    \ error: type 'String' has no member 'Encoding'\n    let data = NSData(bytes:\
    \ cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                                                            ~~~~~~ ^~~~~~~~\n\
    /tmp/tmp37t6j9gl.swift:12:31: error: incorrect argument labels in call (have 'format:_:',\
    \ expected 'repeating:count:')\n    return result.map { String(format: \"%02hhx\"\
    , $0) }.joined()\n                              ^~~~~~~\n                    \
    \           repeating         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = Data(text.utf8)\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprt0_l8d0.swift:9:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmprt0_l8d0.swift:11:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmprt0_l8d0.swift:12:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmprt0_l8d0.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmprt0_l8d0.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = Data(text.utf8)\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprt0_l8d0.swift:9:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmprt0_l8d0.swift:11:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmprt0_l8d0.swift:12:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmprt0_l8d0.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmprt0_l8d0.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let utf8_text = text.cString(using:\
    \ String.Encoding.utf8)\n    let utf8_text_len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digest_len = Int(CC_MD5_DIGEST_LENGTH)\n   \
    \ let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digest_len)\n\
    \    CC_MD5(utf8_text!, utf8_text_len, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digest_len {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpz0if0a28.swift:9:26: error: value of type 'String' has no member\
    \ 'cString'\n    let utf8_text = text.cString(using: String.Encoding.utf8)\n \
    \                   ~~~~ ^~~~~~~\n/tmp/tmpz0if0a28.swift:9:48: error: type 'String'\
    \ has no member 'Encoding'\n    let utf8_text = text.cString(using: String.Encoding.utf8)\n\
    \                                        ~~~~~~ ^~~~~~~~\n/tmp/tmpz0if0a28.swift:10:43:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let utf8_text_len\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpz0if0a28.swift:10:71:\
    \ error: type 'String' has no member 'Encoding'\n    let utf8_text_len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \            ~~~~~~ ^~~~~~~~\n/tmp/tmpz0if0a28.swift:11:26: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n    let digest_len = Int(CC_MD5_DIGEST_LENGTH)\n\
    \                         ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0if0a28.swift:13:5: error:\
    \ cannot find 'CC_MD5' in scope\n    CC_MD5(utf8_text!, utf8_text_len, result)\n\
    \    ^~~~~~\n/tmp/tmpz0if0a28.swift:14:16: error: cannot find 'NSMutableString'\
    \ in scope\n    let hash = NSMutableString()\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpz0if0a28.swift:19:18: error: extraneous argument label 'format:' in call\n\
    \    return String(format: hash as String)\n                 ^~~~~~~~~\n     \
    \             \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl50552br.swift:9:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpl50552br.swift:9:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:10:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:10:64: error:\
    \ type 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:11:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:13:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpl50552br.swift:14:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:19:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let digest = MD5(data)\n    return digest.map { String(format:\
    \ \"%02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmp5edb7uwj.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp5edb7uwj.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp5edb7uwj.swift:10:18: error: cannot find 'MD5'\
    \ in scope\n    let digest = MD5(data)\n                 ^~~\n/tmp/tmp5edb7uwj.swift:11:31:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digest.map { String(format: \"%02hhx\", $0) }.joined()\n         \
    \                     ^~~~~~~\n                               repeating      \
    \   count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl50552br.swift:9:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpl50552br.swift:9:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:10:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:10:64: error:\
    \ type 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:11:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:13:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpl50552br.swift:14:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:19:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl50552br.swift:9:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpl50552br.swift:9:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:10:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:10:64: error:\
    \ type 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:11:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:13:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpl50552br.swift:14:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:19:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl50552br.swift:9:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpl50552br.swift:9:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:10:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:10:64: error:\
    \ type 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:11:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:13:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpl50552br.swift:14:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:19:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    data.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n    }\n    return digest.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpo044ulql.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpo044ulql.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpo044ulql.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo044ulql.swift:12:13:\
    \ error: cannot find 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n            ^~~~~~\n/tmp/tmpo044ulql.swift:12:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n                                   ^~~~~~~\n/tmp/tmpo044ulql.swift:14:31:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digest.map { String(format: \"%02x\", $0) }.joined()\n           \
    \                   ^~~~~~~\n                               repeating       count:\
    \ \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let ctext = text.cString(using:\
    \ String.Encoding.utf8)\n    let ctext_len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digest_len = Int(CC_MD5_DIGEST_LENGTH)\n   \
    \ let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digest_len)\n\
    \    CC_MD5(ctext!, ctext_len, result)\n    let hash = NSMutableString()\n   \
    \ for i in 0..<digest_len {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpz1za4o22.swift:9:22: error: value of type 'String' has no member\
    \ 'cString'\n    let ctext = text.cString(using: String.Encoding.utf8)\n     \
    \           ~~~~ ^~~~~~~\n/tmp/tmpz1za4o22.swift:9:44: error: type 'String' has\
    \ no member 'Encoding'\n    let ctext = text.cString(using: String.Encoding.utf8)\n\
    \                                    ~~~~~~ ^~~~~~~~\n/tmp/tmpz1za4o22.swift:10:39:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let ctext_len\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                       ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpz1za4o22.swift:10:67: error:\
    \ type 'String' has no member 'Encoding'\n    let ctext_len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \        ~~~~~~ ^~~~~~~~\n/tmp/tmpz1za4o22.swift:11:26: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digest_len = Int(CC_MD5_DIGEST_LENGTH)\n                 \
    \        ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz1za4o22.swift:13:5: error: cannot find\
    \ 'CC_MD5' in scope\n    CC_MD5(ctext!, ctext_len, result)\n    ^~~~~~\n/tmp/tmpz1za4o22.swift:14:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpz1za4o22.swift:19:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n    var digest = [UInt8](repeating:\
    \ 0, count: length)\n    \n    if let d = text.data(using: String.Encoding.utf8)\
    \ {\n        _ = d.withUnsafeBytes { (body: UnsafePointer<UInt8>) in\n       \
    \     CC_MD5(body, CC_LONG(d.count), &digest)\n        }\n    }\n    \n    return\
    \ (0..<length).reduce(\"\") {\n        $0 + String(format: \"%02x\", digest[$1])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(string_to_md5(text: \"\
    Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpa81ia_nz.swift:6:22: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let length = Int(CC_MD5_DIGEST_LENGTH)\n                     ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpa81ia_nz.swift:9:21: error: value of type 'String' has no member 'data'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n               ~~~~\
    \ ^~~~\n/tmp/tmpa81ia_nz.swift:9:40: error: type 'String' has no member 'Encoding'\n\
    \    if let d = text.data(using: String.Encoding.utf8) {\n                   \
    \             ~~~~~~ ^~~~~~~~\n/tmp/tmpa81ia_nz.swift:11:13: error: cannot find\
    \ 'CC_MD5' in scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n   \
    \         ^~~~~~\n/tmp/tmpa81ia_nz.swift:11:26: error: cannot find 'CC_LONG' in\
    \ scope\n            CC_MD5(body, CC_LONG(d.count), &digest)\n               \
    \          ^~~~~~~\n/tmp/tmpa81ia_nz.swift:16:20: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n        $0 + String(format:\
    \ \"%02x\", digest[$1])\n                   ^~~~~~~\n                    repeating\
    \       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = Data(text.utf8)\n\
    \    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer) -> [UInt8]\
    \ in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmprt0_l8d0.swift:9:16: error: cannot find 'Data' in scope\n    let\
    \ data = Data(text.utf8)\n               ^~~~\n/tmp/tmprt0_l8d0.swift:11:53: error:\
    \ cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n        var hash = [UInt8](repeating:\
    \ 0, count: Int(CC_MD5_DIGEST_LENGTH))\n                                     \
    \               ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmprt0_l8d0.swift:12:9: error: cannot\
    \ find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmprt0_l8d0.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmprt0_l8d0.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let utf8_text = text.cString(using:\
    \ String.Encoding.utf8)\n    let utf8_text_len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digest_len = Int(CC_MD5_DIGEST_LENGTH)\n   \
    \ let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digest_len)\n\
    \    CC_MD5(utf8_text!, utf8_text_len, result)\n    let hash = NSMutableString()\n\
    \    for i in 0..<digest_len {\n        hash.appendFormat(\"%02x\", result[i])\n\
    \    }\n    result.deinitialize()\n    return String(format: hash as String)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpz0if0a28.swift:9:26: error: value of type 'String' has no member\
    \ 'cString'\n    let utf8_text = text.cString(using: String.Encoding.utf8)\n \
    \                   ~~~~ ^~~~~~~\n/tmp/tmpz0if0a28.swift:9:48: error: type 'String'\
    \ has no member 'Encoding'\n    let utf8_text = text.cString(using: String.Encoding.utf8)\n\
    \                                        ~~~~~~ ^~~~~~~~\n/tmp/tmpz0if0a28.swift:10:43:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let utf8_text_len\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                           ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpz0if0a28.swift:10:71:\
    \ error: type 'String' has no member 'Encoding'\n    let utf8_text_len = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \            ~~~~~~ ^~~~~~~~\n/tmp/tmpz0if0a28.swift:11:26: error: cannot find\
    \ 'CC_MD5_DIGEST_LENGTH' in scope\n    let digest_len = Int(CC_MD5_DIGEST_LENGTH)\n\
    \                         ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpz0if0a28.swift:13:5: error:\
    \ cannot find 'CC_MD5' in scope\n    CC_MD5(utf8_text!, utf8_text_len, result)\n\
    \    ^~~~~~\n/tmp/tmpz0if0a28.swift:14:16: error: cannot find 'NSMutableString'\
    \ in scope\n    let hash = NSMutableString()\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpz0if0a28.swift:19:18: error: extraneous argument label 'format:' in call\n\
    \    return String(format: hash as String)\n                 ^~~~~~~~~\n     \
    \             \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let message = text.data(using:.utf8)!\n\
    \    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n  \
    \  _ = message.withUnsafeBytes { (bytes: UnsafePointer<UInt8>) -> Void in\n  \
    \      CC_MD5(bytes, CC_LONG(message.count), &digest)\n    }\n    return digest.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpf6upohyy.swift:9:24: error: value of type 'String' has no member\
    \ 'data'\n    let message = text.data(using:.utf8)!\n                  ~~~~ ^~~~\n\
    /tmp/tmpf6upohyy.swift:9:36: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let message = text.data(using:.utf8)!\n              \
    \                    ~^~~~\n/tmp/tmpf6upohyy.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpf6upohyy.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(message.count),\
    \ &digest)\n        ^~~~~~\n/tmp/tmpf6upohyy.swift:12:23: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes, CC_LONG(message.count), &digest)\n         \
    \             ^~~~~~~\n/tmp/tmpf6upohyy.swift:14:31: error: incorrect argument\
    \ labels in call (have 'format:_:', expected 'repeating:count:')\n    return digest.map\
    \ { String(format: \"%02hhx\", $0) }.joined()\n                              ^~~~~~~\n\
    \                               repeating         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let md5 = MD5(text)\n\
    \    return md5.calculate()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpi7xjx8h8.swift:9:15: error: cannot find 'MD5' in scope\n    let\
    \ md5 = MD5(text)\n              ^~~\n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl50552br.swift:9:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpl50552br.swift:9:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:10:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:10:64: error:\
    \ type 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:11:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:13:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpl50552br.swift:14:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:19:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    data.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n    }\n    let hexBytes = digest.map { String(format: \"%02hhx\",\
    \ $0) }\n    return hexBytes.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp4qgvvlf1.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp4qgvvlf1.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp4qgvvlf1.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4qgvvlf1.swift:12:13:\
    \ error: cannot find 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n            ^~~~~~\n/tmp/tmp4qgvvlf1.swift:12:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n                                   ^~~~~~~\n/tmp/tmp4qgvvlf1.swift:14:39:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    let hexBytes = digest.map { String(format: \"%02hhx\", $0) }\n          \
    \                            ^~~~~~~\n                                       repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let digest = MD5(data).calculate()\n    return digest.map { String(format:\
    \ \"%02hhx\", $0) }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmputxkrecu.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmputxkrecu.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmputxkrecu.swift:10:18: error: cannot find 'MD5'\
    \ in scope\n    let digest = MD5(data).calculate()\n                 ^~~\n/tmp/tmputxkrecu.swift:11:31:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digest.map { String(format: \"%02hhx\", $0) }.joined()\n         \
    \                     ^~~~~~~\n                               repeating      \
    \   count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let textBytes = text.cString(using:\
    \ .utf8)\n    let textBytesLength = text.lengthOfBytes(using: .utf8)\n    let\
    \ digestLength = Int(CC_MD5_DIGEST_LENGTH)\n    let result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity:\
    \ digestLength)\n    CC_MD5(textBytes, CC_LONG(textBytesLength), result)\n   \
    \ let hash = NSMutableString()\n    for i in 0..<digestLength {\n        hash.appendFormat(\"\
    %02x\", result[i])\n    }\n    result.deinitialize()\n    return String(format:\
    \ hash as String)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(string_to_md5(text:\
    \ \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\")\nassert(string_to_md5(text:\
    \ \"\") == nil)\nassert(string_to_md5(text: \"A B C\") == \"0ef78513b0cb8cef12743f5aeb35f888\"\
    )\nassert(string_to_md5(text: \"password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\"\
    )"
  status: SyntaxError
  stderr: "/tmp/tmpjid5ung2.swift:9:26: error: value of type 'String' has no member\
    \ 'cString'\n    let textBytes = text.cString(using: .utf8)\n                \
    \    ~~~~ ^~~~~~~\n/tmp/tmpjid5ung2.swift:9:42: error: cannot infer contextual\
    \ base in reference to member 'utf8'\n    let textBytes = text.cString(using:\
    \ .utf8)\n                                        ~^~~~\n/tmp/tmpjid5ung2.swift:10:32:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let textBytesLength\
    \ = text.lengthOfBytes(using: .utf8)\n                          ~~~~ ^~~~~~~~~~~~~\n\
    /tmp/tmpjid5ung2.swift:10:54: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let textBytesLength = text.lengthOfBytes(using: .utf8)\n\
    \                                                    ~^~~~\n/tmp/tmpjid5ung2.swift:11:28:\
    \ error: cannot find 'CC_MD5_DIGEST_LENGTH' in scope\n    let digestLength = Int(CC_MD5_DIGEST_LENGTH)\n\
    \                           ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjid5ung2.swift:13:5:\
    \ error: cannot find 'CC_MD5' in scope\n    CC_MD5(textBytes, CC_LONG(textBytesLength),\
    \ result)\n    ^~~~~~\n/tmp/tmpjid5ung2.swift:13:23: error: cannot find 'CC_LONG'\
    \ in scope\n    CC_MD5(textBytes, CC_LONG(textBytesLength), result)\n        \
    \              ^~~~~~~\n/tmp/tmpjid5ung2.swift:14:16: error: cannot find 'NSMutableString'\
    \ in scope\n    let hash = NSMutableString()\n               ^~~~~~~~~~~~~~~\n\
    /tmp/tmpjid5ung2.swift:19:18: error: extraneous argument label 'format:' in call\n\
    \    return String(format: hash as String)\n                 ^~~~~~~~~\n     \
    \             \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let digest = data.withUnsafeBytes { (bytes: UnsafePointer<UInt8>)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return digest.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp__w_uxbi.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp__w_uxbi.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp__w_uxbi.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp__w_uxbi.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmp__w_uxbi.swift:12:23: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n              \
    \        ^~~~~~~\n/tmp/tmp__w_uxbi.swift:15:31: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return digest.map\
    \ { String(format: \"%02x\", $0) }.joined()\n                              ^~~~~~~\n\
    \                               repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) ->\
    \ [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0jfp2j94.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp0jfp2j94.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp0jfp2j94.swift:11:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0jfp2j94.swift:12:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmp0jfp2j94.swift:12:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmp0jfp2j94.swift:15:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let md5 = data.withUnsafeBytes { (bytes: UnsafePointer<Data>) ->\
    \ [UInt8] in\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(data.count), &hash)\n        return hash\n    }\n\
    \    return md5.map { String(format: \"%02x\", $0) }.joined()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp0jfp2j94.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmp0jfp2j94.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmp0jfp2j94.swift:11:62: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash: [UInt8] = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                             ^~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmp0jfp2j94.swift:12:9: error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes,\
    \ CC_LONG(data.count), &hash)\n        ^~~~~~\n/tmp/tmp0jfp2j94.swift:12:23: error:\
    \ cannot find 'CC_LONG' in scope\n        CC_MD5(bytes, CC_LONG(data.count), &hash)\n\
    \                      ^~~~~~~\n/tmp/tmp0jfp2j94.swift:15:28: error: incorrect\
    \ argument labels in call (have 'format:_:', expected 'repeating:count:')\n  \
    \  return md5.map { String(format: \"%02x\", $0) }.joined()\n                \
    \           ^~~~~~~\n                            repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl50552br.swift:9:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpl50552br.swift:9:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:10:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:10:64: error:\
    \ type 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:11:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:13:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpl50552br.swift:14:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:19:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let cstr = text.cString(using:\
    \ String.Encoding.utf8)\n    let data = NSData(bytes: cstr!, length: text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let result = data.md5()\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpzzy1o363.swift:9:21: error: value of type 'String' has no member\
    \ 'cString'\n    let cstr = text.cString(using: String.Encoding.utf8)\n      \
    \         ~~~~ ^~~~~~~\n/tmp/tmpzzy1o363.swift:9:43: error: type 'String' has\
    \ no member 'Encoding'\n    let cstr = text.cString(using: String.Encoding.utf8)\n\
    \                                   ~~~~~~ ^~~~~~~~\n/tmp/tmpzzy1o363.swift:10:16:\
    \ error: cannot find 'NSData' in scope\n    let data = NSData(bytes: cstr!, length:\
    \ text.lengthOfBytes(using: String.Encoding.utf8))\n               ^~~~~~\n/tmp/tmpzzy1o363.swift:10:50:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let data =\
    \ NSData(bytes: cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n\
    \                                            ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpzzy1o363.swift:10:78:\
    \ error: type 'String' has no member 'Encoding'\n    let data = NSData(bytes:\
    \ cstr!, length: text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                                                            ~~~~~~ ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let str = text.cString(using:\
    \ String.Encoding.utf8)\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n    let\
    \ result = UnsafeMutablePointer<CUnsignedChar>.allocate(capacity: digestLen)\n\
    \    CC_MD5(str!, strLen, result)\n    let hash = NSMutableString()\n    for i\
    \ in 0..<digestLen {\n        hash.appendFormat(\"%02x\", result[i])\n    }\n\
    \    result.deinitialize()\n    return String(format: hash as String)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpl50552br.swift:9:20: error: value of type 'String' has no member\
    \ 'cString'\n    let str = text.cString(using: String.Encoding.utf8)\n       \
    \       ~~~~ ^~~~~~~\n/tmp/tmpl50552br.swift:9:42: error: type 'String' has no\
    \ member 'Encoding'\n    let str = text.cString(using: String.Encoding.utf8)\n\
    \                                  ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:10:36:\
    \ error: value of type 'String' has no member 'lengthOfBytes'\n    let strLen\
    \ = CUnsignedInt(text.lengthOfBytes(using: String.Encoding.utf8))\n          \
    \                    ~~~~ ^~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:10:64: error:\
    \ type 'String' has no member 'Encoding'\n    let strLen = CUnsignedInt(text.lengthOfBytes(using:\
    \ String.Encoding.utf8))\n                                                   \
    \     ~~~~~~ ^~~~~~~~\n/tmp/tmpl50552br.swift:11:25: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    let digestLen = Int(CC_MD5_DIGEST_LENGTH)\n                  \
    \      ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:13:5: error: cannot find 'CC_MD5'\
    \ in scope\n    CC_MD5(str!, strLen, result)\n    ^~~~~~\n/tmp/tmpl50552br.swift:14:16:\
    \ error: cannot find 'NSMutableString' in scope\n    let hash = NSMutableString()\n\
    \               ^~~~~~~~~~~~~~~\n/tmp/tmpl50552br.swift:19:18: error: extraneous\
    \ argument label 'format:' in call\n    return String(format: hash as String)\n\
    \                 ^~~~~~~~~\n                  \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let text_data = text.data(using:\
    \ .utf8)!\n    let md5_data = text_data.withUnsafeBytes { (bytes: UnsafePointer<Data>)\
    \ -> [UInt8] in\n        var md5 = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes, CC_LONG(text_data.count), &md5)\n        return md5\n \
    \   }\n    return md5_data.map({ String(format: \"%02x\", $0) }).joined()\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpjqmqwxvd.swift:9:26: error: value of type 'String' has no member\
    \ 'data'\n    let text_data = text.data(using: .utf8)!\n                    ~~~~\
    \ ^~~~\n/tmp/tmpjqmqwxvd.swift:9:39: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let text_data = text.data(using: .utf8)!\n           \
    \                          ~^~~~\n/tmp/tmpjqmqwxvd.swift:11:52: error: cannot\
    \ find 'CC_MD5_DIGEST_LENGTH' in scope\n        var md5 = [UInt8](repeating: 0,\
    \ count: Int(CC_MD5_DIGEST_LENGTH))\n                                        \
    \           ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpjqmqwxvd.swift:12:9: error: cannot find\
    \ 'CC_MD5' in scope\n        CC_MD5(bytes, CC_LONG(text_data.count), &md5)\n \
    \       ^~~~~~\n/tmp/tmpjqmqwxvd.swift:12:23: error: cannot find 'CC_LONG' in\
    \ scope\n        CC_MD5(bytes, CC_LONG(text_data.count), &md5)\n             \
    \         ^~~~~~~\n/tmp/tmpjqmqwxvd.swift:15:33: error: incorrect argument labels\
    \ in call (have 'format:_:', expected 'repeating:count:')\n    return md5_data.map({\
    \ String(format: \"%02x\", $0) }).joined()\n                                ^~~~~~~\n\
    \                                 repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \    data.withUnsafeBytes {\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n    }\n    return digest.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpo044ulql.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpo044ulql.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpo044ulql.swift:10:51: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digest = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                  ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpo044ulql.swift:12:13:\
    \ error: cannot find 'CC_MD5' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n            ^~~~~~\n/tmp/tmpo044ulql.swift:12:36: error: cannot find\
    \ 'CC_LONG' in scope\n        _ = CC_MD5($0.baseAddress, CC_LONG(data.count),\
    \ &digest)\n                                   ^~~~~~~\n/tmp/tmpo044ulql.swift:14:31:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digest.map { String(format: \"%02x\", $0) }.joined()\n           \
    \                   ^~~~~~~\n                               repeating       count:\
    \ \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let data = text.data(using:\
    \ .utf8)!\n    let hash = data.withUnsafeBytes { (bytes: UnsafeRawBufferPointer)\
    \ -> [UInt8] in\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n        return\
    \ hash\n    }\n    return hash.map { String(format: \"%02x\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmpaq57ujly.swift:9:21: error: value of type 'String' has no member\
    \ 'data'\n    let data = text.data(using: .utf8)!\n               ~~~~ ^~~~\n\
    /tmp/tmpaq57ujly.swift:9:34: error: cannot infer contextual base in reference\
    \ to member 'utf8'\n    let data = text.data(using: .utf8)!\n                \
    \                ~^~~~\n/tmp/tmpaq57ujly.swift:11:53: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n        var hash = [UInt8](repeating: 0, count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                                                    ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpaq57ujly.swift:12:9:\
    \ error: cannot find 'CC_MD5' in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count),\
    \ &hash)\n        ^~~~~~\n/tmp/tmpaq57ujly.swift:12:35: error: cannot find 'CC_LONG'\
    \ in scope\n        CC_MD5(bytes.baseAddress, CC_LONG(data.count), &hash)\n  \
    \                                ^~~~~~~\n/tmp/tmpaq57ujly.swift:15:29: error:\
    \ incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return hash.map { String(format: \"%02x\", $0) }.joined()\n             \
    \               ^~~~~~~\n                             repeating       count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "\n/// Given a string 'text', return its md5 hash equivalent string.\n\
    /// If 'text' is an empty string, return None.\n/// >>> string_to_md5('Hello world')\
    \ == '3e25960a79dbc69b674cd4ec67a72c62'\nfunc string_to_md5(text: String) -> String?\
    \ {\n    if text.isEmpty {\n        return nil\n    }\n    let messageData = text.data(using:.utf8)!\n\
    \    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \n    _ = digestData.withUnsafeMutableBytes\
    \ {digestBytes in\n        messageData.withUnsafeBytes {messageBytes in\n    \
    \        CC_MD5(messageBytes, CC_LONG(messageData.count), digestBytes)\n     \
    \   }\n    }\n    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(string_to_md5(text: \"Hello world\") == \"3e25960a79dbc69b674cd4ec67a72c62\"\
    )\nassert(string_to_md5(text: \"\") == nil)\nassert(string_to_md5(text: \"A B\
    \ C\") == \"0ef78513b0cb8cef12743f5aeb35f888\")\nassert(string_to_md5(text: \"\
    password\") == \"5f4dcc3b5aa765d61d8327deb882cf99\")"
  status: SyntaxError
  stderr: "/tmp/tmp66w3k3dq.swift:9:28: error: value of type 'String' has no member\
    \ 'data'\n    let messageData = text.data(using:.utf8)!\n                    \
    \  ~~~~ ^~~~\n/tmp/tmp66w3k3dq.swift:9:40: error: cannot infer contextual base\
    \ in reference to member 'utf8'\n    let messageData = text.data(using:.utf8)!\n\
    \                                      ~^~~~\n/tmp/tmp66w3k3dq.swift:10:22: error:\
    \ cannot find 'Data' in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n\
    \                     ^~~~\n/tmp/tmp66w3k3dq.swift:10:38: error: cannot find 'CC_MD5_DIGEST_LENGTH'\
    \ in scope\n    var digestData = Data(count: Int(CC_MD5_DIGEST_LENGTH))\n    \
    \                                 ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp66w3k3dq.swift:14:13:\
    \ error: cannot find 'CC_MD5' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n            ^~~~~~\n/tmp/tmp66w3k3dq.swift:14:34: error: cannot\
    \ find 'CC_LONG' in scope\n            CC_MD5(messageBytes, CC_LONG(messageData.count),\
    \ digestBytes)\n                                 ^~~~~~~\n/tmp/tmp66w3k3dq.swift:17:35:\
    \ error: incorrect argument labels in call (have 'format:_:', expected 'repeating:count:')\n\
    \    return digestData.map { String(format: \"%02hhx\", $0) }.joined()\n     \
    \                             ^~~~~~~\n                                   repeating\
    \         count: \n"
  stdout: ''
  timestamp: 1660013424
