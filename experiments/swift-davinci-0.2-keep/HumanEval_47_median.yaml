name: HumanEval_47_median
language: swift
prompt: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1, 2,\
  \ 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc median(l:\
  \ [Int]) -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
  \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
  \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
completions: ["    let sorted = l.sorted()\n    let count = sorted.count\n    if count\
    \ % 2 == 0 {\n        let mid = count / 2\n        return Double(sorted[mid] +\
    \ sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let n = sorted.count\n    if n % 2 ==\
    \ 0 {\n        return Double(sorted[n / 2] + sorted[n / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[n / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let n = sorted.count\n    if n % 2 ==\
    \ 0 {\n        return Double(sorted[n / 2] + sorted[n / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[n / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let count = sorted.count\n    if count % 2 == 0 {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    let sortedList = l.sorted()\n    let mid = sortedList.count\
    \ / 2\n    if sortedList.count % 2 == 0 {\n        return Double(sortedList[mid]\
    \ + sortedList[mid - 1]) / 2\n    } else {\n        return Double(sortedList[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    if sorted.count % 2 == 0 {\n        return Double(sorted[sorted.count\
    \ / 2] + sorted[sorted.count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }",
  "    let sorted = l.sorted()\n    let count = sorted.count\n    if count % 2 ==\
    \ 0 {\n        let a = sorted[count / 2 - 1]\n        let b = sorted[count / 2]\n\
    \        return Double(a + b) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sorted = l.sorted()\n    let count = sorted.count\n    if count % 2 == 0 {\n\
    \        return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[count / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let middle = sorted.count / 2\n    if sorted.count % 2 ==\
    \ 0 {\n        return Double(sorted[middle] + sorted[middle - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[middle])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ middle = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }", "    let sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n      \
    \  return Double(sorted[sorted.count / 2] + sorted[sorted.count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(sorted[sorted.count / 2])\n    }", "    let\
    \ sorted = l.sorted()\n    let count = l.count\n    if count % 2 == 0 {\n    \
    \    return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[count / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let count = sorted.count\n    if count % 2 == 0 {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sorted = l.sorted()\n    let count = sorted.count\n    let mid = count / 2\n\
    \    if count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let count = sorted.count\n    if count\
    \ % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count / 2 - 1])\
    \ / 2\n    } else {\n        return Double(sorted[count / 2])\n    }", "    let\
    \ sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2\
    \ == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n      \
    \  return Double(sorted[sorted.count / 2] + sorted[sorted.count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(sorted[sorted.count / 2])\n    }", "    let\
    \ sorted = l.sorted()\n    let count = sorted.count\n    if count % 2 == 0 {\n\
    \        return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[count / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let count = sorted.count\n    if count % 2 == 0 {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sorted = l.sorted()\n    let n = sorted.count\n    if n % 2 == 0 {\n       \
    \ return Double(sorted[n / 2] + sorted[n / 2 - 1]) / 2\n    } else {\n       \
    \ return Double(sorted[n / 2])\n    }", "    let sortedList = l.sorted()\n   \
    \ let midIndex = sortedList.count / 2\n    if sortedList.count % 2 == 0 {\n  \
    \      return Double(sortedList[midIndex] + sortedList[midIndex - 1]) / 2\n  \
    \  } else {\n        return Double(sortedList[midIndex])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ count = sorted.count\n    if count % 2 == 0 {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2\
    \ == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid - 1] + sorted[mid])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ count = sorted.count\n    if count % 2 == 0 {\n        let left = sorted[count\
    \ / 2 - 1]\n        let right = sorted[count / 2]\n        return Double(left\
    \ + right) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }",
  "    let sorted = l.sorted()\n    let count = sorted.count\n    if count % 2 ==\
    \ 0 {\n        return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(sorted[count / 2])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        let left = sorted[mid\
    \ - 1]\n        let right = sorted[mid]\n        return Double(left + right) /\
    \ 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sortedList = l.sorted()\n  \
    \  let mid = sortedList.count / 2\n    if sortedList.count % 2 == 0 {\n      \
    \  return Double(sortedList[mid] + sortedList[mid - 1]) / 2\n    } else {\n  \
    \      return Double(sortedList[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid-1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let count = sorted.count\n    if count % 2 == 0 {\n      \
    \  return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n\
    \        return Double(sorted[count / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let count = sorted.count\n    if count % 2 == 0 {\n        let left = sorted[count\
    \ / 2 - 1]\n        let right = sorted[count / 2]\n        return Double(left\
    \ + right) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }",
  "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid - 1] + sorted[mid]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sortedList = l.sorted()\n    let mid = sortedList.count / 2\n\
    \    if sortedList.count % 2 == 0 {\n        return Double(sortedList[mid] + sortedList[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sortedList[mid])\n    }", " \
    \   let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ n = sorted.count\n    if n % 2 == 0 {\n        return Double(sorted[n / 2] +\
    \ sorted[n / 2 - 1]) / 2\n    } else {\n        return Double(sorted[n / 2])\n\
    \    }", "    let sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n      \
    \  return Double(sorted[sorted.count / 2] + sorted[sorted.count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(sorted[sorted.count / 2])\n    }", "    let\
    \ sorted = l.sorted()\n    let count = sorted.count\n    if count % 2 == 0 {\n\
    \        return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[count / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let count = sorted.count\n    if count % 2 == 0 {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    let mid = count / 2\n    if count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let count = sorted.count\n    if count % 2 == 0 {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2\
    \ == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[sorted.count / 2]\
    \ + sorted[sorted.count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sorted = l.sorted()\n    let count = sorted.count\n    if count % 2 == 0 {\n\
    \        return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[count / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let count = sorted.count\n    if count\
    \ % 2 == 0 {\n        let mid = count / 2\n        return Double(sorted[mid] +\
    \ sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let middle = sorted.count / 2\n    if sorted.count % 2 ==\
    \ 0 {\n        return Double(sorted[middle] + sorted[middle - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[middle])\n    }", "    let sorted = l.sorted()\n\
    \    let middle = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[middle] + sorted[middle - 1]) / 2\n    } else {\n        return\
    \ Double(sorted[middle])\n    }", "    let sorted = l.sorted()\n    let middle\
    \ = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }", "    let sorted = l.sorted()\n    let middle = sorted.count / 2\n   \
    \ if sorted.count % 2 == 0 {\n        return Double(sorted[middle] + sorted[middle\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n    }", "  \
    \  let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let n = sorted.count\n    if n % 2 == 0 {\n        return Double(sorted[n\
    \ / 2] + sorted[n / 2 - 1]) / 2\n    } else {\n        return Double(sorted[n\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }",
  "    let sorted = l.sorted()\n    let count = sorted.count\n    if count % 2 ==\
    \ 0 {\n        let mid = count / 2\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }", " \
    \   let sorted = l.sorted()\n    let n = sorted.count\n    if n % 2 == 0 {\n \
    \       return Double(sorted[n / 2] + sorted[n / 2 - 1]) / 2\n    } else {\n \
    \       return Double(sorted[n / 2])\n    }", "    let sorted = l.sorted()\n \
    \   let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let middle = sorted.count / 2\n   \
    \ if sorted.count % 2 == 0 {\n        return Double(sorted[middle] + sorted[middle\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n    }", "  \
    \  let sorted = l.sorted()\n    let count = sorted.count\n    if count % 2 ==\
    \ 0 {\n        return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n\
    \    } else {\n        return Double(sorted[count / 2])\n    }", "    let sortedList\
    \ = l.sorted()\n    let mid = sortedList.count / 2\n    if sortedList.count %\
    \ 2 == 0 {\n        return Double(sortedList[mid] + sortedList[mid - 1]) / 2\n\
    \    } else {\n        return Double(sortedList[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let count = sorted.count\n    let mid\
    \ = count / 2\n    if count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sorted = l.sorted()\n    let middle = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[middle] + sorted[middle - 1]) / 2\n\
    \    } else {\n        return Double(sorted[middle])\n    }", "    if l.count\
    \ == 0 {\n        return 0\n    }\n    let sorted = l.sorted()\n    let mid =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let count = sorted.count\n    if count % 2 == 0 {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2\
    \ == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let count = sorted.count\n    if count % 2 == 0 {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }",
  "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid - 1] + sorted[mid]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", '    return 0.0', "    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2\
    \ == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    if l.count == 0 {\n        return 0\n    }\n    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid - 1] + sorted[mid]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let count = sorted.count\n    if count % 2 == 0 {\n      \
    \  return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n\
    \        return Double(sorted[count / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let count = sorted.count\n    if count\
    \ % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count / 2 - 1])\
    \ / 2\n    } else {\n        return Double(sorted[count / 2])\n    }", "    let\
    \ sorted = l.sorted()\n    let count = sorted.count\n    if count % 2 == 0 {\n\
    \        return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[count / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let middle = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[middle] + sorted[middle - 1]) / 2\n    } else {\n        return\
    \ Double(sorted[middle])\n    }", "    let sorted = l.sorted()\n    let count\
    \ = sorted.count\n    if count % 2 == 0 {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let middle = sorted.count /\
    \ 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle] + sorted[middle\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n    }", "  \
    \  let sorted = l.sorted()\n    let n = sorted.count\n    if n % 2 == 0 {\n  \
    \      return Double(sorted[n / 2] + sorted[n / 2 - 1]) / 2\n    } else {\n  \
    \      return Double(sorted[n / 2])\n    }", "    let sorted = l.sorted()\n  \
    \  let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let count = sorted.count\n    if count % 2 == 0 {\n      \
    \  return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n\
    \        return Double(sorted[count / 2])\n    }", "    if l.count % 2 == 0 {\n\
    \        return Double(l[l.count / 2] + l[l.count / 2 - 1]) / 2\n    } else {\n\
    \        return Double(l[l.count / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let middle = sorted.count / 2\n   \
    \ if sorted.count % 2 == 0 {\n        return Double(sorted[middle] + sorted[middle\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n    }", "  \
    \  let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let count = sorted.count\n    if count\
    \ % 2 == 0 {\n        let mid = count / 2\n        return Double(sorted[mid] +\
    \ sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    if l.count == 0 {\n        return\
    \ 0\n    }\n    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let count = sorted.count\n    if count % 2 == 0 {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sorted = l.sorted()\n    let middle = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[middle] + sorted[middle - 1]) / 2\n\
    \    } else {\n        return Double(sorted[middle])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let count = sorted.count\n    if count\
    \ % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count / 2 - 1])\
    \ / 2\n    } else {\n        return Double(sorted[count / 2])\n    }", "    let\
    \ sorted = l.sorted()\n    let count = sorted.count\n    if count % 2 == 0 {\n\
    \        return Double(sorted[count / 2] + sorted[count / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[count / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let count = sorted.count\n    if count\
    \ % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count / 2 - 1])\
    \ / 2\n    } else {\n        return Double(sorted[count / 2])\n    }", "    let\
    \ sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2\
    \ == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[sorted.count / 2]\
    \ + sorted[sorted.count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sortedList = l.sorted()\n    if sortedList.count % 2 == 0 {\n        let mid\
    \ = sortedList.count / 2\n        return Double(sortedList[mid] + sortedList[mid\
    \ - 1]) / 2\n    } else {\n        let mid = sortedList.count / 2\n        return\
    \ Double(sortedList[mid])\n    }", "    let sorted = l.sorted()\n    let mid =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let count = sorted.count\n    if count\
    \ % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count / 2 - 1])\
    \ / 2\n    } else {\n        return Double(sorted[count / 2])\n    }", "    let\
    \ sorted = l.sorted()\n    if sorted.count % 2 == 0 {\n        let mid = sorted.count\
    \ / 2\n        return Double(sorted[mid - 1] + sorted[mid]) / 2\n    } else {\n\
    \        return Double(sorted[sorted.count / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let count = sorted.count\n    if count % 2 == 0 {\n        let mid = count\
    \ / 2\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n\
    \        return Double(sorted[count / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid - 1] + sorted[mid]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ count = sorted.count\n    if count % 2 == 0 {\n        let left = sorted[count\
    \ / 2 - 1]\n        let right = sorted[count / 2]\n        return Double(left\
    \ + right) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }",
  "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let length = sorted.count\n    if length % 2 == 0 {\n    \
    \    return Double(sorted[length / 2] + sorted[length / 2 - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[length / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let count = sorted.count\n    if count % 2 == 0 {\n        return Double(sorted[count\
    \ / 2] + sorted[count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2\
    \ == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[sorted.count / 2]\
    \ + sorted[sorted.count / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count\
    \ / 2])\n    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n\
    \    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let\
    \ sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2\
    \ == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else\
    \ {\n        return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n\
    \    let count = sorted.count\n    if count % 2 == 0 {\n        let mid = count\
    \ / 2\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n\
    \        return Double(sorted[count / 2])\n    }", "    let sorted = l.sorted()\n\
    \    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return\
    \ Double(sorted[mid] + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n\
    \    }", "    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if\
    \ sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }", "    let sorted\
    \ = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n\
    \        return Double(sorted[mid - 1] + sorted[mid]) / 2\n    } else {\n    \
    \    return Double(sorted[mid])\n    }", "    let sorted = l.sorted()\n    let\
    \ mid = sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }"]
stop_tokens:
- "\n}"
