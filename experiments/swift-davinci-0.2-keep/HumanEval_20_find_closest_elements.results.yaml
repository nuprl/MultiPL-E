language: swift
name: HumanEval_20_find_closest_elements
results:
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1zuxcl44/tmp1zuxcl44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77fd807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77fd4feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77fd4fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77fd4fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zuxcl44                        0x000055f3cb01f912 <unavailable> + 6418

    5    libc.so.6                          0x00002b77fd9f3460 __libc_start_main +
    245

    6    tmp1zuxcl44                        0x000055f3cb01f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1zuxcl44/tmp1zuxcl44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77fd807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77fd4feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77fd4fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77fd4fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zuxcl44                        0x000055f3cb01f912 <unavailable> + 6418

    5    libc.so.6                          0x00002b77fd9f3460 __libc_start_main +
    245

    6    tmp1zuxcl44                        0x000055f3cb01f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in 0..<numbers.count {\n            if i != j {\n         \
    \       let distance = abs(numbers[i] - numbers[j])\n                if distance\
    \ < closest_distance {\n                    closest_elements = (numbers[i], numbers[j])\n\
    \                    closest_distance = distance\n                }\n        \
    \    }\n        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk_lskp8p/tmpk_lskp8p.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b91ac8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b917bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b917bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b917be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_lskp8p                        0x000056489feed912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5b91cb4460 __libc_start_main +
    245

    6    tmpk_lskp8p                        0x000056489feed369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (0, 0)\n    var closest_diff:\
    \ Double = Double.infinity\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < closest_diff {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmprbbk05ps/tmprbbk05ps.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7d99ec8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7d99bbfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7d99bbf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7d99bbe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprbbk05ps                        0x00005625d9a63962 <unavailable> + 6498

    5    libc.so.6                          0x00002b7d9a0b4460 __libc_start_main +
    245

    6    tmprbbk05ps                        0x00005625d9a633b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return closest_pair\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpr3dboba2/tmpr3dboba2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7219999c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7219690b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7219690988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721968f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3dboba2                        0x00005563f51bc912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7219b85460 __libc_start_main +
    245

    6    tmpr3dboba2                        0x00005563f51bc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkog4gknl/tmpkog4gknl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88fb0d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88fadc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88fadc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88fadc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkog4gknl                        0x000055e6c3437912 <unavailable> + 6418

    5    libc.so.6                          0x00002b88fb2bd460 __libc_start_main +
    245

    6    tmpkog4gknl                        0x000055e6c3437369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0qmgnidn/tmp0qmgnidn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4ac247c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4abf3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4abf3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4abf3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0qmgnidn                        0x000056385c1b8912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae4ac433460 __libc_start_main +
    245

    6    tmp0qmgnidn                        0x000056385c1b8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkog4gknl/tmpkog4gknl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88fb0d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88fadc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88fadc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88fadc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkog4gknl                        0x000055e6c3437912 <unavailable> + 6418

    5    libc.so.6                          0x00002b88fb2bd460 __libc_start_main +
    245

    6    tmpkog4gknl                        0x000055e6c3437369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var diff\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let newDiff = abs(numbers[i] - numbers[j])\n\
    \            if newDiff < diff {\n                closest = (numbers[i], numbers[j])\n\
    \                diff = newDiff\n            }\n        }\n    }\n    return closest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpos36srcs/tmpos36srcs.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b269ecccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b269e9c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b269e9c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b269e9c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpos36srcs                        0x000056442ba39912 <unavailable> + 6418

    5    libc.so.6                          0x00002b269eeb8460 __libc_start_main +
    245

    6    tmpos36srcs                        0x000056442ba39369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_difference = difference\n            }\n        }\n \
    \   }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7nu9iyyh/tmp7nu9iyyh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c48c01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c488f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c488f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c488f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7nu9iyyh                        0x00005646680cc912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3c48ded460 __libc_start_main +
    245

    6    tmp7nu9iyyh                        0x00005646680cc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var diff\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let newDiff = abs(numbers[i] - numbers[j])\n\
    \            if newDiff < diff {\n                closest = (numbers[i], numbers[j])\n\
    \                diff = newDiff\n            }\n        }\n    }\n    return closest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpos36srcs/tmpos36srcs.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b269ecccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b269e9c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b269e9c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b269e9c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpos36srcs                        0x000056442ba39912 <unavailable> + 6418

    5    libc.so.6                          0x00002b269eeb8460 __libc_start_main +
    245

    6    tmpos36srcs                        0x000056442ba39369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = (numbers[i], numbers[j])\n            }\n  \
    \      }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpn4qfibo9/tmpn4qfibo9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2349a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2346a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2346a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af23469f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn4qfibo9                        0x0000560d81908912 <unavailable> + 6418

    5    libc.so.6                          0x00002af234b95460 __libc_start_main +
    245

    6    tmpn4qfibo9                        0x0000560d81908369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_difference = difference\n            }\n        }\n \
    \   }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7nu9iyyh/tmp7nu9iyyh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c48c01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c488f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c488f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c488f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7nu9iyyh                        0x00005646680cc912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3c48ded460 __libc_start_main +
    245

    6    tmp7nu9iyyh                        0x00005646680cc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference = abs(numbers[0] - numbers[1])\n   \
    \ for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n     \
    \       let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_pair = (numbers[i], numbers[j])\n\
    \                closest_difference = difference\n            }\n        }\n \
    \   }\n    return closest_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp__g9ye1p/tmp__g9ye1p.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7a9c4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7a9946b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7a9946988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae7a99457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__g9ye1p                        0x000055d493d99912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae7a9e3b460 __libc_start_main +
    245

    6    tmp__g9ye1p                        0x000055d493d99369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    if numbers.count < 2 {\n        return (0, 0)\n \
    \   }\n    var closest = (numbers[0], numbers[1])\n    var closest_distance =\
    \ abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for j\
    \ in i+1..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < closest_distance {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_distance = distance\n            }\n  \
    \      }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_vylikwj/tmp_vylikwj.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14348a3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b143459ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b143459a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14345997b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_vylikwj                        0x000055af480ab912 <unavailable> + 6418

    5    libc.so.6                          0x00002b1434a8f460 __libc_start_main +
    245

    6    tmp_vylikwj                        0x000055af480ab369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair: (Double,\
    \ Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj922ho18/tmpj922ho18.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fc1bc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fc18bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fc18bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fc18bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj922ho18                        0x00005583cf8a9962 <unavailable> + 6498

    5    libc.so.6                          0x00002b0fc1db2460 __libc_start_main +
    245

    6    tmpj922ho18                        0x00005583cf8a93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count - 1 {\n        for\
    \ j in i + 1..<numbers.count {\n            let difference = abs(numbers[i] -\
    \ numbers[j])\n            if difference < min_difference {\n                min_difference\
    \ = difference\n                min_pair = (numbers[i], numbers[j])\n        \
    \    }\n        }\n    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpe0q0kazl/tmpe0q0kazl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba325802c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba3254f9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba3254f9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba3254f87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe0q0kazl                        0x0000557efe780962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba3259ee460 __libc_start_main +
    245

    6    tmpe0q0kazl                        0x0000557efe7803b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_diff\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < closest_diff {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp48qwyfe3/tmp48qwyfe3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35de5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35de2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35de2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35de2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48qwyfe3                        0x0000559e33074912 <unavailable> + 6418

    5    libc.so.6                          0x00002b35de7b8460 __libc_start_main +
    245

    6    tmp48qwyfe3                        0x0000559e33074369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ (i+1)..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmplsmmt8ck/tmplsmmt8ck.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b909fe22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b909fb19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b909fb19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b909fb187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsmmt8ck                        0x000055752f50e962 <unavailable> + 6498

    5    libc.so.6                          0x00002b90a000e460 __libc_start_main +
    245

    6    tmplsmmt8ck                        0x000055752f50e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_diff\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < closest_diff {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp48qwyfe3/tmp48qwyfe3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35de5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35de2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35de2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35de2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48qwyfe3                        0x0000559e33074912 <unavailable> + 6418

    5    libc.so.6                          0x00002b35de7b8460 __libc_start_main +
    245

    6    tmp48qwyfe3                        0x0000559e33074369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair: (Double,\
    \ Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj922ho18/tmpj922ho18.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fc1bc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fc18bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fc18bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fc18bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj922ho18                        0x00005583cf8a9962 <unavailable> + 6498

    5    libc.so.6                          0x00002b0fc1db2460 __libc_start_main +
    245

    6    tmpj922ho18                        0x00005583cf8a93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_diff\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < closest_diff {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp48qwyfe3/tmp48qwyfe3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35de5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35de2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35de2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35de2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48qwyfe3                        0x0000559e33074912 <unavailable> + 6418

    5    libc.so.6                          0x00002b35de7b8460 __libc_start_main +
    245

    6    tmp48qwyfe3                        0x0000559e33074369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDiff: Double = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp6ubu07bh/tmp6ubu07bh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb76d7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb76a71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb76a71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb76a707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ubu07bh                        0x0000564d2bc14912 <unavailable> + 6418

    5    libc.so.6                          0x00002acb76f66460 __libc_start_main +
    245

    6    tmp6ubu07bh                        0x0000564d2bc14369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_jnjtqyp/tmp_jnjtqyp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b5f03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b5bfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b5bfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b5bf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jnjtqyp                        0x000055e60ef87912 <unavailable> + 6418

    5    libc.so.6                          0x00002b34b60ef460 __libc_start_main +
    245

    6    tmp_jnjtqyp                        0x000055e60ef87369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDiff: Double = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp6ubu07bh/tmp6ubu07bh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acb76d7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acb76a71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acb76a71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acb76a707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ubu07bh                        0x0000564d2bc14912 <unavailable> + 6418

    5    libc.so.6                          0x00002acb76f66460 __libc_start_main +
    245

    6    tmp6ubu07bh                        0x0000564d2bc14369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_pair\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count - 1 {\n        for j in i + 1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < min_difference {\n                min_difference = difference\n\
    \                min_pair = (numbers[i], numbers[j])\n            }\n        }\n\
    \    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpd_w__8om/tmpd_w__8om.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34751fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3474ef1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3474ef1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3474ef07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd_w__8om                        0x0000564567ba9962 <unavailable> + 6498

    5    libc.so.6                          0x00002b34753e6460 __libc_start_main +
    245

    6    tmpd_w__8om                        0x0000564567ba93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var min_difference = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  closest = (numbers[i], numbers[j])\n                min_difference = difference\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16a3cn78/tmp16a3cn78.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fab900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fab5f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fab5f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fab5f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16a3cn78                        0x000055cdb159e912 <unavailable> + 6418

    5    libc.so.6                          0x00002b0fabaec460 __libc_start_main +
    245

    6    tmp16a3cn78                        0x000055cdb159e369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_delta\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let delta = abs(numbers[i] - numbers[j])\n\
    \            if delta < closest_delta {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_delta = delta\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp67t4gze8/tmp67t4gze8.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0a88522c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0a88219b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0a88219988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0a882187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp67t4gze8                        0x00005641f7196912 <unavailable> + 6418

    5    libc.so.6                          0x00002b0a8870e460 __libc_start_main +
    245

    6    tmp67t4gze8                        0x00005641f7196369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_jnjtqyp/tmp_jnjtqyp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b5f03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b5bfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b5bfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b5bf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jnjtqyp                        0x000055e60ef87912 <unavailable> + 6418

    5    libc.so.6                          0x00002b34b60ef460 __libc_start_main +
    245

    6    tmp_jnjtqyp                        0x000055e60ef87369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_diff\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < closest_diff {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp48qwyfe3/tmp48qwyfe3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35de5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35de2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35de2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35de2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48qwyfe3                        0x0000559e33074912 <unavailable> + 6418

    5    libc.so.6                          0x00002b35de7b8460 __libc_start_main +
    245

    6    tmp48qwyfe3                        0x0000559e33074369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in 0..<numbers.count {\n            if i != j {\n         \
    \       let distance = abs(numbers[i] - numbers[j])\n                if distance\
    \ < closestDistance {\n                    closest = (numbers[i], numbers[j])\n\
    \                    closestDistance = distance\n                }\n         \
    \   }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpc2m4srq5/tmpc2m4srq5.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b785fab0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b785f7a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b785f7a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b785f7a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc2m4srq5                        0x000055f24cf99912 <unavailable> + 6418

    5    libc.so.6                          0x00002b785fc9c460 __libc_start_main +
    245

    6    tmpc2m4srq5                        0x000055f24cf99369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1zuxcl44/tmp1zuxcl44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77fd807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77fd4feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77fd4fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77fd4fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zuxcl44                        0x000055f3cb01f912 <unavailable> + 6418

    5    libc.so.6                          0x00002b77fd9f3460 __libc_start_main +
    245

    6    tmp1zuxcl44                        0x000055f3cb01f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_diff\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < closest_diff {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp48qwyfe3/tmp48qwyfe3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35de5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35de2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35de2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35de2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48qwyfe3                        0x0000559e33074912 <unavailable> + 6418

    5    libc.so.6                          0x00002b35de7b8460 __libc_start_main +
    245

    6    tmp48qwyfe3                        0x0000559e33074369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (0.0, 0.0)\n\
    \    var closest_difference: Double = Double.infinity\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_difference = difference\n                closest_elements = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmphhepoyl6/tmphhepoyl6.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b985c69fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b985c396b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b985c396988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b985c3957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphhepoyl6                        0x0000562db6af8962 <unavailable> + 6498

    5    libc.so.6                          0x00002b985c88b460 __libc_start_main +
    245

    6    tmphhepoyl6                        0x0000562db6af83b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8m1zpfsb/tmp8m1zpfsb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8903e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8903b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8903b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8903b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8m1zpfsb                        0x0000558d9d2bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b8904051460 __libc_start_main +
    245

    6    tmp8m1zpfsb                        0x0000558d9d2bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_distance = Double.infinity\n    var closest_elements\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < min_distance {\n                min_distance = distance\n                closest_elements\
    \ = (numbers[i], numbers[j])\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp9l2fbszy/tmp9l2fbszy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b941aa5dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b941a754b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b941a754988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b941a7537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9l2fbszy                        0x00005635c2433962 <unavailable> + 6498

    5    libc.so.6                          0x00002b941ac49460 __libc_start_main +
    245

    6    tmp9l2fbszy                        0x00005635c24333b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var diff: Double = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < diff {\n                closest = (numbers[i], numbers[j])\n             \
    \   diff = abs(numbers[i] - numbers[j])\n            }\n        }\n    }\n   \
    \ return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkf31ah80/tmpkf31ah80.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac01da2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac01d721b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac01d721988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac01d7207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkf31ah80                        0x000055b9d0301912 <unavailable> + 6418

    5    libc.so.6                          0x00002ac01dc16460 __libc_start_main +
    245

    6    tmpkf31ah80                        0x000055b9d0301369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = closest.1 - closest.0\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = numbers[j]\
    \ - numbers[i]\n            if distance < closest_distance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp2022aqyo/tmp2022aqyo.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8e163bac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8e160b1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8e160b1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8e160b07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2022aqyo                        0x0000558f4da196be <unavailable> + 5822

    5    libc.so.6                          0x00002b8e165a6460 __libc_start_main +
    245

    6    tmp2022aqyo                        0x0000558f4da19279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_jnjtqyp/tmp_jnjtqyp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b5f03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b5bfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b5bfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b5bf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jnjtqyp                        0x000055e60ef87912 <unavailable> + 6418

    5    libc.so.6                          0x00002b34b60ef460 __libc_start_main +
    245

    6    tmp_jnjtqyp                        0x000055e60ef87369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair = (numbers[0], numbers[1])\n   \
    \ var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return closest_pair\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpr3dboba2/tmpr3dboba2.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7219999c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7219690b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7219690988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b721968f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr3dboba2                        0x00005563f51bc912 <unavailable> + 6418

    5    libc.so.6                          0x00002b7219b85460 __libc_start_main +
    245

    6    tmpr3dboba2                        0x00005563f51bc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_difference = difference\n            }\n        }\n \
    \   }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7nu9iyyh/tmp7nu9iyyh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c48c01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c488f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c488f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c488f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7nu9iyyh                        0x00005646680cc912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3c48ded460 __libc_start_main +
    245

    6    tmp7nu9iyyh                        0x00005646680cc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkog4gknl/tmpkog4gknl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88fb0d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88fadc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88fadc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88fadc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkog4gknl                        0x000055e6c3437912 <unavailable> + 6418

    5    libc.so.6                          0x00002b88fb2bd460 __libc_start_main +
    245

    6    tmpkog4gknl                        0x000055e6c3437369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkog4gknl/tmpkog4gknl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88fb0d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88fadc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88fadc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88fadc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkog4gknl                        0x000055e6c3437912 <unavailable> + 6418

    5    libc.so.6                          0x00002b88fb2bd460 __libc_start_main +
    245

    6    tmpkog4gknl                        0x000055e6c3437369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min = Double.infinity\n    var min1 = 0.0\n \
    \   var min2 = 0.0\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min1 = numbers[i]\n   \
    \             min2 = numbers[j]\n            }\n        }\n    }\n    return (min1,\
    \ min2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpp27pr1jy/tmpp27pr1jy.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47d5f3cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47d5c33b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47d5c33988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47d5c327b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp27pr1jy                        0x0000555a7f04b962 <unavailable> + 6498

    5    libc.so.6                          0x00002b47d6128460 __libc_start_main +
    245

    6    tmpp27pr1jy                        0x0000555a7f04b3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_distance\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < closest_distance {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_distance = distance\n            }\n  \
    \      }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfq6sim0m/tmpfq6sim0m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a54d1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a54a11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a54a11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a54a107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfq6sim0m                        0x0000559d78e86912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3a54f06460 __libc_start_main +
    245

    6    tmpfq6sim0m                        0x0000559d78e86369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8m1zpfsb/tmp8m1zpfsb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8903e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8903b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8903b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8903b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8m1zpfsb                        0x0000558d9d2bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b8904051460 __libc_start_main +
    245

    6    tmp8m1zpfsb                        0x0000558d9d2bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ - 1 {\n        for j in i + 1..<numbers.count {\n            let distance =\
    \ abs(numbers[i] - numbers[j])\n            if distance < closest_distance {\n\
    \                closest_elements = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpu6_cmsyy/tmpu6_cmsyy.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b82bb8f6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82bb5edb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b82bb5ed988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b82bb5ec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu6_cmsyy                        0x000056161e78a912 <unavailable> + 6418

    5    libc.so.6                          0x00002b82bbae2460 __libc_start_main +
    245

    6    tmpu6_cmsyy                        0x000056161e78a369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min = Double.infinity\n    var result: (Double,\
    \ Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                result = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0ufu0xvf/tmp0ufu0xvf.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3347cc5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b33479bcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b33479bc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b33479bb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ufu0xvf                        0x0000563016269962 <unavailable> + 6498

    5    libc.so.6                          0x00002b3347eb1460 __libc_start_main +
    245

    6    tmp0ufu0xvf                        0x00005630162693b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: 0
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    let sorted = numbers.sorted()\n    var closest =\
    \ (sorted[0], sorted[1])\n    var closestDistance = abs(sorted[0] - sorted[1])\n\
    \    for i in 0..<sorted.count-1 {\n        let distance = abs(sorted[i] - sorted[i+1])\n\
    \        if distance < closestDistance {\n            closest = (sorted[i], sorted[i+1])\n\
    \            closestDistance = distance\n        }\n    }\n    return closest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_diff\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < closest_diff {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp48qwyfe3/tmp48qwyfe3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35de5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35de2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35de2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35de2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48qwyfe3                        0x0000559e33074912 <unavailable> + 6418

    5    libc.so.6                          0x00002b35de7b8460 __libc_start_main +
    245

    6    tmp48qwyfe3                        0x0000559e33074369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_distance\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < closest_distance {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_distance = distance\n            }\n  \
    \      }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfq6sim0m/tmpfq6sim0m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a54d1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a54a11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a54a11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a54a107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfq6sim0m                        0x0000559d78e86912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3a54f06460 __libc_start_main +
    245

    6    tmpfq6sim0m                        0x0000559d78e86369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8m1zpfsb/tmp8m1zpfsb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8903e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8903b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8903b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8903b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8m1zpfsb                        0x0000558d9d2bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b8904051460 __libc_start_main +
    245

    6    tmp8m1zpfsb                        0x0000558d9d2bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1zuxcl44/tmp1zuxcl44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77fd807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77fd4feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77fd4fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77fd4fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zuxcl44                        0x000055f3cb01f912 <unavailable> + 6418

    5    libc.so.6                          0x00002b77fd9f3460 __libc_start_main +
    245

    6    tmp1zuxcl44                        0x000055f3cb01f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var result: (Double, Double) = (0, 0)\n    var minDiff\
    \ = Double.infinity\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < minDiff {\n                minDiff = diff\n                result = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8t3068kv/tmp8t3068kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aae1f14cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aae1ee43b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aae1ee43988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aae1ee427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8t3068kv                        0x0000556b3b63e962 <unavailable> + 6498

    5    libc.so.6                          0x00002aae1f338460 __libc_start_main +
    245

    6    tmp8t3068kv                        0x0000556b3b63e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: 0
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    let sortedNumbers = numbers.sorted()\n    var closest\
    \ = (sortedNumbers[0], sortedNumbers[1])\n    var closestDiff = abs(sortedNumbers[0]\
    \ - sortedNumbers[1])\n    for i in 0..<sortedNumbers.count - 1 {\n        let\
    \ diff = abs(sortedNumbers[i] - sortedNumbers[i + 1])\n        if diff < closestDiff\
    \ {\n            closestDiff = diff\n            closest = (sortedNumbers[i],\
    \ sortedNumbers[i + 1])\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair: (Double,\
    \ Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj922ho18/tmpj922ho18.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fc1bc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fc18bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fc18bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fc18bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj922ho18                        0x00005583cf8a9962 <unavailable> + 6498

    5    libc.so.6                          0x00002b0fc1db2460 __libc_start_main +
    245

    6    tmpj922ho18                        0x00005583cf8a93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1zuxcl44/tmp1zuxcl44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77fd807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77fd4feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77fd4fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77fd4fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zuxcl44                        0x000055f3cb01f912 <unavailable> + 6418

    5    libc.so.6                          0x00002b77fd9f3460 __libc_start_main +
    245

    6    tmp1zuxcl44                        0x000055f3cb01f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double)?\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair!\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7pb324jd/tmp7pb324jd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b963596ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9635665b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9635665988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96356647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pb324jd                        0x000055b6db1fa962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9635b5a460 __libc_start_main +
    245

    6    tmp7pb324jd                        0x000055b6db1fa3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var smallest_difference: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < smallest_difference {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                smallest_difference = difference\n            }\n        }\n\
    \    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpvlxphg7n/tmpvlxphg7n.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5c13158c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5c12e4fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5c12e4f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5c12e4e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvlxphg7n                        0x00005621e0faa912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5c13344460 __libc_start_main +
    245

    6    tmpvlxphg7n                        0x00005621e0faa369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0qmgnidn/tmp0qmgnidn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4ac247c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4abf3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4abf3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4abf3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0qmgnidn                        0x000056385c1b8912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae4ac433460 __libc_start_main +
    245

    6    tmp0qmgnidn                        0x000056385c1b8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_distance\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < closest_distance {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_distance = distance\n            }\n  \
    \      }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfq6sim0m/tmpfq6sim0m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a54d1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a54a11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a54a11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a54a107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfq6sim0m                        0x0000559d78e86912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3a54f06460 __libc_start_main +
    245

    6    tmpfq6sim0m                        0x0000559d78e86369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1zuxcl44/tmp1zuxcl44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77fd807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77fd4feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77fd4fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77fd4fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zuxcl44                        0x000055f3cb01f912 <unavailable> + 6418

    5    libc.so.6                          0x00002b77fd9f3460 __libc_start_main +
    245

    6    tmp1zuxcl44                        0x000055f3cb01f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_distance\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < closest_distance {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_distance = distance\n            }\n  \
    \      }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfq6sim0m/tmpfq6sim0m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a54d1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a54a11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a54a11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a54a107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfq6sim0m                        0x0000559d78e86912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3a54f06460 __libc_start_main +
    245

    6    tmpfq6sim0m                        0x0000559d78e86369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closestDiff\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < closestDiff {\n                closest = (numbers[i], numbers[j])\n\
    \                closestDiff = diff\n            }\n        }\n    }\n    return\
    \ closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpaz7zwifl/tmpaz7zwifl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba917014c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba916d0bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba916d0b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba916d0a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaz7zwifl                        0x0000562695d88912 <unavailable> + 6418

    5    libc.so.6                          0x00002ba917200460 __libc_start_main +
    245

    6    tmpaz7zwifl                        0x0000562695d88369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_diff\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < closest_diff {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp48qwyfe3/tmp48qwyfe3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35de5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35de2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35de2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35de2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48qwyfe3                        0x0000559e33074912 <unavailable> + 6418

    5    libc.so.6                          0x00002b35de7b8460 __libc_start_main +
    245

    6    tmp48qwyfe3                        0x0000559e33074369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair: (Double,\
    \ Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj922ho18/tmpj922ho18.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fc1bc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fc18bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fc18bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fc18bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj922ho18                        0x00005583cf8a9962 <unavailable> + 6498

    5    libc.so.6                          0x00002b0fc1db2460 __libc_start_main +
    245

    6    tmpj922ho18                        0x00005583cf8a93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_jnjtqyp/tmp_jnjtqyp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b5f03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b5bfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b5bfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b5bf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jnjtqyp                        0x000055e60ef87912 <unavailable> + 6418

    5    libc.so.6                          0x00002b34b60ef460 __libc_start_main +
    245

    6    tmp_jnjtqyp                        0x000055e60ef87369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_difference = difference\n  \
    \              closest_elements = (numbers[i], numbers[j])\n            }\n  \
    \      }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpn4qfibo9/tmpn4qfibo9.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af2349a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af2346a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af2346a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af23469f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn4qfibo9                        0x0000560d81908912 <unavailable> + 6418

    5    libc.so.6                          0x00002af234b95460 __libc_start_main +
    245

    6    tmpn4qfibo9                        0x0000560d81908369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1zuxcl44/tmp1zuxcl44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77fd807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77fd4feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77fd4fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77fd4fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zuxcl44                        0x000055f3cb01f912 <unavailable> + 6418

    5    libc.so.6                          0x00002b77fd9f3460 __libc_start_main +
    245

    6    tmp1zuxcl44                        0x000055f3cb01f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmphiush35m/tmphiush35m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b2cdf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b2caecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b2caec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b2caeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphiush35m                        0x00005568bd6fe912 <unavailable> + 6418

    5    libc.so.6                          0x00002b2b2cfe1460 __libc_start_main +
    245

    6    tmphiush35m                        0x00005568bd6fe369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmphiush35m/tmphiush35m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b2cdf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b2caecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b2caec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b2caeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphiush35m                        0x00005568bd6fe912 <unavailable> + 6418

    5    libc.so.6                          0x00002b2b2cfe1460 __libc_start_main +
    245

    6    tmphiush35m                        0x00005568bd6fe369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1zuxcl44/tmp1zuxcl44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77fd807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77fd4feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77fd4fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77fd4fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zuxcl44                        0x000055f3cb01f912 <unavailable> + 6418

    5    libc.so.6                          0x00002b77fd9f3460 __libc_start_main +
    245

    6    tmp1zuxcl44                        0x000055f3cb01f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair: (Double,\
    \ Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj922ho18/tmpj922ho18.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fc1bc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fc18bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fc18bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fc18bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj922ho18                        0x00005583cf8a9962 <unavailable> + 6498

    5    libc.so.6                          0x00002b0fc1db2460 __libc_start_main +
    245

    6    tmpj922ho18                        0x00005583cf8a93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_difference = difference\n            }\n        }\n \
    \   }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7nu9iyyh/tmp7nu9iyyh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c48c01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c488f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c488f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c488f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7nu9iyyh                        0x00005646680cc912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3c48ded460 __libc_start_main +
    245

    6    tmp7nu9iyyh                        0x00005646680cc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var diff\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let new_diff = abs(numbers[i] - numbers[j])\n\
    \            if new_diff < diff {\n                closest = (numbers[i], numbers[j])\n\
    \                diff = new_diff\n            }\n        }\n    }\n    return\
    \ closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpwp56k0w4/tmpwp56k0w4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67686c6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67683bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67683bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67683bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwp56k0w4                        0x0000557cf6ac6912 <unavailable> + 6418

    5    libc.so.6                          0x00002b67688b2460 __libc_start_main +
    245

    6    tmpwp56k0w4                        0x0000557cf6ac6369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8m1zpfsb/tmp8m1zpfsb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8903e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8903b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8903b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8903b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8m1zpfsb                        0x0000558d9d2bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b8904051460 __libc_start_main +
    245

    6    tmp8m1zpfsb                        0x0000558d9d2bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1zuxcl44/tmp1zuxcl44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77fd807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77fd4feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77fd4fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77fd4fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zuxcl44                        0x000055f3cb01f912 <unavailable> + 6418

    5    libc.so.6                          0x00002b77fd9f3460 __libc_start_main +
    245

    6    tmp1zuxcl44                        0x000055f3cb01f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0qmgnidn/tmp0qmgnidn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4ac247c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4abf3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4abf3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4abf3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0qmgnidn                        0x000056385c1b8912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae4ac433460 __libc_start_main +
    245

    6    tmp0qmgnidn                        0x000056385c1b8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair: (Double,\
    \ Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj922ho18/tmpj922ho18.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fc1bc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fc18bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fc18bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fc18bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj922ho18                        0x00005583cf8a9962 <unavailable> + 6498

    5    libc.so.6                          0x00002b0fc1db2460 __libc_start_main +
    245

    6    tmpj922ho18                        0x00005583cf8a93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkog4gknl/tmpkog4gknl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88fb0d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88fadc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88fadc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88fadc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkog4gknl                        0x000055e6c3437912 <unavailable> + 6418

    5    libc.so.6                          0x00002b88fb2bd460 __libc_start_main +
    245

    6    tmpkog4gknl                        0x000055e6c3437369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ (i+1)..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmplsmmt8ck/tmplsmmt8ck.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b909fe22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b909fb19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b909fb19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b909fb187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsmmt8ck                        0x000055752f50e962 <unavailable> + 6498

    5    libc.so.6                          0x00002b90a000e460 __libc_start_main +
    245

    6    tmplsmmt8ck                        0x000055752f50e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1zuxcl44/tmp1zuxcl44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77fd807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77fd4feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77fd4fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77fd4fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zuxcl44                        0x000055f3cb01f912 <unavailable> + 6418

    5    libc.so.6                          0x00002b77fd9f3460 __libc_start_main +
    245

    6    tmp1zuxcl44                        0x000055f3cb01f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_distance\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < closest_distance {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_distance = distance\n            }\n  \
    \      }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfq6sim0m/tmpfq6sim0m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a54d1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a54a11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a54a11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a54a107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfq6sim0m                        0x0000559d78e86912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3a54f06460 __libc_start_main +
    245

    6    tmpfq6sim0m                        0x0000559d78e86369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8m1zpfsb/tmp8m1zpfsb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8903e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8903b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8903b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8903b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8m1zpfsb                        0x0000558d9d2bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b8904051460 __libc_start_main +
    245

    6    tmp8m1zpfsb                        0x0000558d9d2bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closestDistance\
    \ = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < closestDistance {\n                closest = (numbers[i],\
    \ numbers[j])\n                closestDistance = distance\n            }\n   \
    \     }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp77ns76_r/tmp77ns76_r.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2f813fcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2f810f3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2f810f3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2f810f27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp77ns76_r                        0x000055f02eecb912 <unavailable> + 6418

    5    libc.so.6                          0x00002b2f815e8460 __libc_start_main +
    245

    6    tmp77ns76_r                        0x000055f02eecb369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closestDistance\
    \ = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count {\n        for\
    \ j in (i+1)..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < closestDistance {\n                closest = (numbers[i],\
    \ numbers[j])\n                closestDistance = distance\n            }\n   \
    \     }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpm8eg5320/tmpm8eg5320.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6700e13c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6700b0ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6700b0a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6700b097b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm8eg5320                        0x000056120b93d912 <unavailable> + 6418

    5    libc.so.6                          0x00002b6700fff460 __libc_start_main +
    245

    6    tmpm8eg5320                        0x000056120b93d369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_pair: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance = abs(numbers[0] - numbers[1])\n    for\
    \ i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n         \
    \   let distance = abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ {\n                closest_pair = (numbers[i], numbers[j])\n               \
    \ closest_distance = distance\n            }\n        }\n    }\n    return closest_pair\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp1zuxcl44/tmp1zuxcl44.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b77fd807c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b77fd4feb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b77fd4fe988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b77fd4fd7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1zuxcl44                        0x000055f3cb01f912 <unavailable> + 6418

    5    libc.so.6                          0x00002b77fd9f3460 __libc_start_main +
    245

    6    tmp1zuxcl44                        0x000055f3cb01f369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var closest_elements\
    \ = (0.0, 0.0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let difference = abs(numbers[i] - numbers[j])\n            if\
    \ difference < min_difference {\n                min_difference = difference\n\
    \                closest_elements = (numbers[i], numbers[j])\n            }\n\
    \        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp4b1d576h/tmp4b1d576h.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26c3c46c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26c393db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26c393d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26c393c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4b1d576h                        0x0000562d16dbd962 <unavailable> + 6498

    5    libc.so.6                          0x00002b26c3e32460 __libc_start_main +
    245

    6    tmp4b1d576h                        0x0000562d16dbd3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double)?\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min_diff {\n                min_diff = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair!\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7pb324jd/tmp7pb324jd.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b963596ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9635665b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9635665988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96356647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7pb324jd                        0x000055b6db1fa962 <unavailable> + 6498

    5    libc.so.6                          0x00002b9635b5a460 __libc_start_main +
    245

    6    tmp7pb324jd                        0x000055b6db1fa3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8m1zpfsb/tmp8m1zpfsb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8903e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8903b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8903b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8903b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8m1zpfsb                        0x0000558d9d2bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b8904051460 __libc_start_main +
    245

    6    tmp8m1zpfsb                        0x0000558d9d2bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in 0..<numbers.count {\n    \
    \        if i != j {\n                let distance = abs(numbers[i] - numbers[j])\n\
    \                if distance < closest_distance {\n                    closest_elements\
    \ = (numbers[i], numbers[j])\n                    closest_distance = distance\n\
    \                }\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpyix4n6ca/tmpyix4n6ca.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aac1d61cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aac1d313b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aac1d313988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aac1d3127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyix4n6ca                        0x000055b4f3e68912 <unavailable> + 6418

    5    libc.so.6                          0x00002aac1d808460 __libc_start_main +
    245

    6    tmpyix4n6ca                        0x000055b4f3e68369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_jnjtqyp/tmp_jnjtqyp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b5f03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b5bfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b5bfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b5bf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jnjtqyp                        0x000055e60ef87912 <unavailable> + 6418

    5    libc.so.6                          0x00002b34b60ef460 __libc_start_main +
    245

    6    tmp_jnjtqyp                        0x000055e60ef87369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_jnjtqyp/tmp_jnjtqyp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b5f03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b5bfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b5bfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b5bf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jnjtqyp                        0x000055e60ef87912 <unavailable> + 6418

    5    libc.so.6                          0x00002b34b60ef460 __libc_start_main +
    245

    6    tmp_jnjtqyp                        0x000055e60ef87369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ (i+1)..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmplsmmt8ck/tmplsmmt8ck.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b909fe22c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b909fb19b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b909fb19988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b909fb187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplsmmt8ck                        0x000055752f50e962 <unavailable> + 6498

    5    libc.so.6                          0x00002b90a000e460 __libc_start_main +
    245

    6    tmplsmmt8ck                        0x000055752f50e3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var diff = closest.1 - closest.0\n    for i in 0..<numbers.count {\n    \
    \    for j in i+1..<numbers.count {\n            let newDiff = numbers[j] - numbers[i]\n\
    \            if newDiff < diff {\n                closest = (numbers[i], numbers[j])\n\
    \                diff = newDiff\n            }\n        }\n    }\n    return closest\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfmepl2nt/tmpfmepl2nt.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5fdec2ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5fde921b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5fde921988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5fde9207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfmepl2nt                        0x00005606cc8126be <unavailable> + 5822

    5    libc.so.6                          0x00002b5fdee16460 __libc_start_main +
    245

    6    tmpfmepl2nt                        0x00005606cc812279 <unavailable> + 4729

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDiff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closestDiff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closestDiff = diff\n           \
    \ }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmphiush35m/tmphiush35m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b2cdf5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b2caecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b2caec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b2caeb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphiush35m                        0x00005568bd6fe912 <unavailable> + 6418

    5    libc.so.6                          0x00002b2b2cfe1460 __libc_start_main +
    245

    6    tmphiush35m                        0x00005568bd6fe369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8m1zpfsb/tmp8m1zpfsb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8903e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8903b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8903b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8903b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8m1zpfsb                        0x0000558d9d2bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b8904051460 __libc_start_main +
    245

    6    tmp8m1zpfsb                        0x0000558d9d2bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_difference = difference\n            }\n        }\n \
    \   }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7nu9iyyh/tmp7nu9iyyh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c48c01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c488f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c488f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c488f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7nu9iyyh                        0x00005646680cc912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3c48ded460 __libc_start_main +
    245

    6    tmp7nu9iyyh                        0x00005646680cc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_jnjtqyp/tmp_jnjtqyp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b5f03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b5bfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b5bfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b5bf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jnjtqyp                        0x000055e60ef87912 <unavailable> + 6418

    5    libc.so.6                          0x00002b34b60ef460 __libc_start_main +
    245

    6    tmp_jnjtqyp                        0x000055e60ef87369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_diff\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < closest_diff {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_diff = diff\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp48qwyfe3/tmp48qwyfe3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35de5ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35de2c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35de2c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35de2c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp48qwyfe3                        0x0000559e33074912 <unavailable> + 6418

    5    libc.so.6                          0x00002b35de7b8460 __libc_start_main +
    245

    6    tmp48qwyfe3                        0x0000559e33074369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkog4gknl/tmpkog4gknl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88fb0d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88fadc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88fadc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88fadc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkog4gknl                        0x000055e6c3437912 <unavailable> + 6418

    5    libc.so.6                          0x00002b88fb2bd460 __libc_start_main +
    245

    6    tmpkog4gknl                        0x000055e6c3437369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i..<numbers.count {\n            if abs(numbers[i] - numbers[j])\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = abs(numbers[i] - numbers[j])\n           \
    \ }\n        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjkyg89po/tmpjkyg89po.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af87e33bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af87e032b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af87e032988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af87e0317b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjkyg89po                        0x000055b767f787ae <unavailable> + 6062

    5    libc.so.6                          0x00002af87e527460 __libc_start_main +
    245

    6    tmpjkyg89po                        0x000055b767f78369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0qmgnidn/tmp0qmgnidn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4ac247c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4abf3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4abf3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4abf3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0qmgnidn                        0x000056385c1b8912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae4ac433460 __libc_start_main +
    245

    6    tmp0qmgnidn                        0x000056385c1b8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_jnjtqyp/tmp_jnjtqyp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b5f03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b5bfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b5bfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b5bf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jnjtqyp                        0x000055e60ef87912 <unavailable> + 6418

    5    libc.so.6                          0x00002b34b60ef460 __libc_start_main +
    245

    6    tmp_jnjtqyp                        0x000055e60ef87369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_distance\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < closest_distance {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_distance = distance\n            }\n  \
    \      }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfq6sim0m/tmpfq6sim0m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a54d1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a54a11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a54a11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a54a107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfq6sim0m                        0x0000559d78e86912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3a54f06460 __libc_start_main +
    245

    6    tmpfq6sim0m                        0x0000559d78e86369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8m1zpfsb/tmp8m1zpfsb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8903e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8903b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8903b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8903b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8m1zpfsb                        0x0000558d9d2bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b8904051460 __libc_start_main +
    245

    6    tmp8m1zpfsb                        0x0000558d9d2bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in 0..<numbers.count {\n            if i != j {\n         \
    \       let distance = abs(numbers[i] - numbers[j])\n                if distance\
    \ < closest_distance {\n                    closest_elements = (numbers[i], numbers[j])\n\
    \                    closest_distance = distance\n                }\n        \
    \    }\n        }\n    }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpk_lskp8p/tmpk_lskp8p.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5b91ac8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5b917bfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5b917bf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5b917be7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk_lskp8p                        0x000056489feed912 <unavailable> + 6418

    5    libc.so.6                          0x00002b5b91cb4460 __libc_start_main +
    245

    6    tmpk_lskp8p                        0x000056489feed369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_difference: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let difference = abs(numbers[i] - numbers[j])\n            if difference\
    \ < closest_difference {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_difference = difference\n            }\n        }\n \
    \   }\n    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp7nu9iyyh/tmp7nu9iyyh.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c48c01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c488f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c488f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c488f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7nu9iyyh                        0x00005646680cc912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3c48ded460 __libc_start_main +
    245

    6    tmp7nu9iyyh                        0x00005646680cc369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_jnjtqyp/tmp_jnjtqyp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b5f03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b5bfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b5bfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b5bf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jnjtqyp                        0x000055e60ef87912 <unavailable> + 6418

    5    libc.so.6                          0x00002b34b60ef460 __libc_start_main +
    245

    6    tmp_jnjtqyp                        0x000055e60ef87369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_elements\
    \ = (Double.infinity, Double.infinity)\n    for i in 0..<numbers.count {\n   \
    \     for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < min_difference {\n              \
    \  min_difference = difference\n                min_elements = (numbers[i], numbers[j])\n\
    \            }\n        }\n    }\n    return min_elements\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_08ueyma/tmp_08ueyma.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac4ad862c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac4ad559b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac4ad559988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac4ad5587b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_08ueyma                        0x0000555b946a6962 <unavailable> + 6498

    5    libc.so.6                          0x00002ac4ada4e460 __libc_start_main +
    245

    6    tmp_08ueyma                        0x0000555b946a63b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements: (Double, Double) = (numbers[0],\
    \ numbers[1])\n    var closest_distance: Double = abs(numbers[0] - numbers[1])\n\
    \    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count {\n  \
    \          let distance = abs(numbers[i] - numbers[j])\n            if distance\
    \ < closest_distance {\n                closest_elements = (numbers[i], numbers[j])\n\
    \                closest_distance = distance\n            }\n        }\n    }\n\
    \    return closest_elements\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpjh7phfes/tmpjh7phfes.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36e4aa1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36e4798b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36e4798988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36e47977b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjh7phfes                        0x0000563b04b20912 <unavailable> + 6418

    5    libc.so.6                          0x00002b36e4c8d460 __libc_start_main +
    245

    6    tmpjh7phfes                        0x0000563b04b20369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest = (numbers[i], numbers[j])\n                closest_distance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp16b7u0kv/tmp16b7u0kv.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ded869c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ded560b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ded560988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ded55f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp16b7u0kv                        0x0000561c8c606912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3deda55460 __libc_start_main +
    245

    6    tmp16b7u0kv                        0x0000561c8c606369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkog4gknl/tmpkog4gknl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88fb0d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88fadc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88fadc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88fadc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkog4gknl                        0x000055e6c3437912 <unavailable> + 6418

    5    libc.so.6                          0x00002b88fb2bd460 __libc_start_main +
    245

    6    tmpkog4gknl                        0x000055e6c3437369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8m1zpfsb/tmp8m1zpfsb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8903e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8903b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8903b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8903b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8m1zpfsb                        0x0000558d9d2bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b8904051460 __libc_start_main +
    245

    6    tmp8m1zpfsb                        0x0000558d9d2bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_diff = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let diff = abs(numbers[i]\
    \ - numbers[j])\n            if diff < closest_diff {\n                closest\
    \ = (numbers[i], numbers[j])\n                closest_diff = diff\n          \
    \  }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp0qmgnidn/tmp0qmgnidn.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae4ac247c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae4abf3eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae4abf3e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae4abf3d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0qmgnidn                        0x000056385c1b8912 <unavailable> + 6418

    5    libc.so.6                          0x00002ae4ac433460 __libc_start_main +
    245

    6    tmp0qmgnidn                        0x000056385c1b8369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min = Double.infinity\n    var min_pair: (Double,\
    \ Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in i+1..<numbers.count\
    \ {\n            let diff = abs(numbers[i] - numbers[j])\n            if diff\
    \ < min {\n                min = diff\n                min_pair = (numbers[i],\
    \ numbers[j])\n            }\n        }\n    }\n    return min_pair\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpj922ho18/tmpj922ho18.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0fc1bc6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0fc18bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0fc18bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0fc18bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj922ho18                        0x00005583cf8a9962 <unavailable> + 6498

    5    libc.so.6                          0x00002b0fc1db2460 __libc_start_main +
    245

    6    tmpj922ho18                        0x00005583cf8a93b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_difference = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let difference = abs(numbers[i] - numbers[j])\n\
    \            if difference < min_difference {\n                min_difference\
    \ = difference\n                min_pair = (numbers[i], numbers[j])\n        \
    \    }\n        }\n    }\n    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) ==\
    \ (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0])\
    \ == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1,\
    \ 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpr4503bex/tmpr4503bex.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b244c0bbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b244bdb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b244bdb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b244bdb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr4503bex                        0x00005586e5774962 <unavailable> + 6498

    5    libc.so.6                          0x00002b244c2a7460 __libc_start_main +
    245

    6    tmpr4503bex                        0x00005586e57743b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp8m1zpfsb/tmp8m1zpfsb.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8903e65c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8903b5cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8903b5c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8903b5b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8m1zpfsb                        0x0000558d9d2bd912 <unavailable> + 6418

    5    libc.so.6                          0x00002b8904051460 __libc_start_main +
    245

    6    tmp8m1zpfsb                        0x0000558d9d2bd369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var min_diff = Double.infinity\n    var min_pair:\
    \ (Double, Double) = (0, 0)\n    for i in 0..<numbers.count {\n        for j in\
    \ i+1..<numbers.count {\n            let diff = abs(numbers[i] - numbers[j])\n\
    \            if diff < min_diff {\n                min_diff = diff\n         \
    \       min_pair = (numbers[i], numbers[j])\n            }\n        }\n    }\n\
    \    return min_pair\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp679i88m3/tmp679i88m3.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba07891ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba078615b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba078615988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba0786147b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp679i88m3                        0x0000558cfd0ea962 <unavailable> + 6498

    5    libc.so.6                          0x00002ba078b0a460 __libc_start_main +
    245

    6    tmp679i88m3                        0x0000558cfd0ea3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest: (Double, Double) = (numbers[0], numbers[1])\n\
    \    var closestDistance = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closestDistance {\n               \
    \ closest = (numbers[i], numbers[j])\n                closestDistance = distance\n\
    \            }\n        }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0,\
    \ 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9,\
    \ 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0,\
    \ 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpkog4gknl/tmpkog4gknl.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b88fb0d1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b88fadc8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b88fadc8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b88fadc77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkog4gknl                        0x000055e6c3437912 <unavailable> + 6418

    5    libc.so.6                          0x00002b88fb2bd460 __libc_start_main +
    245

    6    tmpkog4gknl                        0x000055e6c3437369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_difference = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let difference = abs(numbers[i]\
    \ - numbers[j])\n            if difference < closest_difference {\n          \
    \      closest_elements = (numbers[i], numbers[j])\n                closest_difference\
    \ = difference\n            }\n        }\n    }\n    return closest_elements\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmp_jnjtqyp/tmp_jnjtqyp.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b34b5f03c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b34b5bfab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b34b5bfa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b34b5bf97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_jnjtqyp                        0x000055e60ef87912 <unavailable> + 6418

    5    libc.so.6                          0x00002b34b60ef460 __libc_start_main +
    245

    6    tmp_jnjtqyp                        0x000055e60ef87369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest = (numbers[0], numbers[1])\n    var closest_distance\
    \ = abs(closest.0 - closest.1)\n    for i in 0..<numbers.count {\n        for\
    \ j in i+1..<numbers.count {\n            let distance = abs(numbers[i] - numbers[j])\n\
    \            if distance < closest_distance {\n                closest = (numbers[i],\
    \ numbers[j])\n                closest_distance = distance\n            }\n  \
    \      }\n    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(find_closest_elements(numbers: [1.0, 2.0, 3.9, 4.0, 5.0, 2.2]) == (3.9,\
    \ 4.0))\nassert(find_closest_elements(numbers: [1.0, 2.0, 5.9, 4.0, 5.0]) == (5.0,\
    \ 5.9))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\
    \ == (2.0, 2.2))\nassert(find_closest_elements(numbers: [1.0, 2.0, 3.0, 4.0, 5.0,\
    \ 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers: [1.1, 2.2, 3.1,\
    \ 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpfq6sim0m/tmpfq6sim0m.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a54d1ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a54a11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a54a11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a54a107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfq6sim0m                        0x0000559d78e86912 <unavailable> + 6418

    5    libc.so.6                          0x00002b3a54f06460 __libc_start_main +
    245

    6    tmpfq6sim0m                        0x0000559d78e86369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013508
- exit_code: -4
  program: "\n/// From a supplied list of numbers (of length at least two) select\
    \ and return two that are the closest to each\n/// other and return them in order\
    \ (smaller number, larger number).\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.2])\n/// (2.0, 2.2)\n/// >>> find_closest_elements([1.0, 2.0, 3.0,\
    \ 4.0, 5.0, 2.0])\n/// (2.0, 2.0)\nfunc find_closest_elements(numbers: [Double])\
    \ -> (Double, Double) {\n    var closest_elements = (numbers[0], numbers[1])\n\
    \    var closest_distance = abs(numbers[0] - numbers[1])\n    for i in 0..<numbers.count\
    \ {\n        for j in i+1..<numbers.count {\n            let distance = abs(numbers[i]\
    \ - numbers[j])\n            if distance < closest_distance {\n              \
    \  closest_elements = (numbers[i], numbers[j])\n                closest_distance\
    \ = distance\n            }\n        }\n    }\n    return closest_elements\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(find_closest_elements(numbers: [1.0, 2.0, 3.9,\
    \ 4.0, 5.0, 2.2]) == (3.9, 4.0))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 5.9, 4.0, 5.0]) == (5.0, 5.9))\nassert(find_closest_elements(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0, 2.2]) == (2.0, 2.2))\nassert(find_closest_elements(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0, 2.0]) == (2.0, 2.0))\nassert(find_closest_elements(numbers:\
    \ [1.1, 2.2, 3.1, 4.1, 5.1]) == (2.2, 3.1))"
  status: Exception
  stderr: 'tmpf9itlek_/tmpf9itlek_.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b855e632c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b855e329b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b855e329988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b855e3287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf9itlek_                        0x000055ae05a81912 <unavailable> + 6418

    5    libc.so.6                          0x00002b855e81e460 __libc_start_main +
    245

    6    tmpf9itlek_                        0x000055ae05a81369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013507
