language: swift
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().enumerated().filter\
    \ { $0.offset % 2 == 0 }.map { $0.element }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpsyntvrjp.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpsyntvrjp.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let idx = txt.firstIndex(of: \" \") {\n \
    \       return .success(txt.split(separator: \" \").map { String($0) })\n    }\
    \ else if let idx = txt.firstIndex(of: \",\") {\n        return .success(txt.split(separator:\
    \ \",\").map { String($0) })\n    } else {\n        return .failure(txt.filter\
    \ { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpqb3uam9m/tmpqb3uam9m.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b468ea48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b468e73fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b468e73f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b468e73e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqb3uam9m                        0x000055b199ee0313 <unavailable> + 8979

    5    libc.so.6                          0x00002b468ec34460 __libc_start_main +
    245

    6    tmpqb3uam9m                        0x000055b199edf7f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let _ = txt.range(of: \" \") {\n        return\
    \ .success(txt.components(separatedBy: \" \"))\n    } else if let _ = txt.range(of:\
    \ \",\") {\n        return .success(txt.components(separatedBy: \",\"))\n    }\
    \ else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpbgka82rg.swift:12:20: error: value of type 'String' has no member\
    \ 'range'\n    if let _ = txt.range(of: \" \") {\n               ~~~ ^~~~~\n/tmp/tmpbgka82rg.swift:13:29:\
    \ error: value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n                        ~~~ ^~~~~~~~~~\n/tmp/tmpbgka82rg.swift:14:27:\
    \ error: value of type 'String' has no member 'range'\n    } else if let _ = txt.range(of:\
    \ \",\") {\n                      ~~~ ^~~~~\n/tmp/tmpbgka82rg.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1bpebpfy.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp1bpebpfy.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    let words = txt.split(separator: \" \")\n  \
    \  if words.count > 1 {\n        return .success(words.map { String($0) })\n \
    \   }\n    let words2 = txt.split(separator: \",\")\n    if words2.count > 1 {\n\
    \        return .success(words2.map { String($0) })\n    }\n    let letters =\
    \ txt.filter { $0.isLetter }\n    let odd = letters.filter { $0.lowercased().unicodeScalars.first!.value\
    \ % 2 == 1 }\n    return .failure(odd.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpgz45upg2/tmpgz45upg2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc195fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc192f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc192f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc192f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgz45upg2                        0x000055db8f2b66cb <unavailable> + 9931

    5    libc.so.6                          0x00002acc197e6460 __libc_start_main +
    245

    6    tmpgz45upg2                        0x000055db8f2b5a79 <unavailable> + 6777

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    let words = txt.split(separator: \" \")\n  \
    \  if words.count > 1 {\n        return .success(words.map { String($0) })\n \
    \   }\n    let words2 = txt.split(separator: \",\")\n    if words2.count > 1 {\n\
    \        return .success(words2.map { String($0) })\n    }\n    return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.count)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpxl5sppuj/tmpxl5sppuj.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d6d542c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d6d239b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d6d239988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d6d2387b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxl5sppuj                        0x0000563d68e8965b <unavailable> + 9819

    5    libc.so.6                          0x00002b6d6d72e460 __libc_start_main +
    245

    6    tmpxl5sppuj                        0x0000563d68e88a09 <unavailable> + 6665

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for (i, c) in txt.lowercased().enumerated()\
    \ {\n            if i % 2 == 0 && c.asciiValue! >= 97 && c.asciiValue! <= 122\
    \ {\n                count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp2z7ly6qp.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp2z7ly6qp.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().enumerated().filter\
    \ { $0.offset % 2 == 0 }.map { $0.element }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpsyntvrjp.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpsyntvrjp.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for (i, c) in txt.lowercased().enumerated()\
    \ {\n            if i % 2 == 0 && c.asciiValue! > 96 && c.asciiValue! < 123 {\n\
    \                count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpb8pgct23.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpb8pgct23.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let index = txt.firstIndex(of: \" \") {\n\
    \        return .success(txt.split(separator: \" \").map { String($0) })\n   \
    \ } else if let index = txt.firstIndex(of: \",\") {\n        return .success(txt.split(separator:\
    \ \",\").map { String($0) })\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpmgms0utf/tmpmgms0utf.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acba1c71c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acba1968b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acba1968988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acba19677b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmgms0utf                        0x000055afc434869b <unavailable> + 9883

    5    libc.so.6                          0x00002acba1e5d460 __libc_start_main +
    245

    6    tmpmgms0utf                        0x000055afc4347a49 <unavailable> + 6729

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter({ $0.isLowercase }).count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpousxuyze.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpousxuyze.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpdpagq0p1.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpdpagq0p1.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let idx = txt.firstIndex(of: \" \") {\n \
    \       return .success([String(txt[..<idx]), String(txt[txt.index(after: idx)...])])\n\
    \    } else if let idx = txt.firstIndex(of: \",\") {\n        return .success([String(txt[..<idx]),\
    \ String(txt[txt.index(after: idx)...])])\n    } else {\n        return .failure(txt.filter\
    \ { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpgu4kw_ol/tmpgu4kw_ol.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b11ad11fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b11ace16b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b11ace16988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b11ace157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgu4kw_ol                        0x000055ea4c2914a3 <unavailable> + 9379

    5    libc.so.6                          0x00002b11ad30b460 __libc_start_main +
    245

    6    tmpgu4kw_ol                        0x000055ea4c290989 <unavailable> + 6537

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for (index, char) in txt.enumerated()\
    \ {\n            if index % 2 == 0 && char.isLowercase {\n                count\
    \ += 1\n            }\n        }\n        return .failure(count)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpv9dylcev.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpv9dylcev.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for (i, c) in txt.lowercased().enumerated()\
    \ {\n            if i % 2 == 0 && c.isLetter {\n                count += 1\n \
    \           }\n        }\n        return .failure(count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpgr_2248p.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpgr_2248p.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    let words = txt.split(separator: \" \")\n  \
    \  if words.count > 1 {\n        return .success(words.map { String($0) })\n \
    \   }\n    let words2 = txt.split(separator: \",\")\n    if words2.count > 1 {\n\
    \        return .success(words2.map { String($0) })\n    }\n    let lowerCase\
    \ = txt.lowercased()\n    var count = 0\n    for (i, c) in lowerCase.enumerated()\
    \ {\n        if i % 2 == 0 && c.asciiValue! > 97 {\n            count += 1\n \
    \       }\n    }\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmptshy3pbo/tmptshy3pbo.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b37f8c9ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b37f8995b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b37f8995988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b37f89947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptshy3pbo                        0x000056445b4c8523 <unavailable> + 9507

    5    libc.so.6                          0x00002b37f8e8a460 __libc_start_main +
    245

    6    tmptshy3pbo                        0x000056445b4c7a09 <unavailable> + 6665

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let index = txt.firstIndex(of: \" \") {\n\
    \        return .success(txt.split(separator: \" \").map { String($0) })\n   \
    \ } else if let index = txt.firstIndex(of: \",\") {\n        return .success(txt.split(separator:\
    \ \",\").map { String($0) })\n    } else {\n        let count = txt.filter { $0.isLowercase\
    \ && $0.asciiValue! % 2 == 1 }.count\n        return .failure(count)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpnp2v1o0y/tmpnp2v1o0y.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5f7f487c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5f7f17eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5f7f17e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5f7f17d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnp2v1o0y                        0x000055eeea40454b <unavailable> + 9547

    5    libc.so.6                          0x00002b5f7f673460 __libc_start_main +
    245

    6    tmpnp2v1o0y                        0x000055eeea4038f9 <unavailable> + 6393

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let idx = txt.firstIndex(of: \" \") {\n \
    \       return .success(txt.split(separator: \" \").map { String($0) })\n    }\
    \ else if let idx = txt.firstIndex(of: \",\") {\n        return .success(txt.split(separator:\
    \ \",\").map { String($0) })\n    } else {\n        return .failure(txt.filter\
    \ { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpqb3uam9m/tmpqb3uam9m.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b468ea48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b468e73fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b468e73f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b468e73e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqb3uam9m                        0x000055b199ee0313 <unavailable> + 8979

    5    libc.so.6                          0x00002b468ec34460 __libc_start_main +
    245

    6    tmpqb3uam9m                        0x000055b199edf7f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for i in 0..<txt.count\
    \ {\n            if i % 2 == 0 && txt[txt.index(txt.startIndex, offsetBy: i)].isLowercase\
    \ {\n                count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp7dhrx6yp.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp7dhrx6yp.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count\
    \ % 2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"\
    Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmptw30ozer.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmptw30ozer.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let idx = txt.firstIndex(of: \" \") {\n \
    \       return .success(txt.split(separator: \" \").map { String($0) })\n    }\
    \ else if let idx = txt.firstIndex(of: \",\") {\n        return .success(txt.split(separator:\
    \ \",\").map { String($0) })\n    } else {\n        return .failure(txt.filter\
    \ { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpqb3uam9m/tmpqb3uam9m.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b468ea48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b468e73fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b468e73f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b468e73e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqb3uam9m                        0x000055b199ee0313 <unavailable> + 8979

    5    libc.so.6                          0x00002b468ec34460 __libc_start_main +
    245

    6    tmpqb3uam9m                        0x000055b199edf7f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.reduce(0) { $0 + ($1.isLowercase\
    \ && $1.asciiValue! % 2 == 1 ? 1 : 0) })\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp9c107dvl.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp9c107dvl.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    let words = txt.split(separator: \" \")\n  \
    \  if words.count > 1 {\n        return .success(words.map { String($0) })\n \
    \   }\n    let words2 = txt.split(separator: \",\")\n    if words2.count > 1 {\n\
    \        return .success(words2.map { String($0) })\n    }\n    let count = txt.filter\
    \ { $0.isLowercase && $0.asciiValue! % 2 == 1 }.count\n    return .failure(count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpj9x61k6f/tmpj9x61k6f.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0ef6a73c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0ef676ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0ef676a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0ef67697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj9x61k6f                        0x0000558abef1250b <unavailable> + 9483

    5    libc.so.6                          0x00002b0ef6c5f460 __libc_start_main +
    245

    6    tmpj9x61k6f                        0x0000558abef118b9 <unavailable> + 6329

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    let words = txt.split(separator: \" \")\n  \
    \  if words.count > 1 {\n        return .success(words.map { String($0) })\n \
    \   }\n    let words2 = txt.split(separator: \",\")\n    if words2.count > 1 {\n\
    \        return .success(words2.map { String($0) })\n    }\n    let letters =\
    \ txt.filter { $0.isLetter }\n    let odd = letters.filter { $0.lowercased().unicodeScalars.first!.value\
    \ % 2 == 1 }\n    return .failure(odd.count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpgz45upg2/tmpgz45upg2.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acc195fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acc192f1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acc192f1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acc192f07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgz45upg2                        0x000055db8f2b66cb <unavailable> + 9931

    5    libc.so.6                          0x00002acc197e6460 __libc_start_main +
    245

    6    tmpgz45upg2                        0x000055db8f2b5a79 <unavailable> + 6777

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().reduce(0) { $1.offset % 2 == 0 ? $0 + 1 : $0 })\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyy14gtml.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyy14gtml.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let index = txt.firstIndex(of: \" \") {\n\
    \        return .success(txt.split(separator: \" \").map { String($0) })\n   \
    \ } else if let index = txt.firstIndex(of: \",\") {\n        return .success(txt.split(separator:\
    \ \",\").map { String($0) })\n    } else {\n        let count = txt.filter { $0.isLowercase\
    \ && $0.unicodeScalars.first!.value % 2 == 1 }.count\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmp83clqeew/tmp83clqeew.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25395f5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25392ecb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25392ec988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25392eb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp83clqeew                        0x000055d68d5c56bb <unavailable> + 9915

    5    libc.so.6                          0x00002b25397e1460 __libc_start_main +
    245

    6    tmp83clqeew                        0x000055d68d5c4a69 <unavailable> + 6761

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for (index, char) in txt.lowercased().enumerated()\
    \ {\n            if index % 2 == 0 && char.asciiValue! >= 97 && char.asciiValue!\
    \ <= 122 {\n                count += 1\n            }\n        }\n        return\
    \ .failure(count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpc28utru2.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpc28utru2.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let idx = txt.firstIndex(of: \" \") {\n \
    \       return .success(txt.split(separator: \" \").map { String($0) })\n    }\
    \ else if let idx = txt.firstIndex(of: \",\") {\n        return .success(txt.split(separator:\
    \ \",\").map { String($0) })\n    } else {\n        return .failure(txt.lowercased().filter\
    \ { $0.isLetter }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpex_fjpod/tmpex_fjpod.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b22d3822c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b22d3519b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b22d3519988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b22d35187b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpex_fjpod                        0x0000557b46e0769b <unavailable> + 9883

    5    libc.so.6                          0x00002b22d3a0e460 __libc_start_main +
    245

    6    tmpex_fjpod                        0x0000557b46e06a49 <unavailable> + 6729

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpdpagq0p1.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpdpagq0p1.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for (i, c) in txt.lowercased().enumerated()\
    \ {\n            if i % 2 == 0 && c >= \"a\" && c <= \"z\" {\n               \
    \ count += 1\n            }\n        }\n        return .failure(count)\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpjh1aykch.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpjh1aykch.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    let words = txt.components(separatedBy: .whitespaces)\n\
    \    if words.count > 1 {\n        return .success(words)\n    }\n    let words2\
    \ = txt.components(separatedBy: \",\")\n    if words2.count > 1 {\n        return\
    \ .success(words2)\n    }\n    let count = txt.filter { $0.isLowercase && $0.unicodeScalars.first!.value\
    \ % 2 == 1 }.count\n    return .failure(count)\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp59zl5nm3.swift:12:21: error: value of type 'String' has no member\
    \ 'components'\n    let words = txt.components(separatedBy: .whitespaces)\n  \
    \              ~~~ ^~~~~~~~~~\n/tmp/tmp59zl5nm3.swift:12:46: error: cannot infer\
    \ contextual base in reference to member 'whitespaces'\n    let words = txt.components(separatedBy:\
    \ .whitespaces)\n                                            ~^~~~~~~~~~~\n/tmp/tmp59zl5nm3.swift:16:22:\
    \ error: value of type 'String' has no member 'components'\n    let words2 = txt.components(separatedBy:\
    \ \",\")\n                 ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1bpebpfy.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp1bpebpfy.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1bpebpfy.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp1bpebpfy.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.asciiValue! % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"\
    ]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpdpagq0p1.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpdpagq0p1.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let index = txt.firstIndex(of: \" \") {\n\
    \        return .success(txt.split(separator: \" \").map(String.init))\n    }\
    \ else if let index = txt.firstIndex(of: \",\") {\n        return .success(txt.split(separator:\
    \ \",\").map(String.init))\n    } else {\n        return .failure(txt.filter {\
    \ $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(split_words(txt:\
    \ \"Hello world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: Exception
  stderr: 'tmplac6vfp4/tmplac6vfp4.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac71d141c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac71ce38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac71ce38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac71ce377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplac6vfp4                        0x000056193a440313 <unavailable> + 8979

    5    libc.so.6                          0x00002ac71d32d460 __libc_start_main +
    245

    6    tmplac6vfp4                        0x000056193a43f7f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1bpebpfy.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp1bpebpfy.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let idx = txt.firstIndex(of: \" \") {\n \
    \       return .success(txt.split(separator: \" \").map { String($0) })\n    }\
    \ else if let idx = txt.firstIndex(of: \",\") {\n        return .success(txt.split(separator:\
    \ \",\").map { String($0) })\n    } else {\n        return .failure(txt.filter\
    \ { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpqb3uam9m/tmpqb3uam9m.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b468ea48c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b468e73fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b468e73f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b468e73e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqb3uam9m                        0x000055b199ee0313 <unavailable> + 8979

    5    libc.so.6                          0x00002b468ec34460 __libc_start_main +
    245

    6    tmpqb3uam9m                        0x000055b199edf7f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1bpebpfy.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp1bpebpfy.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for (index, char) in txt.enumerated()\
    \ {\n            if index % 2 == 0 && char.isLowercase {\n                count\
    \ += 1\n            }\n        }\n        return .failure(count)\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpv9dylcev.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpv9dylcev.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1bpebpfy.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp1bpebpfy.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    let words = txt.split(separator: \" \")\n  \
    \  if words.count > 1 {\n        return .success(words.map { String($0) })\n \
    \   }\n    let words2 = txt.split(separator: \",\")\n    if words2.count > 1 {\n\
    \        return .success(words2.map { String($0) })\n    }\n    let lowerCase\
    \ = txt.filter { $0.isLowercase }\n    return .failure(lowerCase.count)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpbgl7k6b4/tmpbgl7k6b4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b152d31cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b152d013b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b152d013988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b152d0127b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbgl7k6b4                        0x0000563dc9a472d3 <unavailable> + 8915

    5    libc.so.6                          0x00002b152d508460 __libc_start_main +
    245

    6    tmpbgl7k6b4                        0x0000563dc9a467b9 <unavailable> + 6073

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        var count = 0\n        for (i, c) in txt.lowercased().enumerated()\
    \ {\n            if i % 2 == 0 && c.asciiValue! >= 97 && c.asciiValue! <= 122\
    \ {\n                count += 1\n            }\n        }\n        return .failure(count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp2z7ly6qp.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp2z7ly6qp.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().reduce(0) { $1.offset % 2 == 0 ? $0 + 1 : $0 })\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyy14gtml.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyy14gtml.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if let index = txt.firstIndex(of: \" \") {\n\
    \        return .success(txt.split(separator: \" \").map { String($0) })\n   \
    \ } else if let index = txt.firstIndex(of: \",\") {\n        return .success(txt.split(separator:\
    \ \",\").map { String($0) })\n    } else {\n        return .failure(txt.filter\
    \ { $0.isLowercase }.count)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(split_words(txt: \"Hello world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello,world!\") == .success([\"Hello\", \"world!\"]))\n\
    assert(split_words(txt: \"Hello world,!\") == .success([\"Hello\", \"world,!\"\
    ]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\"\
    , \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\nassert(split_words(txt:\
    \ \"aaabb\") == .failure(2))\nassert(split_words(txt: \"aaaBb\") == .failure(1))\n\
    assert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpzo4r4zve/tmpzo4r4zve.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b31b4857c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b31b454eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b31b454e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31b454d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzo4r4zve                        0x0000559e20099313 <unavailable> + 8979

    5    libc.so.6                          0x00002b31b4a43460 __libc_start_main +
    245

    6    tmpzo4r4zve                        0x0000559e200987f9 <unavailable> + 6137

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter{$0.isLowercase}.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpr0cvfn_e.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpr0cvfn_e.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    return .success(txt.split(separator: \" \").map(String.init))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmput9c7x0e/tmput9c7x0e.swift:29: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4277921c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4277618b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4277618988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b42776177b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmput9c7x0e                        0x00005591d20c8cbe <unavailable> + 7358

    5    libc.so.6                          0x00002b4277b0d460 __libc_start_main +
    245

    6    tmput9c7x0e                        0x00005591d20c8649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().reduce(0) { $1.offset % 2 == 0 ? $0 + 1 : $0 })\n    }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"\
    Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"\
    Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpyy14gtml.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpyy14gtml.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.map { $0.element }.count)\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello,world!\"\
    ) == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"Hello world,!\"\
    ) == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world\
    \ !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"\
    abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp1bpebpfy.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp1bpebpfy.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase &&\
    \ $0.unicodeScalars.first!.value % 2 == 1 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmpot5d5un4.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmpot5d5un4.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    return .failure(1)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: Exception
  stderr: 'tmpktxf36j_/tmpktxf36j_.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17f9981c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b17f9678b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b17f9678988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b17f96777b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpktxf36j_                        0x00005599a254684c <unavailable> + 6220

    5    libc.so.6                          0x00002b17f9b6d460 __libc_start_main +
    245

    6    tmpktxf36j_                        0x00005599a2546389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.lowercased().filter { $0.isLetter\
    \ }.enumerated().filter { $0.offset % 2 == 0 }.count)\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(split_words(txt: \"Hello world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello,world!\") == .success([\"Hello\"\
    , \"world!\"]))\nassert(split_words(txt: \"Hello world,!\") == .success([\"Hello\"\
    , \"world,!\"]))\nassert(split_words(txt: \"Hello,Hello,world !\") == .success([\"\
    Hello,Hello,world\", \"!\"]))\nassert(split_words(txt: \"abcdef\") == .failure(3))\n\
    assert(split_words(txt: \"aaabb\") == .failure(2))\nassert(split_words(txt: \"\
    aaaBb\") == .failure(1))\nassert(split_words(txt: \"\") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp6hz0qsby.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp6hz0qsby.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// Given a string of words, return\
    \ a list of words split on whitespace, if no whitespaces exists in the text you\n\
    /// should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n/// alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n/// Examples\n/// split_words(\"Hello world!\") \u279E\
    \ [\"Hello\", \"world!\"]\n/// split_words(\"Hello,world!\") \u279E [\"Hello\"\
    , \"world!\"]\n/// split_words(\"abcdef\") == 3\nfunc split_words(txt: String)\
    \ -> Result<[String], Int> {\n    if txt.contains(\" \") {\n        return .success(txt.components(separatedBy:\
    \ \" \"))\n    } else if txt.contains(\",\") {\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n    } else {\n        return .failure(txt.filter { $0.isLowercase }.count)\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(split_words(txt: \"Hello\
    \ world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt: \"\
    Hello,world!\") == .success([\"Hello\", \"world!\"]))\nassert(split_words(txt:\
    \ \"Hello world,!\") == .success([\"Hello\", \"world,!\"]))\nassert(split_words(txt:\
    \ \"Hello,Hello,world !\") == .success([\"Hello,Hello,world\", \"!\"]))\nassert(split_words(txt:\
    \ \"abcdef\") == .failure(3))\nassert(split_words(txt: \"aaabb\") == .failure(2))\n\
    assert(split_words(txt: \"aaaBb\") == .failure(1))\nassert(split_words(txt: \"\
    \") == .failure(0))"
  status: SyntaxError
  stderr: "/tmp/tmp42hty225.swift:13:29: error: value of type 'String' has no member\
    \ 'components'\n        return .success(txt.components(separatedBy: \" \"))\n\
    \                        ~~~ ^~~~~~~~~~\n/tmp/tmp42hty225.swift:15:29: error:\
    \ value of type 'String' has no member 'components'\n        return .success(txt.components(separatedBy:\
    \ \",\"))\n                        ~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820983
