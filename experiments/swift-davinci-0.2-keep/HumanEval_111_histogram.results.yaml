language: swift
name: HumanEval_111_histogram
results:
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbj_vp_d4.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for element\
    \ in array {\n        if let count = dict[element] {\n            dict[element]\
    \ = count + 1\n        } else {\n            dict[element] = 1\n        }\n  \
    \  }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfz5md5vs.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.characters.split{$0 == \" \"}.map(String.init)\n\
    \    for str in arr {\n        if let count = dict[str] {\n            dict[str]\
    \ = count + 1\n        } else {\n            dict[str] = 1\n        }\n    }\n\
    \    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7qev9pn6.swift:13:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    let arr = test.characters.split{$0 == \" \"}.map(String.init)\n\
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if let count = dict[i] {\n            dict[i] = count +\
    \ 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiyo8drym.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if result[item] == nil {\n            result[item] = 1\n\
    \        } else {\n            result[item]! += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbnebffej.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if dict[letter] == nil {\n            dict[letter]\
    \ = 1\n        } else {\n            dict[letter]! += 1\n        }\n    }\n  \
    \  return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp01kgtwii.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for item\
    \ in arr {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7exbkh8h.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbj_vp_d4.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    var max = 0\n    var maxKeys = [String]()\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n    for i in arr {\n        if let val = dict[i] {\n            dict[i]\
    \ = val + 1\n        } else {\n            dict[i] = 1\n        }\n        if\
    \ dict[i] > max {\n            max = dict[i]!\n            maxKeys = [i]\n   \
    \     } else if dict[i] == max {\n            maxKeys.append(i)\n        }\n \
    \   }\n    var result = [String : Int]()\n    for i in maxKeys {\n        result[i]\
    \ = max\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpjrw89cs8.swift:15:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptlf_1hes.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n\
    \    for letter in letters {\n        if histogram[letter] == nil {\n        \
    \    histogram[letter] = 1\n        } else {\n            histogram[letter]! +=\
    \ 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9fsenovm.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.characters.split{$0 == \" \"}.map(String.init)\n\
    \    for letter in letters {\n        if let count = result[letter] {\n      \
    \      result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp46h2o5ak.swift:13:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let letters = test.characters.split{$0 == \" \"}.map(String.init)\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptlf_1hes.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    return test.characters.reduce([String\
    \ : Int]()) { (var dict, char) in\n        let key = String(char)\n        if\
    \ let count = dict[key] {\n            dict[key] = count + 1\n        } else {\n\
    \            dict[key] = 1\n        }\n        return dict\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpwh5l_ls9.swift:12:56: error: closure cannot have keyword arguments\n\
    \    return test.characters.reduce([String : Int]()) { (var dict, char) in\n \
    \                                                      ^~~~\n                \
    \                                       \n/tmp/tmpwh5l_ls9.swift:15:17: error:\
    \ cannot assign through subscript: 'dict' is a 'let' constant\n            dict[key]\
    \ = count + 1\n            ~~~~^\n/tmp/tmpwh5l_ls9.swift:17:17: error: cannot\
    \ assign through subscript: 'dict' is a 'let' constant\n            dict[key]\
    \ = 1\n            ~~~~^\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = result[item] {\n            result[item]\
    \ = count + 1\n        } else {\n            result[item] = 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9w4tgq3q.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let testArray = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in testArray {\n        if let count = result[letter] {\n           \
    \ result[letter] = count + 1\n        } else {\n            result[letter] = 1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp268sgg7s.swift:13:26: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let testArray = test.componentsSeparatedByString(\"\
    \ \")\n                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var histogram = [String : Int]()\n    for letter in letters {\n   \
    \     if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpp9wft_vp.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var histogram = [String : Int]()\n    for letter in letters {\n   \
    \     if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpp9wft_vp.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var dict = [String : Int]()\n    for letter in letters {\n        if\
    \ let count = dict[letter] {\n            dict[letter] = count + 1\n        }\
    \ else {\n            dict[letter] = 1\n        }\n    }\n    return dict\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpt4n4_lv1.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptlf_1hes.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let testArray = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in testArray {\n        if let count = result[letter] {\n           \
    \ result[letter] = count + 1\n        } else {\n            result[letter] = 1\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp268sgg7s.swift:13:26: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let testArray = test.componentsSeparatedByString(\"\
    \ \")\n                    ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let words = test.componentsSeparatedByString(\" \")\n    for word\
    \ in words {\n        if let count = result[word] {\n            result[word]\
    \ = count + 1\n        } else {\n            result[word] = 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpj35eb0fx.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    for letter in test.characters {\n        let letterString\
    \ = String(letter)\n        if let count = histogram[letterString] {\n       \
    \     histogram[letterString] = count + 1\n        } else {\n            histogram[letterString]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxz96dwfa.swift:13:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in test.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.characters.split(\" \").map(String.init)\n\
    \    for letter in letters {\n        if let count = result[letter] {\n      \
    \      result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnpq2axos.swift:13:35: error: no exact matches in call to instance\
    \ method 'split'\n    let letters = test.characters.split(\" \").map(String.init)\n\
    \                                  ^\nSwift.Sequence:2:40: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public\
    \ __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String\
    \ : Int] = [:]\n    let letters = test.componentsSeparatedByString(\" \")\n  \
    \  for letter in letters {\n        if let count = result[letter] {\n        \
    \    result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_koj3mgb.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.characters.split(\" \").map(String.init)\n\
    \    for letter in letters {\n        if result[letter] == nil {\n           \
    \ result[letter] = 1\n        } else {\n            result[letter]! += 1\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp6xx6adkk.swift:13:35: error: no exact matches in call to instance\
    \ method 'split'\n    let letters = test.characters.split(\" \").map(String.init)\n\
    \                                  ^\nSwift.Sequence:2:40: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public\
    \ __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for letter\
    \ in array {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp03h99wma.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if dict[i] == nil {\n            dict[i] = 1\n        }\
    \ else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg8iasj99.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for item\
    \ in arr {\n        if dict[item] == nil {\n            dict[item] = 1\n     \
    \   } else {\n            dict[item] = dict[item]! + 1\n        }\n    }\n   \
    \ return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdqelkfb4.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbj_vp_d4.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String\
    \ : Int] = [:]\n    var maxCount = 0\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    for letter in letters {\n        if let count = result[letter] {\n\
    \            result[letter] = count + 1\n            if count + 1 > maxCount {\n\
    \                maxCount = count + 1\n            }\n        } else {\n     \
    \       result[letter] = 1\n            if 1 > maxCount {\n                maxCount\
    \ = 1\n            }\n        }\n    }\n    return result.filter { $0.1 == maxCount\
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(histogram(test: \"a b b a\")\
    \ == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\"\
    \ : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\"\
    \ : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") ==\
    \ [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") ==\
    \ [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"\
    g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnrwayfzc.swift:14:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    var letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if result[letter] == nil {\n            result[letter]\
    \ = 1\n        } else {\n            result[letter]! += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpr3r6o1a5.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    var letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    var max = 0\n    for letter in test.componentsSeparatedByString(\"\
    \ \") {\n        if let count = dict[letter] {\n            dict[letter] = count\
    \ + 1\n        } else {\n            dict[letter] = 1\n        }\n        if dict[letter]\
    \ > max {\n            max = dict[letter]!\n        }\n    }\n    var result =\
    \ [String : Int]()\n    for (key, value) in dict {\n        if value == max {\n\
    \            result[key] = value\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9orx35hv.swift:14:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    for letter in test.componentsSeparatedByString(\"\
    \ \") {\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var histogram = [String : Int]()\n    for letter in letters {\n   \
    \     if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpp9wft_vp.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    var letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpyc1rxhmu.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    var letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var dict = [String : Int]()\n    for letter in letters {\n        if\
    \ let count = dict[letter] {\n            dict[letter] = count + 1\n        }\
    \ else {\n            dict[letter] = 1\n        }\n    }\n    return dict\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpt4n4_lv1.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbj_vp_d4.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if dict[i] == nil {\n            dict[i] = 1\n        }\
    \ else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg8iasj99.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for element\
    \ in array {\n        if let count = dict[element] {\n            dict[element]\
    \ = count + 1\n        } else {\n            dict[element] = 1\n        }\n  \
    \  }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfz5md5vs.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if let count = dict[i] {\n            dict[i] = count +\
    \ 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiyo8drym.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for element\
    \ in array {\n        if let count = dict[element] {\n            dict[element]\
    \ = count + 1\n        } else {\n            dict[element] = 1\n        }\n  \
    \  }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpfz5md5vs.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if let count = dict[i] {\n            dict[i] = count +\
    \ 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiyo8drym.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.characters.split{$0\
    \ == \" \"}.map(String.init)\n    var histogram = [String : Int]()\n    for letter\
    \ in letters {\n        if let count = histogram[letter] {\n            histogram[letter]\
    \ = count + 1\n        } else {\n            histogram[letter] = 1\n        }\n\
    \    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpkd0vu_ql.swift:12:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let letters = test.characters.split{$0 == \" \"}.map(String.init)\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if let count = dict[i] {\n            dict[i] = count +\
    \ 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiyo8drym.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if result[letter] == nil {\n            result[letter]\
    \ = 1\n        } else {\n            result[letter]! += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpjp7f1h3c.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String\
    \ : Int] = [:]\n    let arr = test.componentsSeparatedByString(\" \")\n    for\
    \ i in arr {\n        if let count = dict[i] {\n            dict[i] = count +\
    \ 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpk7_i8ju0.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if let count = dict[i] {\n            dict[i] = count +\
    \ 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiyo8drym.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbj_vp_d4.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else\
    \ {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return dict\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_xgm_70g.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for letter\
    \ in array {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdxwwnnat.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if result[letter] == nil {\n            result[letter]\
    \ = 1\n        } else {\n            result[letter]! += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpjp7f1h3c.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for item\
    \ in arr {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7exbkh8h.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for str\
    \ in array {\n        if let count = dict[str] {\n            dict[str] = count\
    \ + 1\n        } else {\n            dict[str] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxev35j5e.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else\
    \ {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return dict\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_xgm_70g.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if result[letter] == nil {\n            result[letter]\
    \ = 1\n        } else {\n            result[letter]! += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpjp7f1h3c.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if dict[letter] == nil {\n            dict[letter]\
    \ = 1\n        } else {\n            dict[letter]! += 1\n        }\n    }\n  \
    \  return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp01kgtwii.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbj_vp_d4.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let words = test.componentsSeparatedByString(\" \")\n    for word\
    \ in words {\n        if let count = result[word] {\n            result[word]\
    \ = count + 1\n        } else {\n            result[word] = 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpj35eb0fx.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if dict[i] == nil {\n            dict[i] = 1\n        }\
    \ else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg8iasj99.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if result[letter] == nil {\n            result[letter]\
    \ = 1\n        } else {\n            result[letter]! += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpjp7f1h3c.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.characters.split(\" \").map(String.init)\n\
    \    for letter in letters {\n        if let count = result[letter] {\n      \
    \      result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpnpq2axos.swift:13:35: error: no exact matches in call to instance\
    \ method 'split'\n    let letters = test.characters.split(\" \").map(String.init)\n\
    \                                  ^\nSwift.Sequence:2:40: note: incorrect labels\
    \ for candidate (have: '(_:)', expected: '(separator:)')\n    @inlinable public\
    \ __consuming func split(separator: Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences:\
    \ Bool = true) -> [ArraySlice<Self.Element>]\n                               \
    \        ^\nSwift.Collection:2:40: note: incorrect labels for candidate (have:\
    \ '(_:)', expected: '(separator:)')\n    @inlinable public __consuming func split(separator:\
    \ Self.Element, maxSplits: Int = Int.max, omittingEmptySubsequences: Bool = true)\
    \ -> [Self.SubSequence]\n                                       ^\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var counts = [String : Int]()\n    for letter in letters {\n      \
    \  if counts[letter] == nil {\n            counts[letter] = 1\n        } else\
    \ {\n            counts[letter]! += 1\n        }\n    }\n    return counts\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpd7z65e37.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict: [String\
    \ : Int] = [:]\n    let letters = test.componentsSeparatedByString(\" \")\n  \
    \  for letter in letters {\n        if let count = dict[letter] {\n          \
    \  dict[letter] = count + 1\n        } else {\n            dict[letter] = 1\n\
    \        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp1h1iuu3z.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbj_vp_d4.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if dict[i] == nil {\n            dict[i] = 1\n        }\
    \ else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg8iasj99.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var histogram = [String : Int]()\n    for letter in letters {\n   \
    \     if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpp9wft_vp.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let words = test.componentsSeparatedByString(\"\
    \ \")\n    var dict = [String : Int]()\n    for word in words {\n        if let\
    \ count = dict[word] {\n            dict[word] = count + 1\n        } else {\n\
    \            dict[word] = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpssr2j0p9.swift:12:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    let words = test.componentsSeparatedByString(\" \")\n\
    \    for word in words {\n        if let count = histogram[word] {\n         \
    \   histogram[word] = count + 1\n        } else {\n            histogram[word]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpomw6zzls.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var histogram = [String : Int]()\n    for letter in letters {\n   \
    \     if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpp9wft_vp.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var histo = [String : Int]()\n    for letter in letters {\n       \
    \ if let count = histo[letter] {\n            histo[letter] = count + 1\n    \
    \    } else {\n            histo[letter] = 1\n        }\n    }\n    return histo\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp8avpz6gc.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if result[item] == nil {\n            result[item] = 1\n\
    \        } else {\n            result[item]! += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbnebffej.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.characters.split{$0 == \" \"}.map(String.init)\n\
    \    for letter in letters {\n        if result[letter] == nil {\n           \
    \ result[letter] = 1\n        } else {\n            result[letter]! += 1\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp06g2q0gv.swift:13:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    let letters = test.characters.split{$0 == \" \"}.map(String.init)\n\
    \                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1659820522
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbj_vp_d4.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = result[item] {\n            result[item]\
    \ = count + 1\n        } else {\n            result[item] = 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9w4tgq3q.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if let count = dict[i] {\n            dict[i] = count +\
    \ 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiyo8drym.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    var maxCount = 0\n    var maxLetter = \"\"\n    let letters =\
    \ test.componentsSeparatedByString(\" \")\n    for letter in letters {\n     \
    \   if let count = result[letter] {\n            result[letter] = count + 1\n\
    \        } else {\n            result[letter] = 1\n        }\n        if result[letter]\
    \ > maxCount {\n            maxCount = result[letter]!\n            maxLetter\
    \ = letter\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7j3e5i1y.swift:15:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var histogram = [String : Int]()\n    for letter in letters {\n   \
    \     if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpp9wft_vp.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for letter\
    \ in array {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdxwwnnat.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbj_vp_d4.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for letter\
    \ in array {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdxwwnnat.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptlf_1hes.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    for c in test.characters {\n        if let count = dict[String(c)]\
    \ {\n            dict[String(c)] = count + 1\n        } else {\n            dict[String(c)]\
    \ = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpk_gv7wio.swift:13:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in test.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820522
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var histogram = [String : Int]()\n    for letter in letters {\n   \
    \     if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpp9wft_vp.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for letter\
    \ in array {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdxwwnnat.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    var max = 0\n    for letter in test.characters {\n        let\
    \ str = String(letter)\n        if let count = dict[str] {\n            dict[str]\
    \ = count + 1\n            if count + 1 > max {\n                max = count +\
    \ 1\n            }\n        } else {\n            dict[str] = 1\n            if\
    \ 1 > max {\n                max = 1\n            }\n        }\n    }\n    var\
    \ result = [String : Int]()\n    for (key, value) in dict {\n        if value\
    \ == max {\n            result[key] = value\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpwgmx8_x2.swift:14:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in test.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820522
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if result[letter] == nil {\n            result[letter]\
    \ = 1\n        } else {\n            result[letter]! += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpjp7f1h3c.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if let count = dict[i] {\n            dict[i] = count +\
    \ 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiyo8drym.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else\
    \ {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return dict\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_xgm_70g.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    let words = test.componentsSeparatedByString(\" \")\n\
    \    for word in words {\n        if let count = histogram[word] {\n         \
    \   histogram[word] = count + 1\n        } else {\n            histogram[word]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpomw6zzls.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = result[item] {\n            result[item]\
    \ = count + 1\n        } else {\n            result[item] = 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp9w4tgq3q.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if let count = dict[i] {\n            dict[i] = count +\
    \ 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiyo8drym.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for letter\
    \ in array {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp03h99wma.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var dict = [String : Int]()\n    for letter in letters {\n        if\
    \ let count = dict[letter] {\n            dict[letter] = count + 1\n        }\
    \ else {\n            dict[letter] = 1\n        }\n    }\n    return dict\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpt4n4_lv1.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if dict[i] == nil {\n            dict[i] = 1\n        }\
    \ else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg8iasj99.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result: [String\
    \ : Int] = [:]\n    let letters = test.componentsSeparatedByString(\" \")\n  \
    \  for letter in letters {\n        if let count = result[letter] {\n        \
    \    result[letter] = count + 1\n        } else {\n            result[letter]\
    \ = 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_koj3mgb.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if let count = dict[i] {\n            dict[i] = count +\
    \ 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiyo8drym.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let words = test.componentsSeparatedByString(\" \")\n    for word\
    \ in words {\n        if let count = dict[word] {\n            dict[word] = count\
    \ + 1\n        } else {\n            dict[word] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpddckrvlo.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820522
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for item\
    \ in arr {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7exbkh8h.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if dict[i] == nil {\n            dict[i] = 1\n        }\
    \ else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg8iasj99.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var dict = [String : Int]()\n    for letter in letters {\n        if\
    \ let count = dict[letter] {\n            dict[letter] = count + 1\n        }\
    \ else {\n            dict[letter] = 1\n        }\n    }\n    return dict\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpt4n4_lv1.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    let words = test.componentsSeparatedByString(\" \")\n\
    \    for word in words {\n        if let count = histogram[word] {\n         \
    \   histogram[word] = count + 1\n        } else {\n            histogram[word]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpomw6zzls.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbj_vp_d4.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for item\
    \ in arr {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7exbkh8h.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if result[item] == nil {\n            result[item] = 1\n\
    \        } else {\n            result[item]! += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbnebffej.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else\
    \ {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return dict\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_xgm_70g.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var histogram = [String : Int]()\n    for letter in letters {\n   \
    \     if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpp9wft_vp.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    var maxCount = 0\n    var maxLetter = \"\"\n    for letter in\
    \ test.characters {\n        if let count = result[String(letter)] {\n       \
    \     result[String(letter)] = count + 1\n            if count + 1 > maxCount\
    \ {\n                maxCount = count + 1\n                maxLetter = String(letter)\n\
    \            }\n        } else {\n            result[String(letter)] = 1\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp3xyxt8no.swift:15:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in test.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp3xyxt8no.swift:14:9:\
    \ warning: variable 'maxLetter' was written to, but never read\n    var maxLetter\
    \ = \"\"\n        ^\n"
  stdout: ''
  timestamp: 1659820522
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for item\
    \ in arr {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7exbkh8h.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if result[letter] == nil {\n            result[letter]\
    \ = 1\n        } else {\n            result[letter]! += 1\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(histogram(test: \"\
    a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpjp7f1h3c.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for item\
    \ in arr {\n        if let value = dict[item] {\n            dict[item] = value\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpos93ad1u.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820522
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if dict[item] == nil {\n            dict[item] = 1\n   \
    \     } else {\n            dict[item]! += 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpqozeb4ps.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820522
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if let count = dict[i] {\n            dict[i] = count +\
    \ 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiyo8drym.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if let count = dict[i] {\n            dict[i] = count +\
    \ 1\n        } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpiyo8drym.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if result[item] == nil {\n            result[item] = 1\n\
    \        } else {\n            result[item]! += 1\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a\
    \ b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") ==\
    \ [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1,\
    \ \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\"\
    ) == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbnebffej.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    for char in test.characters {\n        if let count = dict[String(char)]\
    \ {\n            dict[String(char)] = count + 1\n        } else {\n          \
    \  dict[String(char)] = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpboduyqc9.swift:13:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in test.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1659820522
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n    var dict = [String : Int]()\n    for item in array {\n        if let\
    \ count = dict[item] {\n            dict[item] = count + 1\n        } else {\n\
    \            dict[item] = 1\n        }\n    }\n    return dict\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp7ky0jf2q.swift:12:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820522
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for str\
    \ in array {\n        if let count = dict[str] {\n            dict[str] = count\
    \ + 1\n        } else {\n            dict[str] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpxev35j5e.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if let count = dict[i] {\n            dict[i] = count + 1\n \
    \       } else {\n            dict[i] = 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpmn8e86j8.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var histogram = [String : Int]()\n    for letter in letters {\n   \
    \     if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpp9wft_vp.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpbj_vp_d4.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptlf_1hes.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for i\
    \ in array {\n        if dict[i] == nil {\n            dict[i] = 1\n        }\
    \ else {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return dict\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpg8iasj99.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n    for\
    \ letter in letters {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdjlhpgux.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for letter\
    \ in array {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdxwwnnat.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    var letters = [String]()\n    var count = [Int]()\n    var letter\
    \ = \"\"\n    var max = 0\n    var maxCount = 0\n    var index = 0\n    var indexMax\
    \ = 0\n    for i in test.characters {\n        if i != \" \" {\n            letter\
    \ += String(i)\n        } else {\n            letters.append(letter)\n       \
    \     letter = \"\"\n        }\n    }\n    letters.append(letter)\n    for i in\
    \ letters {\n        count.append(letters.filter{$0 == i}.count)\n    }\n    for\
    \ i in count {\n        if i > max {\n            max = i\n        }\n    }\n\
    \    for i in count {\n        if i == max {\n            maxCount += 1\n    \
    \    }\n    }\n    for i in 0..<maxCount {\n        for j in 0..<count.count {\n\
    \            if count[j] == max {\n                indexMax = j\n            \
    \    break\n            }\n        }\n        result[letters[indexMax]] = count[indexMax]\n\
    \        count[indexMax] = 0\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\n\
    assert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\"\
    \ : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String\
    \ : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpcv6meo6w.swift:20:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in test.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpcv6meo6w.swift:18:9:\
    \ warning: initialization of variable 'index' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    var index = 0\n    ~~~~^~~~~\n  \
    \  _\n/tmp/tmpcv6meo6w.swift:42:9: warning: immutable value 'i' was never used;\
    \ consider replacing with '_' or removing it\n    for i in 0..<maxCount {\n  \
    \      ^\n        _\n"
  stdout: ''
  timestamp: 1659820522
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for item\
    \ in array {\n        if let count = dict[item] {\n            dict[item] = count\
    \ + 1\n        } else {\n            dict[item] = 1\n        }\n    }\n    return\
    \ dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(histogram(test: \"a b b\
    \ a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"\
    a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"\
    b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\")\
    \ == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\"\
    ) == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" : 1,\
    \ \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\nassert(histogram(test:\
    \ \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpimww11np.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var histogram =\
    \ [String : Int]()\n    let letters = test.componentsSeparatedByString(\" \")\n\
    \    for letter in letters {\n        if let count = histogram[letter] {\n   \
    \         histogram[letter] = count + 1\n        } else {\n            histogram[letter]\
    \ = 1\n        }\n    }\n    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test:\
    \ \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d\
    \ g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    b b b b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1,\
    \ \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmptlf_1hes.swift:13:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for letter\
    \ in array {\n        if let count = dict[letter] {\n            dict[letter]\
    \ = count + 1\n        } else {\n            dict[letter] = 1\n        }\n   \
    \ }\n    return dict\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpdxwwnnat.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var dict = [String\
    \ : Int]()\n    let arr = test.componentsSeparatedByString(\" \")\n    for i in\
    \ arr {\n        if dict[i] == nil {\n            dict[i] = 1\n        } else\
    \ {\n            dict[i] = dict[i]! + 1\n        }\n    }\n    return dict\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(histogram(test: \"a b b a\") == [\"a\" : 2, \"\
    b\" : 2])\nassert(histogram(test: \"a b c a b\") == [\"a\" : 2, \"b\" : 2])\n\
    assert(histogram(test: \"a b c d g\") == [\"a\" : 1, \"b\" : 1, \"c\" : 1, \"\
    d\" : 1, \"g\" : 1])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"t\" :\
    \ 1, \"g\" : 1])\nassert(histogram(test: \"b b b b a\") == [\"b\" : 4])\nassert(histogram(test:\
    \ \"r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\"\
    ) == [:] as [String : Int])\nassert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp_xgm_70g.swift:13:20: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let arr = test.componentsSeparatedByString(\"\
    \ \")\n              ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let words = test.componentsSeparatedByString(\" \")\n    for word\
    \ in words {\n        if let count = result[word] {\n            result[word]\
    \ = count + 1\n        } else {\n            result[word] = 1\n        }\n   \
    \ }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpj35eb0fx.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let words = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    var result = [String\
    \ : Int]()\n    let array = test.componentsSeparatedByString(\" \")\n    for letter\
    \ in array {\n        if let count = result[letter] {\n            result[letter]\
    \ = count + 1\n        } else {\n            result[letter] = 1\n        }\n \
    \   }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmp03h99wma.swift:13:22: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let array = test.componentsSeparatedByString(\"\
    \ \")\n                ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
- exit_code: 1
  program: "\n/// Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n/// of the letter with the most repetition and containing\
    \ the corresponding count.\n/// If several letters have the same occurrence, return\
    \ all of them.\n/// Example:\n/// histogram('a b c') == {'a': 1, 'b': 1, 'c':\
    \ 1}\n/// histogram('a b b a') == {'a': 2, 'b': 2}\n/// histogram('a b c a b')\
    \ == {'a': 2, 'b': 2}\n/// histogram('b b b b a') == {'b': 4}\n/// histogram('')\
    \ == {}\nfunc histogram(test: String) -> [String : Int] {\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n    var histogram = [String : Int]()\n    for letter in letters {\n   \
    \     if let count = histogram[letter] {\n            histogram[letter] = count\
    \ + 1\n        } else {\n            histogram[letter] = 1\n        }\n    }\n\
    \    return histogram\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(histogram(test:\
    \ \"a b b a\") == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c a b\"\
    ) == [\"a\" : 2, \"b\" : 2])\nassert(histogram(test: \"a b c d g\") == [\"a\"\
    \ : 1, \"b\" : 1, \"c\" : 1, \"d\" : 1, \"g\" : 1])\nassert(histogram(test: \"\
    r t g\") == [\"r\" : 1, \"t\" : 1, \"g\" : 1])\nassert(histogram(test: \"b b b\
    \ b a\") == [\"b\" : 4])\nassert(histogram(test: \"r t g\") == [\"r\" : 1, \"\
    t\" : 1, \"g\" : 1])\nassert(histogram(test: \"\") == [:] as [String : Int])\n\
    assert(histogram(test: \"a\") == [\"a\" : 1])"
  status: SyntaxError
  stderr: "/tmp/tmpp9wft_vp.swift:12:24: error: value of type 'String' has no member\
    \ 'componentsSeparatedByString'\n    let letters = test.componentsSeparatedByString(\"\
    \ \")\n                  ~~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659820521
