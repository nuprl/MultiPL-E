name: HumanEval_140_fix_spaces
language: swift
prompt: "\n/// Given a string text, replace all spaces in it with underscores, \n\
  /// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n/// fix_spaces(\"\
  Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") == \"_Example_2\"\n\
  /// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text: String)\
  \ -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fix_spaces(text: \"Example\") == \"Example\"\
  )\nassert(fix_spaces(text: \"Mudasir Hanif \") == \"Mudasir_Hanif_\")\nassert(fix_spaces(text:\
  \ \"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\nassert(fix_spaces(text:\
  \ \"Exa   mple\") == \"Exa-mple\")\nassert(fix_spaces(text: \"   Exa 1 2 2 mple\"\
  ) == \"-Exa_1_2_2_mple\")"
completions: ['    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replace(" ", with: "_").replace("  ", with:
    "-")', '    return text.replacingOccurrences(of: " +", with: "_", options: .regularExpression,
    range: nil)', '    return text.replacingOccurrences(of: " +", with: "-", options:
    .regularExpression, range: nil).replacingOccurrences(of: " ", with: "_")', '    return
    text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of: " ", with:
    "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\"\
    , options: .CaseInsensitive)\n    let range = NSMakeRange(0, text.characters.count)\n\
    \    let result = regex.stringByReplacingMatchesInString(text, options: [], range:\
    \ range, withTemplate: \"_\")\n    return result", '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    let regex = try!\
    \ NSRegularExpression(pattern: \"\\\\s{2,}\", options: .caseInsensitive)\n   \
    \ let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.stringByReplacingMatches(in:\
    \ text, options: [], range: range, withTemplate: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")", '    return text.replacingOccurrences(of: " +", with:
    "-", options: .regularExpression, range: nil).replacingOccurrences(of: " ", with:
    "_")', '    return text.replacingOccurrences(of: " +", with: "-", options: .regularExpression,
    range: nil).replacingOccurrences(of: " ", with: "_")', "    let pattern = \"\\\
    \\s{2,}\"\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let\
    \ modifiedString = regex.stringByReplacingMatches(in: text, options: [], range:\
    \ range, withTemplate: \"-\")\n    return modifiedString.replacingOccurrences(of:\
    \ \" \", with: \"_\")", '    return text.replacingOccurrences(of: " +", with:
    "-", options: .regularExpression, range: nil).replacingOccurrences(of: " ", with:
    "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: " +", with: "-", options:
    .regularExpression, range: nil).replacingOccurrences(of: " ", with: "_")', '    return
    text.replacingOccurrences(of: " +", with: "-", options: .regularExpression, range:
    nil).replacingOccurrences(of: " ", with: "_")', "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s{2,}\", options: .caseInsensitive)\n    let range = NSRange(location:\
    \ 0, length: text.utf16.count)\n    let modifiedString = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: range, withTemplate: \"-\")\n    return modifiedString.replacingOccurrences(of:\
    \ \" \", with: \"_\")", "    var result = \"\"\n    var prevChar: Character?\n\
    \    for char in text {\n        if char == \" \" {\n            if prevChar ==\
    \ \" \" {\n                result.append(\"-\")\n            } else {\n      \
    \          result.append(\"_\")\n            }\n        } else {\n           \
    \ result.append(char)\n        }\n        prevChar = char\n    }\n    return result",
  '    return text.replacingOccurrences(of: "\\s+", with: "-", options: .regularExpression)',
  '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")']
stop_tokens:
- "\n}"
