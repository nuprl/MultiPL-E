name: HumanEval_140_fix_spaces
language: swift
prompt: "\n/// Given a string text, replace all spaces in it with underscores, \n\
  /// and if a string has more than 2 consecutive spaces, \n/// then replace all consecutive\
  \ spaces with - \n/// fix_spaces(\"Example\") == \"Example\"\n/// fix_spaces(\"\
  Example 1\") == \"Example_1\"\n/// fix_spaces(\" Example 2\") == \"_Example_2\"\n\
  /// fix_spaces(\" Example   3\") == \"_Example-3\"\nfunc fix_spaces(text: String)\
  \ -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(fix_spaces(text: \"Example\") == \"Example\"\
  )\nassert(fix_spaces(text: \"Mudasir Hanif \") == \"Mudasir_Hanif_\")\nassert(fix_spaces(text:\
  \ \"Yellow Yellow  Dirty  Fellow\") == \"Yellow_Yellow__Dirty__Fellow\")\nassert(fix_spaces(text:\
  \ \"Exa   mple\") == \"Exa-mple\")\nassert(fix_spaces(text: \"   Exa 1 2 2 mple\"\
  ) == \"-Exa_1_2_2_mple\")"
completions: ['    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replace(" ", with: "_").replace("  ", with:
    "-")', '    return text.replacingOccurrences(of: " +", with: "_", options: .regularExpression,
    range: nil)', '    return text.replacingOccurrences(of: " +", with: "-", options:
    .regularExpression, range: nil).replacingOccurrences(of: " ", with: "_")', '    return
    text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of: " ", with:
    "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    let regex = try! NSRegularExpression(pattern: \"\\\\s+\"\
    , options: .CaseInsensitive)\n    let range = NSMakeRange(0, text.characters.count)\n\
    \    let result = regex.stringByReplacingMatchesInString(text, options: [], range:\
    \ range, withTemplate: \"_\")\n    return result", '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    let regex = try!\
    \ NSRegularExpression(pattern: \"\\\\s{2,}\", options: .caseInsensitive)\n   \
    \ let range = NSRange(location: 0, length: text.utf16.count)\n    return regex.stringByReplacingMatches(in:\
    \ text, options: [], range: range, withTemplate: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")", '    return text.replacingOccurrences(of: " +", with:
    "-", options: .regularExpression, range: nil).replacingOccurrences(of: " ", with:
    "_")', '    return text.replacingOccurrences(of: " +", with: "-", options: .regularExpression,
    range: nil).replacingOccurrences(of: " ", with: "_")', "    let pattern = \"\\\
    \\s{2,}\"\n    let regex = try! NSRegularExpression(pattern: pattern, options:\
    \ [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n    let\
    \ modifiedString = regex.stringByReplacingMatches(in: text, options: [], range:\
    \ range, withTemplate: \"-\")\n    return modifiedString.replacingOccurrences(of:\
    \ \" \", with: \"_\")", '    return text.replacingOccurrences(of: " +", with:
    "-", options: .regularExpression, range: nil).replacingOccurrences(of: " ", with:
    "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: " +", with: "-", options:
    .regularExpression, range: nil).replacingOccurrences(of: " ", with: "_")', '    return
    text.replacingOccurrences(of: " +", with: "-", options: .regularExpression, range:
    nil).replacingOccurrences(of: " ", with: "_")', "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s{2,}\", options: .caseInsensitive)\n    let range = NSRange(location:\
    \ 0, length: text.utf16.count)\n    let modifiedString = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: range, withTemplate: \"-\")\n    return modifiedString.replacingOccurrences(of:\
    \ \" \", with: \"_\")", "    var result = \"\"\n    var prevChar: Character?\n\
    \    for char in text {\n        if char == \" \" {\n            if prevChar ==\
    \ \" \" {\n                result.append(\"-\")\n            } else {\n      \
    \          result.append(\"_\")\n            }\n        } else {\n           \
    \ result.append(char)\n        }\n        prevChar = char\n    }\n    return result",
  '    return text.replacingOccurrences(of: "\\s+", with: "-", options: .regularExpression)',
  '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: " +", with: "-", options:
    .regularExpression, range: nil).replacingOccurrences(of: " ", with: "_")', " \
    \   let regex = try! NSRegularExpression(pattern: \"\\\\s{2,}\", options: [])\n\
    \    let range = NSRange(location: 0, length: text.utf16.count)\n    let result\
    \ = regex.stringByReplacingMatches(in: text, options: [], range: range, withTemplate:\
    \ \"-\")\n    return result.replacingOccurrences(of: \" \", with: \"_\")", '    return
    text.replacingOccurrences(of: " {2,}", with: "-", options: .regularExpression).replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: "\\s+", with: "-",
    options: .regularExpression)', "    var result = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    result = result.replacingOccurrences(of: \"__\", with:\
    \ \"-\")\n    return result", '    return text.replacingOccurrences(of: " {2,}",
    with: "-", options: .regularExpression).replacingOccurrences(of: " ", with: "_")',
  '    return text.replacingOccurrences(of: " +", with: "-", options: .regularExpression,
    range: nil).replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    " +", with: "-", options: .regularExpression, range: nil).replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: " {2,}", with: "-",
    options: .regularExpression).replacingOccurrences(of: " ", with: "_")', '    return
    text.replacingOccurrences(of: " +", with: "-", options: .regularExpression, range:
    nil).replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    " {2,}", with: "-", options: .regularExpression).replacingOccurrences(of: " ",
    with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: " +", with: "-", options:
    .regularExpression, range: nil).replacingOccurrences(of: " ", with: "_")', '    return
    text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of: " ", with:
    "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: " +", with: "-", options:
    .regularExpression, range: nil).replacingOccurrences(of: " ", with: "_")', '    return
    text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of: " ", with:
    "_")', '    return text.replacingOccurrences(of: "\\s+", with: "-", options: .regularExpression)',
  "    let result = text.replacingOccurrences(of: \" \", with: \"_\")\n    let result2\
    \ = result.replacingOccurrences(of: \"__\", with: \"-\")\n    return result2",
  '    return text.replacingOccurrences(of: " {2,}", with: "-", options: .regularExpression).replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    var result = \"\"\n    var spaceCount = 0\n    for char\
    \ in text {\n        if char == \" \" {\n            spaceCount += 1\n       \
    \     if spaceCount > 2 {\n                result += \"-\"\n                spaceCount\
    \ = 0\n            }\n        } else {\n            if spaceCount > 0 {\n    \
    \            result += \"_\"\n                spaceCount = 0\n            }\n\
    \            result += String(char)\n        }\n    }\n    return result", '    return
    text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of: " ", with:
    "_")', "    var result = \"\"\n    var prev = \"\"\n    for char in text {\n \
    \       if char == \" \" {\n            if prev == \" \" {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n        } else {\n            result += String(char)\n        }\n      \
    \  prev = String(char)\n    }\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s{2,}\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n\
    \    return regex.stringByReplacingMatches(in: text, options: [], range: range,\
    \ withTemplate: \"-\")\n        .replacingOccurrences(of: \" \", with: \"_\")",
  '    return text.replacingOccurrences(of: " +", with: "-", options: .regularExpression,
    range: nil).replacingOccurrences(of: " ", with: "_")', "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s{2,}\", options: [])\n    let range = NSRange(location: 0, length: text.count)\n\
    \    let result = regex.stringByReplacingMatches(in: text, options: [], range:\
    \ range, withTemplate: \"-\")\n    return result.replacingOccurrences(of: \" \"\
    , with: \"_\")", "    var result = text.replacingOccurrences(of: \"  \", with:\
    \ \"-\")\n    result = result.replacingOccurrences(of: \" \", with: \"_\")\n \
    \   return result", '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    var result = \"\"\n    var prevChar = Character(\"\")\n\
    \    var prevPrevChar = Character(\"\")\n    for char in text {\n        if char\
    \ == \" \" {\n            if prevChar == \" \" {\n                if prevPrevChar\
    \ == \" \" {\n                    result.append(\"-\")\n                } else\
    \ {\n                    result.append(\"_\")\n                }\n           \
    \ } else {\n                result.append(\"_\")\n            }\n        } else\
    \ {\n            result.append(char)\n        }\n        prevPrevChar = prevChar\n\
    \        prevChar = char\n    }\n    return result", '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    let regex = try!\
    \ NSRegularExpression(pattern: \"\\\\s{2,}\", options: [])\n    let result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSRange(location: 0, length: text.count), withTemplate:\
    \ \"-\")\n    return result.replacingOccurrences(of: \" \", with: \"_\")", '    return
    text.replacingOccurrences(of: " +", with: "-", options: .regularExpression, range:
    nil).replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    let space = \"\
    \ \"\n    let underscore = \"_\"\n    let dash = \"-\"\n    var result = \"\"\n\
    \    var count = 0\n    for char in text {\n        if char == Character(space)\
    \ {\n            if count < 2 {\n                result.append(Character(underscore))\n\
    \                count += 1\n            } else {\n                result.append(Character(dash))\n\
    \            }\n        } else {\n            result.append(char)\n          \
    \  count = 0\n        }\n    }\n    return result", "    let result = text.replacingOccurrences(of:\
    \ \"  \", with: \"-\")\n    return result.replacingOccurrences(of: \" \", with:\
    \ \"_\")", "    var result = \"\"\n    var lastChar = \"\"\n    var spaceCount\
    \ = 0\n    for char in text {\n        if char == \" \" {\n            spaceCount\
    \ += 1\n            if spaceCount > 2 {\n                result += \"-\"\n   \
    \             spaceCount = 0\n            }\n        } else {\n            if\
    \ spaceCount > 0 {\n                result += \"_\"\n                spaceCount\
    \ = 0\n            }\n            result += String(char)\n        }\n        lastChar\
    \ = String(char)\n    }\n    return result", '    return text.replacingOccurrences(of:
    "\\s+", with: " ", options: .regularExpression).replacingOccurrences(of: " ",
    with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    var result = \"\"\n    var spaceCount = 0\n    for char\
    \ in text {\n        if char == \" \" {\n            spaceCount += 1\n       \
    \     if spaceCount == 1 {\n                result += \"_\"\n            }\n \
    \       } else {\n            if spaceCount > 2 {\n                result += \"\
    -\"\n            }\n            result += String(char)\n            spaceCount\
    \ = 0\n        }\n    }\n    return result", "    let result = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return result.replacingOccurrences(of: \"__\", with:\
    \ \"-\")", "    let regex = try! NSRegularExpression(pattern: \"\\\\s{2,}\", options:\
    \ [])\n    let range = NSRange(location: 0, length: text.count)\n    let result\
    \ = regex.stringByReplacingMatches(in: text, options: [], range: range, withTemplate:\
    \ \"-\")\n    return result.replacingOccurrences(of: \" \", with: \"_\")", '    return
    text.replacingOccurrences(of: " +", with: "-", options: .regularExpression, range:
    nil).replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    "\\s+", with: "-", options: .regularExpression)', "    var result = \"\"\n   \
    \ var previous = \"\"\n    for char in text {\n        if char == \" \" {\n  \
    \          if previous == \" \" {\n                result += \"-\"\n         \
    \   } else {\n                result += \"_\"\n            }\n        } else {\n\
    \            result += String(char)\n        }\n        previous = String(char)\n\
    \    }\n    return result", '    return text.replacingOccurrences(of: " +", with:
    "-", options: .regularExpression, range: nil).replacingOccurrences(of: " ", with:
    "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    var result = \"\"\n    var space_count = 0\n    for char\
    \ in text {\n        if char == \" \" {\n            space_count += 1\n      \
    \      if space_count == 1 {\n                result += \"_\"\n            }\n\
    \        } else {\n            if space_count > 2 {\n                result +=\
    \ \"-\"\n            }\n            result += String(char)\n            space_count\
    \ = 0\n        }\n    }\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s{2,}\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n\
    \    let result = regex.stringByReplacingMatches(in: text, options: [], range:\
    \ range, withTemplate: \"-\")\n    return result.replacingOccurrences(of: \" \"\
    , with: \"_\")", '    return text.replacingOccurrences(of: " +", with: "-", options:
    .regularExpression, range: nil).replacingOccurrences(of: " ", with: "_")', " \
    \   return text.replacingOccurrences(of: \" {2,}\", with: \"-\", options: .regularExpression)\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")", '    return text.replacingOccurrences(of:
    " +", with: "-", options: .regularExpression, range: nil).replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replace(" ", with: "_").replace("  ", with:
    "-")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: " {2,}", with: "-",
    options: .regularExpression).replacingOccurrences(of: " ", with: "_")', '    return
    text.replacingOccurrences(of: " +", with: "-", options: .regularExpression, range:
    nil).replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    " +", with: "-", options: .regularExpression, range: nil).replacingOccurrences(of:
    " ", with: "_")', "    let regex = try! NSRegularExpression(pattern: \"\\\\s{2,}\"\
    , options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n\
    \    let result = regex.stringByReplacingMatches(in: text, options: [], range:\
    \ range, withTemplate: \"-\")\n    return result.replacingOccurrences(of: \" \"\
    , with: \"_\")", "    let regex = try! NSRegularExpression(pattern: \"\\\\s{2,}\"\
    , options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n\
    \    let result = regex.stringByReplacingMatches(in: text, options: [], range:\
    \ range, withTemplate: \"-\")\n    return result.replacingOccurrences(of: \" \"\
    , with: \"_\")", "    var result = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    result = result.replacingOccurrences(of: \"__\", with: \"-\")\n\
    \    return result", '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    var result = \"\"\n    var spaceCount = 0\n    for char\
    \ in text {\n        if char == \" \" {\n            spaceCount += 1\n       \
    \     if spaceCount == 1 {\n                result += \"_\"\n            }\n \
    \       } else {\n            if spaceCount > 2 {\n                result += \"\
    -\"\n            }\n            result += String(char)\n            spaceCount\
    \ = 0\n        }\n    }\n    return result", '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    " {2,}", with: "-", options: .regularExpression).replacingOccurrences(of: " ",
    with: "_")', '    return text.replacingOccurrences(of: " {2,}", with: "-", options:
    .regularExpression).replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    var result =\
    \ text.replacingOccurrences(of: \" \", with: \"_\")\n    result = result.replacingOccurrences(of:\
    \ \"__\", with: \"-\")\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s{2,}\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n\
    \    let result = regex.stringByReplacingMatches(in: text, options: [], range:\
    \ range, withTemplate: \"-\")\n    return result.replacingOccurrences(of: \" \"\
    , with: \"_\")", "    let result = text.replacingOccurrences(of: \"  \", with:\
    \ \"-\")\n    return result.replacingOccurrences(of: \" \", with: \"_\")", '    return
    text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of: " ", with:
    "_")', '    return text.replacingOccurrences(of: " +", with: "-", options: .regularExpression,
    range: nil).replacingOccurrences(of: " ", with: "_")', "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s+\", options: .CaseInsensitive)\n    let range = NSMakeRange(0, text.characters.count)\n\
    \    let modifiedString = regex.stringByReplacingMatchesInString(text, options:\
    \ [], range: range, withTemplate: \"_\")\n    return modifiedString", '    return
    text.replacingOccurrences(of: " +", with: "-", options: .regularExpression, range:
    nil).replacingOccurrences(of: " ", with: "_")', "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s{2,}\", options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n\
    \    let result = regex.stringByReplacingMatches(in: text, options: [], range:\
    \ range, withTemplate: \"-\")\n    return result.replacingOccurrences(of: \" \"\
    , with: \"_\")", "    var result = \"\"\n    var prevChar: Character?\n    for\
    \ char in text {\n        if char == \" \" {\n            if prevChar == \" \"\
    \ {\n                result.append(\"-\")\n            } else {\n            \
    \    result.append(\"_\")\n            }\n        } else {\n            result.append(char)\n\
    \        }\n        prevChar = char\n    }\n    return result", "    let regex\
    \ = try! NSRegularExpression(pattern: \"\\\\s{2,}\", options: [])\n    let range\
    \ = NSRange(location: 0, length: text.utf16.count)\n    let result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: range, withTemplate: \"-\")\n    return result.replacingOccurrences(of:\
    \ \" \", with: \"_\")", "    let result = text.replacingOccurrences(of: \" \"\
    , with: \"_\")\n    return result.replacingOccurrences(of: \"__\", with: \"-\"\
    )", "    var result = \"\"\n    var spaceCount = 0\n    for char in text {\n \
    \       if char == \" \" {\n            spaceCount += 1\n            if spaceCount\
    \ == 1 {\n                result += \"_\"\n            }\n        } else {\n \
    \           if spaceCount > 2 {\n                result += \"-\"\n           \
    \ }\n            result += String(char)\n            spaceCount = 0\n        }\n\
    \    }\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s{2,}\", options: .caseInsensitive)\n    return regex.stringByReplacingMatches(in:\
    \ text, options: [], range: NSRange(location: 0, length: text.count), withTemplate:\
    \ \"-\")", '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: "\\s+", with: "-",
    options: .regularExpression)', '    return text.replacingOccurrences(of: " +",
    with: "-", options: .regularExpression, range: nil).replacingOccurrences(of: "
    ", with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    let result = text.replacingOccurrences(of: \"  \", with:\
    \ \"-\")\n    return result.replacingOccurrences(of: \" \", with: \"_\")", '    return
    text.replacingOccurrences(of: " +", with: "-", options: .regularExpression, range:
    nil).replacingOccurrences(of: " ", with: "_")', "    var result = \"\"\n    var\
    \ spaceCount = 0\n    for char in text {\n        if char == \" \" {\n       \
    \     spaceCount += 1\n            if spaceCount == 1 {\n                result\
    \ += \"_\"\n            }\n        } else {\n            if spaceCount > 2 {\n\
    \                result += \"-\"\n            }\n            result += String(char)\n\
    \            spaceCount = 0\n        }\n    }\n    return result", "    let regex\
    \ = try! NSRegularExpression(pattern: \"\\\\s{2,}\", options: [])\n    let range\
    \ = NSRange(location: 0, length: text.utf16.count)\n    return regex.stringByReplacingMatches(in:\
    \ text, options: [], range: range, withTemplate: \"-\")\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")", '    return text.replacingOccurrences(of: " {2,}", with:
    "-", options: .regularExpression).replacingOccurrences(of: " ", with: "_")', '    return
    text.replacingOccurrences(of: " +", with: "-", options: .regularExpression, range:
    nil).replacingOccurrences(of: " ", with: "_")', "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s{2,}\", options: .caseInsensitive)\n    let range = NSRange(location:\
    \ 0, length: text.utf16.count)\n    let result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: range, withTemplate: \"-\")\n    return result.replacingOccurrences(of:\
    \ \" \", with: \"_\")", '    return text.replacingOccurrences(of: "  ", with:
    "-").replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    let result =\
    \ text.replacingOccurrences(of: \" \", with: \"_\")\n    return result.replacingOccurrences(of:\
    \ \"__\", with: \"-\")", '    return text.replacingOccurrences(of: " +", with:
    "_", options: .regularExpression)', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    var result =\
    \ text.replacingOccurrences(of: \" \", with: \"_\")\n    result = result.replacingOccurrences(of:\
    \ \"__\", with: \"_\")\n    result = result.replacingOccurrences(of: \"___\",\
    \ with: \"-\")\n    return result", "    let regex = try! NSRegularExpression(pattern:\
    \ \"\\\\s{2,}\", options: [])\n    let range = NSRange(location: 0, length: text.count)\n\
    \    let result = regex.stringByReplacingMatches(in: text, options: [], range:\
    \ range, withTemplate: \"-\")\n    return result.replacingOccurrences(of: \" \"\
    , with: \"_\")", '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    let str = text.replacingOccurrences(of: \" \", with: \"\
    _\")\n    let str2 = str.replacingOccurrences(of: \"__\", with: \"-\")\n    return\
    \ str2", '    return text.replacingOccurrences(of: " +", with: "-", options: .regularExpression,
    range: nil).replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    let regex = try!\
    \ NSRegularExpression(pattern: \"\\\\s{2,}\", options: .caseInsensitive)\n   \
    \ let range = NSRange(location: 0, length: text.count)\n    let result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: range, withTemplate: \"-\")\n    return result.replacingOccurrences(of:\
    \ \" \", with: \"_\")", "    var result = \"\"\n    var prevSpace = false\n  \
    \  for char in text {\n        if char == \" \" {\n            if prevSpace {\n\
    \                result += \"-\"\n            } else {\n                result\
    \ += \"_\"\n            }\n            prevSpace = true\n        } else {\n  \
    \          result += String(char)\n            prevSpace = false\n        }\n\
    \    }\n    return result", '    return text.replacingOccurrences(of: " +", with:
    "-", options: .regularExpression, range: nil).replacingOccurrences(of: " ", with:
    "_")', "    let regex = try! NSRegularExpression(pattern: \"\\\\s{2,}\", options:\
    \ [])\n    let result = regex.stringByReplacingMatches(in: text, options: [],\
    \ range: NSRange(location: 0, length: text.count), withTemplate: \"-\")\n    return\
    \ result.replacingOccurrences(of: \" \", with: \"_\")", "    let space = \" \"\
    \n    let underscore = \"_\"\n    let dash = \"-\"\n    var result = \"\"\n  \
    \  var spaceCount = 0\n    for char in text {\n        if char == Character(space)\
    \ {\n            spaceCount += 1\n            if spaceCount == 1 {\n         \
    \       result += underscore\n            } else if spaceCount == 2 {\n      \
    \          result += dash\n            }\n        } else {\n            spaceCount\
    \ = 0\n            result += String(char)\n        }\n    }\n    return result",
  "    let regex = try! NSRegularExpression(pattern: \" +\", options: .caseInsensitive)\n\
    \    let range = NSRange(location: 0, length: text.count)\n    let result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: range, withTemplate: \"_\")\n    return result", '    return
    text.replacingOccurrences(of: "\\s+", with: "-", options: .regularExpression)',
  "    var result = \"\"\n    var prev = \"\"\n    for char in text {\n        if\
    \ char == \" \" {\n            if prev == \" \" {\n                result += \"\
    -\"\n            } else {\n                result += \"_\"\n            }\n  \
    \      } else {\n            result += String(char)\n        }\n        prev =\
    \ String(char)\n    }\n    return result", '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    let result =\
    \ text.replacingOccurrences(of: \"  \", with: \"-\")\n    return result.replacingOccurrences(of:\
    \ \" \", with: \"_\")", "    let regex = try! NSRegularExpression(pattern: \"\\\
    \\s+\", options: .CaseInsensitive)\n    let range = NSMakeRange(0, text.characters.count)\n\
    \    let result = regex.stringByReplacingMatchesInString(text, options: [], range:\
    \ range, withTemplate: \"_\")\n    return result", '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    var result =\
    \ \"\"\n    var spaceCount = 0\n    for char in text {\n        if char == \"\
    \ \" {\n            spaceCount += 1\n            if spaceCount > 2 {\n       \
    \         continue\n            }\n        } else {\n            spaceCount =\
    \ 0\n        }\n        result.append(char)\n    }\n    return result.replacingOccurrences(of:\
    \ \" \", with: \"_\")", '    return text.replacingOccurrences(of: " +", with:
    "-", options: .regularExpression, range: nil).replacingOccurrences(of: " ", with:
    "_")', "    let pattern = \"\\\\s+\"\n    let regex = try! NSRegularExpression(pattern:\
    \ pattern, options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n\
    \    let modString = regex.stringByReplacingMatches(in: text, options: [], range:\
    \ range, withTemplate: \"_\")\n    return modString", '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    " +", with: "-", options: .regularExpression, range: nil).replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    var result = \"\"\n    var prev = \"\"\n    for char in\
    \ text {\n        if char == \" \" {\n            if prev == \" \" {\n       \
    \         result += \"-\"\n            } else {\n                result += \"\
    _\"\n            }\n        } else {\n            result += String(char)\n   \
    \     }\n        prev = String(char)\n    }\n    return result", "    let regex\
    \ = try! NSRegularExpression(pattern: \"\\\\s{2,}\", options: [])\n    let range\
    \ = NSRange(location: 0, length: text.utf16.count)\n    let result = regex.stringByReplacingMatches(in:\
    \ text, options: [], range: range, withTemplate: \"-\")\n    return result.replacingOccurrences(of:\
    \ \" \", with: \"_\")", "    var result = \"\"\n    var prev = \"\"\n    for char\
    \ in text {\n        if char == \" \" {\n            if prev == \" \" {\n    \
    \            result += \"-\"\n            } else {\n                result +=\
    \ \"_\"\n            }\n        } else {\n            result += String(char)\n\
    \        }\n        prev = String(char)\n    }\n    return result", "    return\
    \ text.replacingOccurrences(of: \"\\\\s{2,}\", with: \"-\", options: .regularExpression)\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")", "    let result = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    let result2 = result.replacingOccurrences(of: \"__\"\
    , with: \"-\")\n    return result2", "    var result = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    result = result.replacingOccurrences(of: \"__\", with:\
    \ \"_\")\n    result = result.replacingOccurrences(of: \"___\", with: \"-\")\n\
    \    return result", "    var result = \"\"\n    var spaceCount = 0\n    for char\
    \ in text {\n        if char == \" \" {\n            spaceCount += 1\n       \
    \     if spaceCount == 1 {\n                result += \"_\"\n            }\n \
    \       } else {\n            if spaceCount > 2 {\n                result += \"\
    -\"\n            }\n            result += String(char)\n            spaceCount\
    \ = 0\n        }\n    }\n    return result", "    var result = \"\"\n    var spaceCount\
    \ = 0\n    for char in text {\n        if char == \" \" {\n            spaceCount\
    \ += 1\n            if spaceCount == 2 {\n                result += \"-\"\n  \
    \          }\n        } else {\n            spaceCount = 0\n            result\
    \ += char\n        }\n    }\n    return result", "    var result = \"\"\n    var\
    \ spaceCount = 0\n    for char in text {\n        if char == \" \" {\n       \
    \     spaceCount += 1\n            if spaceCount == 1 {\n                result\
    \ += \"_\"\n            }\n        } else {\n            if spaceCount > 2 {\n\
    \                result += \"-\"\n            }\n            result += String(char)\n\
    \            spaceCount = 0\n        }\n    }\n    return result", "    var result\
    \ = text.replacingOccurrences(of: \"  \", with: \"-\")\n    result = result.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return result", "    let result = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    return result.replacingOccurrences(of: \"__\", with:\
    \ \"-\")", '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    let space = \" \"\n    let underscore = \"_\"\n    let\
    \ dash = \"-\"\n    var result = \"\"\n    var previous = \"\"\n    var count\
    \ = 0\n    for char in text {\n        if char == Character(space) {\n       \
    \     if previous == space {\n                count += 1\n                if count\
    \ > 2 {\n                    result.removeLast()\n                    result.append(Character(dash))\n\
    \                } else {\n                    result.append(Character(space))\n\
    \                }\n            } else {\n                result.append(Character(underscore))\n\
    \                count = 1\n            }\n        } else {\n            result.append(char)\n\
    \            count = 0\n        }\n        previous = String(char)\n    }\n  \
    \  return result", '    return text.replacingOccurrences(of: " +", with: "-",
    options: .regularExpression, range: nil).replacingOccurrences(of: " ", with: "_")',
  '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    let result = text.replacingOccurrences(of: \" \", with:\
    \ \"_\")\n    let result2 = result.replacingOccurrences(of: \"__\", with: \"-\"\
    )\n    return result2", '    return text.replacingOccurrences(of: "  ", with:
    "-").replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    var result =\
    \ \"\"\n    var prevSpace = false\n    for c in text {\n        if c == \" \"\
    \ {\n            if prevSpace {\n                result += \"-\"\n           \
    \ } else {\n                result += \"_\"\n            }\n            prevSpace\
    \ = true\n        } else {\n            result += String(c)\n            prevSpace\
    \ = false\n        }\n    }\n    return result", "    let result = text.replacingOccurrences(of:\
    \ \" \", with: \"_\")\n    let result2 = result.replacingOccurrences(of: \"__\"\
    , with: \"-\")\n    return result2", '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    var result =\
    \ text.replacingOccurrences(of: \" \", with: \"_\")\n    result = result.replacingOccurrences(of:\
    \ \"__\", with: \"-\")\n    return result", '    return text.replacingOccurrences(of:
    "\\s+", with: "-", options: .regularExpression)', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    var result =\
    \ text.replacingOccurrences(of: \" \", with: \"_\")\n    result = result.replacingOccurrences(of:\
    \ \"__\", with: \"_\")\n    result = result.replacingOccurrences(of: \"___\",\
    \ with: \"-\")\n    return result", '    return text.replacingOccurrences(of:
    " {2,}", with: "-", options: .regularExpression).replacingOccurrences(of: " ",
    with: "_")', '    return text.replacingOccurrences(of: " +", with: "-", options:
    .regularExpression, range: nil).replacingOccurrences(of: " ", with: "_")', '    return
    text.replacingOccurrences(of: "\\s+", with: "-", options: .regularExpression)',
  "    return text.replacingOccurrences(of: \" +\", with: \"-\", options: .regularExpression)\n\
    \        .replacingOccurrences(of: \" \", with: \"_\")", "    return text.replacingOccurrences(of:\
    \ \" +\", with: \"-\", options: .regularExpression)\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")", '    return text.replacingOccurrences(of: "\\s+", with:
    " ", options: .regularExpression).replacingOccurrences(of: " ", with: "_")', '    return
    text.replacingOccurrences(of: " +", with: "-", options: .regularExpression, range:
    nil).replacingOccurrences(of: " ", with: "_")', '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    let space = \"\
    \ \"\n    let underscore = \"_\"\n    let dash = \"-\"\n    var result = \"\"\n\
    \    var prev = \"\"\n    var count = 0\n    for char in text {\n        if char\
    \ == Character(space) {\n            if prev == Character(space) {\n         \
    \       count += 1\n                if count == 2 {\n                    result.append(Character(dash))\n\
    \                }\n            } else {\n                result.append(Character(underscore))\n\
    \            }\n        } else {\n            result.append(char)\n          \
    \  count = 0\n        }\n        prev = char\n    }\n    return result", '    return
    text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of: " ", with:
    "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    let result = text.replacingOccurrences(of: \"  \", with:\
    \ \"-\")\n    return result.replacingOccurrences(of: \" \", with: \"_\")", '    return
    text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of: " ", with:
    "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', '    return text.replacingOccurrences(of: "  ", with: "-").replacingOccurrences(of:
    " ", with: "_")', "    let regex = try! NSRegularExpression(pattern: \"\\\\s{2,}\"\
    , options: [])\n    let range = NSRange(location: 0, length: text.utf16.count)\n\
    \    let result = regex.stringByReplacingMatches(in: text, options: [], range:\
    \ range, withTemplate: \"-\")\n    return result.replacingOccurrences(of: \" \"\
    , with: \"_\")", "    let newText = text.replacingOccurrences(of: \"  \", with:\
    \ \"-\")\n    return newText.replacingOccurrences(of: \" \", with: \"_\")", " \
    \   var result = \"\"\n    var lastChar = \"\"\n    for char in text {\n     \
    \   if char == \" \" {\n            if lastChar == \" \" {\n                result\
    \ += \"-\"\n            } else {\n                result += \"_\"\n          \
    \  }\n        } else {\n            result += String(char)\n        }\n      \
    \  lastChar = String(char)\n    }\n    return result", '    return text.replacingOccurrences(of:
    "  ", with: "-").replacingOccurrences(of: " ", with: "_")', "    return text.replacingOccurrences(of:\
    \ \" +\", with: \"-\", options: .regularExpression)\n        .replacingOccurrences(of:\
    \ \" \", with: \"_\")", "    var result = text.replacingOccurrences(of: \"  \"\
    , with: \"-\")\n    result = result.replacingOccurrences(of: \" \", with: \"_\"\
    )\n    return result", "    let regex = try! NSRegularExpression(pattern: \"\\\
    \\s+\", options: .caseInsensitive)\n    let range = NSRange(location: 0, length:\
    \ text.count)\n    return regex.stringByReplacingMatches(in: text, options: [],\
    \ range: range, withTemplate: \"_\")"]
stop_tokens:
- "\n}"
