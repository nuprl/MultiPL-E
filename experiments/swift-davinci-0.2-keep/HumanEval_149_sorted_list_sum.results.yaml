language: swift
name: HumanEval_149_sorted_list_sum
results:
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for word in lst {\n\
    \        if word.count % 2 == 0 {\n            result.append(word)\n        }\n\
    \    }\n    result.sort(by: { $0.count < $1.count })\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp7qgh373y/tmp7qgh373y.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7cc039dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7cc0094b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7cc0094988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7cc00937b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7qgh373y                        0x000055558afadf1f <unavailable> + 7967

    5    libc.so.6                          0x00002b7cc0589460 __libc_start_main +
    245

    6    tmp7qgh373y                        0x000055558afad449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i].count % 2 == 1 {\n            lst.remove(at: i)\n     \
    \   } else {\n            i += 1\n        }\n    }\n    lst.sort()\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpoe5kgcpc/tmpoe5kgcpc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c9740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c9437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c9437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c94367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoe5kgcpc                        0x00005632c23035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b14c992c460 __libc_start_main +
    245

    6    tmpoe5kgcpc                        0x00005632c23023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for item in lst\
    \ {\n        if item.count % 2 == 0 {\n            result.append(item)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmqajiyvk/tmpmqajiyvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab45345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab4503cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab4503c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab4503b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqajiyvk                        0x00005561b409767b <unavailable> + 9851

    5    libc.so.6                          0x00002aab45531460 __libc_start_main +
    245

    6    tmpmqajiyvk                        0x00005561b4096499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for item in lst {\n\
    \        if item.count % 2 == 0 {\n            result.append(item)\n        }\n\
    \    }\n    result.sort(by: { $0.count < $1.count })\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpgkerqsxn/tmpgkerqsxn.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af6a230ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af6a2001b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af6a2001988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6a20007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgkerqsxn                        0x0000557f260c9f1f <unavailable> + 7967

    5    libc.so.6                          0x00002af6a24f6460 __libc_start_main +
    245

    6    tmpgkerqsxn                        0x0000557f260c9449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var result: [String] = []\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 0 {\n\
    \            result.append(lst[i])\n            lst.remove(at: i)\n        } else\
    \ {\n            i += 1\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbivt5202/tmpbivt5202.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38091c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c37d88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c37d88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c37d877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbivt5202                        0x000055e2dff7a60b <unavailable> + 9739

    5    libc.so.6                          0x00002b2c3827d460 __libc_start_main +
    245

    6    tmpbivt5202                        0x000055e2dff79429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter({ $0.count % 2 == 0 }).sorted(by:\
    \ { $0.count < $1.count })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpcydzaoyu/tmpcydzaoyu.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af48bc4cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af48b943b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af48b943988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af48b9427b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcydzaoyu                        0x000055bd3f288dbf <unavailable> + 7615

    5    libc.so.6                          0x00002af48be38460 __libc_start_main +
    245

    6    tmpcydzaoyu                        0x000055bd3f2882e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let lst_sorted = lst.sorted { (a, b) -> Bool in\n\
    \        if a.count == b.count {\n            return a < b\n        }\n      \
    \  return a.count < b.count\n    }\n    var result: [String] = []\n    for i in\
    \ lst_sorted {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824725
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var lst_sorted = [String]()\n\
    \    var lst_sorted_2 = [String]()\n    var lst_sorted_3 = [String]()\n    var\
    \ lst_sorted_4 = [String]()\n    var lst_sorted_5 = [String]()\n    var lst_sorted_6\
    \ = [String]()\n    var lst_sorted_7 = [String]()\n    var lst_sorted_8 = [String]()\n\
    \    var lst_sorted_9 = [String]()\n    var lst_sorted_10 = [String]()\n    var\
    \ lst_sorted_11 = [String]()\n    var lst_sorted_12 = [String]()\n    var lst_sorted_13\
    \ = [String]()\n    var lst_sorted_14 = [String]()\n    var lst_sorted_15 = [String]()\n\
    \    var lst_sorted_16 = [String]()\n    var lst_sorted_17 = [String]()\n    var\
    \ lst_sorted_18 = [String]()\n    var lst_sorted_19 = [String]()\n    var lst_sorted_20\
    \ = [String]()\n    var lst_sorted_21 = [String]()\n    var lst_sorted_22 = [String]()\n\
    \    var lst_sorted_23 = [String]()\n    var lst_sorted_24 = [String]()\n    var\
    \ lst_sorted_25 = [String]()\n    var lst_sorted_26 = [String]()\n    var lst_sorted_27\
    \ = [String]()\n    var lst_sorted_28 = [String]()\n    var lst_sorted_29 = [String]()\n\
    \    var lst_sorted_30 = [String]()\n    var lst_sorted_31 = [String]()\n    var\
    \ lst_sorted_32 = [String]()\n    var lst_sorted_33 = [String]()\n    var lst_sorted_34\
    \ =\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp109adieu.swift:50:24: error: expected initial value after '='\n\
    \    var lst_sorted_34 =\n                       ^\n"
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i].count % 2 == 1 {\n            lst.remove(at: i)\n     \
    \   } else {\n            i += 1\n        }\n    }\n    lst.sort()\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpoe5kgcpc/tmpoe5kgcpc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c9740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c9437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c9437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c94367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoe5kgcpc                        0x00005632c23035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b14c992c460 __libc_start_main +
    245

    6    tmpoe5kgcpc                        0x00005632c23023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let sorted_lst = lst.sorted { (a, b) -> Bool in\n\
    \        if a.count == b.count {\n            return a < b\n        }\n      \
    \  return a.count < b.count\n    }\n    var result: [String] = []\n    for item\
    \ in sorted_lst {\n        if item.count % 2 == 0 {\n            result.append(item)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter({$0.count % 2 == 0}).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp12xcbn9g/tmp12xcbn9g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd10f63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd10c5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd10c5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd10c597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12xcbn9g                        0x0000555d9945e4fb <unavailable> + 9467

    5    libc.so.6                          0x00002acd1114f460 __libc_start_main +
    245

    6    tmp12xcbn9g                        0x0000555d9945d319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter({$0.count % 2 == 0}).sorted(by:\
    \ {$0.count < $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpc9p0rhki/tmpc9p0rhki.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bf47a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bf449eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bf449e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bf449d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc9p0rhki                        0x00005652f04d0dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b9bf4993460 __libc_start_main +
    245

    6    tmpc9p0rhki                        0x00005652f04d02e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i].count % 2 == 1 {\n            lst.remove(at: i)\n     \
    \   } else {\n            i += 1\n        }\n    }\n    lst.sort()\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpoe5kgcpc/tmpoe5kgcpc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c9740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c9437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c9437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c94367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoe5kgcpc                        0x00005632c23035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b14c992c460 __libc_start_main +
    245

    6    tmpoe5kgcpc                        0x00005632c23023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var result = [String]()\n  \
    \  var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 0 {\n\
    \            result.append(lst[i])\n            lst.remove(at: i)\n        } else\
    \ {\n            i += 1\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp9dug8oo2/tmp9dug8oo2.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17301bdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b172feb4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b172feb4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b172feb37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9dug8oo2                        0x000056370c95166b <unavailable> + 9835

    5    libc.so.6                          0x00002b17303a9460 __libc_start_main +
    245

    6    tmp9dug8oo2                        0x000056370c950489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for word in lst {\n\
    \        if word.count % 2 == 0 {\n            result.append(word)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpbbco9o54/tmpbbco9o54.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eeed53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eeea4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eeea4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eeea497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbbco9o54                        0x000055af62dcd6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b0eeef3f460 __libc_start_main +
    245

    6    tmpbbco9o54                        0x000055af62dcc4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for item in lst\
    \ {\n        if item.count % 2 == 0 {\n            result.append(item)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmqajiyvk/tmpmqajiyvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab45345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab4503cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab4503c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab4503b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqajiyvk                        0x00005561b409767b <unavailable> + 9851

    5    libc.so.6                          0x00002aab45531460 __libc_start_main +
    245

    6    tmpmqajiyvk                        0x00005561b4096499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    var length = 0\n \
    \   var temp = [String]()\n    for i in lst {\n        if i.count == length {\n\
    \            temp.append(i)\n        } else {\n            temp.sort()\n     \
    \       result.append(contentsOf: temp)\n            temp = [i]\n            length\
    \ = i.count\n        }\n    }\n    temp.sort()\n    result.append(contentsOf:\
    \ temp)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpaidy949p/tmpaidy949p.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2dfcb6cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2dfc863b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2dfc863988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2dfc8627b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaidy949p                        0x00005565fb567946 <unavailable> + 6470

    5    libc.so.6                          0x00002b2dfcd58460 __libc_start_main +
    245

    6    tmpaidy949p                        0x00005565fb5674c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for item in lst\
    \ {\n        if item.count % 2 == 0 {\n            result.append(item)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmqajiyvk/tmpmqajiyvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab45345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab4503cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab4503c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab4503b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqajiyvk                        0x00005561b409767b <unavailable> + 9851

    5    libc.so.6                          0x00002aab45531460 __libc_start_main +
    245

    6    tmpmqajiyvk                        0x00005561b4096499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for item in lst\
    \ {\n        if item.count % 2 == 0 {\n            result.append(item)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmqajiyvk/tmpmqajiyvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab45345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab4503cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab4503c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab4503b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqajiyvk                        0x00005561b409767b <unavailable> + 9851

    5    libc.so.6                          0x00002aab45531460 __libc_start_main +
    245

    6    tmpmqajiyvk                        0x00005561b4096499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for item in lst {\n\
    \        if item.count % 2 == 0 {\n            result.append(item)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpwgtijn1j/tmpwgtijn1j.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dd57a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dd5497b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dd5497988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dd54967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgtijn1j                        0x000055b41ff1e6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b1dd598c460 __libc_start_main +
    245

    6    tmpwgtijn1j                        0x000055b41ff1d4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for item in lst\
    \ {\n        if item.count % 2 == 0 {\n            result.append(item)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmqajiyvk/tmpmqajiyvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab45345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab4503cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab4503c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab4503b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqajiyvk                        0x00005561b409767b <unavailable> + 9851

    5    libc.so.6                          0x00002aab45531460 __libc_start_main +
    245

    6    tmpmqajiyvk                        0x00005561b4096499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i].count % 2 == 1 {\n            lst.remove(at: i)\n     \
    \   } else {\n            i += 1\n        }\n    }\n    return lst.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpygzw7a_h/tmpygzw7a_h.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c7a374c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c7a06bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c7a06b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c7a06a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpygzw7a_h                        0x00005581a229153b <unavailable> + 9531

    5    libc.so.6                          0x00002b4c7a560460 __libc_start_main +
    245

    6    tmpygzw7a_h                        0x00005581a2290359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let sorted_lst = lst.sorted {\n        if $0.count\
    \ == $1.count {\n            return $0 < $1\n        }\n        return $0.count\
    \ < $1.count\n    }\n    return sorted_lst.filter { $0.count % 2 == 0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var lst_sorted = [String]()\n\
    \    var lst_sorted_2 = [String]()\n    var lst_sorted_3 = [String]()\n    var\
    \ lst_sorted_4 = [String]()\n    var lst_sorted_5 = [String]()\n    var lst_sorted_6\
    \ = [String]()\n    var lst_sorted_7 = [String]()\n    var lst_sorted_8 = [String]()\n\
    \    var lst_sorted_9 = [String]()\n    var lst_sorted_10 = [String]()\n    var\
    \ lst_sorted_11 = [String]()\n    var lst_sorted_12 = [String]()\n    var lst_sorted_13\
    \ = [String]()\n    var lst_sorted_14 = [String]()\n    var lst_sorted_15 = [String]()\n\
    \    var lst_sorted_16 = [String]()\n    var lst_sorted_17 = [String]()\n    var\
    \ lst_sorted_18 = [String]()\n    var lst_sorted_19 = [String]()\n    var lst_sorted_20\
    \ = [String]()\n    var lst_sorted_21 = [String]()\n    var lst_sorted_22 = [String]()\n\
    \    var lst_sorted_23 = [String]()\n    var lst_sorted_24 = [String]()\n    var\
    \ lst_sorted_25 = [String]()\n    var lst_sorted_26 = [String]()\n    var lst_sorted_27\
    \ = [String]()\n    var lst_sorted_28 = [String]()\n    var lst_sorted_29 = [String]()\n\
    \    var lst_sorted_30 = [String]()\n    var lst_sorted_31 = [String]()\n    var\
    \ lst_sorted_32 = [String]()\n    var lst_sorted_33 = [String]()\n    var lst_sorted_34\
    \ =\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp109adieu.swift:50:24: error: expected initial value after '='\n\
    \    var lst_sorted_34 =\n                       ^\n"
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for i in lst {\n\
    \        if i.count % 2 == 0 {\n            result.append(i)\n        }\n    }\n\
    \    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpjn51oqg7/tmpjn51oqg7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e9709fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e96d96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e96d96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e96d957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjn51oqg7                        0x0000558257b9e67b <unavailable> + 9851

    5    libc.so.6                          0x00002b6e9728b460 __libc_start_main +
    245

    6    tmpjn51oqg7                        0x0000558257b9d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i].count % 2 == 1 {\n            lst.remove(at: i)\n     \
    \   } else {\n            i += 1\n        }\n    }\n    lst.sort()\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpoe5kgcpc/tmpoe5kgcpc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c9740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c9437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c9437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c94367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoe5kgcpc                        0x00005632c23035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b14c992c460 __libc_start_main +
    245

    6    tmpoe5kgcpc                        0x00005632c23023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let sorted_list = lst.sorted { (a, b) -> Bool in\n\
    \        if a.count == b.count {\n            return a < b\n        }\n      \
    \  return a.count < b.count\n    }\n    var result: [String] = []\n    for i in\
    \ sorted_list {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter({$0.count % 2 == 0}).sorted(by:\
    \ {$0.count < $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpc9p0rhki/tmpc9p0rhki.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bf47a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bf449eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bf449e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bf449d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc9p0rhki                        0x00005652f04d0dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b9bf4993460 __libc_start_main +
    245

    6    tmpc9p0rhki                        0x00005652f04d02e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let sorted_lst = lst.sorted { (a, b) -> Bool in\n\
    \        if a.count == b.count {\n            return a < b\n        }\n      \
    \  return a.count < b.count\n    }\n    var result = [String]()\n    var last_count\
    \ = 0\n    for word in sorted_lst {\n        if word.count != last_count {\n \
    \           result.append(word)\n            last_count = word.count\n       \
    \ }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw_lo320q/tmpw_lo320q.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad05e673c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad05e36ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad05e36a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad05e3697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw_lo320q                        0x000056262f4c1876 <unavailable> + 6262

    5    libc.so.6                          0x00002ad05e85f460 __libc_start_main +
    245

    6    tmpw_lo320q                        0x000056262f4c13f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let sorted_lst = lst.sorted { (a, b) -> Bool in\n\
    \        if a.count == b.count {\n            return a < b\n        }\n      \
    \  return a.count < b.count\n    }\n    var result: [String] = []\n    for i in\
    \ sorted_lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let sorted_lst = lst.sorted(by: {\n        if $0.count\
    \ == $1.count {\n            return $0 < $1\n        }\n        return $0.count\
    \ < $1.count\n    })\n    var result: [String] = []\n    for i in sorted_lst {\n\
    \        if i.count % 2 == 0 {\n            result.append(i)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824726
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let sorted_lst = lst.sorted {\n        if $0.count\
    \ == $1.count {\n            return $0 < $1\n        }\n        return $0.count\
    \ < $1.count\n    }\n    return sorted_lst.filter { $0.count % 2 == 0 }\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter({ $0.count % 2 == 0 }).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpjme_3lbi/tmpjme_3lbi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ef069fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ef0396b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ef0396988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ef03957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjme_3lbi                        0x00005568805f84fb <unavailable> + 9467

    5    libc.so.6                          0x00002b5ef088b460 __libc_start_main +
    245

    6    tmpjme_3lbi                        0x00005568805f7319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for item in lst {\n\
    \        if item.count % 2 == 0 {\n            result.append(item)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpwgtijn1j/tmpwgtijn1j.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dd57a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dd5497b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dd5497988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dd54967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgtijn1j                        0x000055b41ff1e6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b1dd598c460 __libc_start_main +
    245

    6    tmpwgtijn1j                        0x000055b41ff1d4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for item in lst {\n\
    \        if item.count % 2 == 0 {\n            result.append(item)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpwgtijn1j/tmpwgtijn1j.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dd57a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dd5497b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dd5497988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dd54967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgtijn1j                        0x000055b41ff1e6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b1dd598c460 __libc_start_main +
    245

    6    tmpwgtijn1j                        0x000055b41ff1d4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i].count % 2 == 1 {\n            lst.remove(at: i)\n     \
    \   } else {\n            i += 1\n        }\n    }\n    lst.sort()\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpoe5kgcpc/tmpoe5kgcpc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c9740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c9437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c9437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c94367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoe5kgcpc                        0x00005632c23035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b14c992c460 __libc_start_main +
    245

    6    tmpoe5kgcpc                        0x00005632c23023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for word in lst {\n\
    \        if word.count % 2 == 0 {\n            result.append(word)\n        }\n\
    \    }\n    result.sort(by: {$0.count < $1.count})\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpzm05fb_c/tmpzm05fb_c.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0df6e69c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0df6b60b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0df6b60988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0df6b5f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzm05fb_c                        0x000055b10fc8df1f <unavailable> + 7967

    5    libc.so.6                          0x00002b0df7055460 __libc_start_main +
    245

    6    tmpzm05fb_c                        0x000055b10fc8d449 <unavailable> + 5193

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i].count % 2 == 1 {\n            lst.remove(at: i)\n     \
    \   } else {\n            i += 1\n        }\n    }\n    lst.sort()\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpoe5kgcpc/tmpoe5kgcpc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c9740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c9437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c9437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c94367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoe5kgcpc                        0x00005632c23035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b14c992c460 __libc_start_main +
    245

    6    tmpoe5kgcpc                        0x00005632c23023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for i in lst {\n\
    \        if i.count % 2 == 0 {\n            result.append(i)\n        }\n    }\n\
    \    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpjn51oqg7/tmpjn51oqg7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e9709fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e96d96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e96d96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e96d957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjn51oqg7                        0x0000558257b9e67b <unavailable> + 9851

    5    libc.so.6                          0x00002b6e9728b460 __libc_start_main +
    245

    6    tmpjn51oqg7                        0x0000558257b9d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for item in lst\
    \ {\n        if item.count % 2 == 0 {\n            result.append(item)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmqajiyvk/tmpmqajiyvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab45345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab4503cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab4503c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab4503b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqajiyvk                        0x00005561b409767b <unavailable> + 9851

    5    libc.so.6                          0x00002aab45531460 __libc_start_main +
    245

    6    tmpmqajiyvk                        0x00005561b4096499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for item in lst {\n\
    \        if item.count % 2 == 0 {\n            result.append(item)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpwgtijn1j/tmpwgtijn1j.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dd57a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dd5497b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dd5497988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dd54967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgtijn1j                        0x000055b41ff1e6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b1dd598c460 __libc_start_main +
    245

    6    tmpwgtijn1j                        0x000055b41ff1d4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i].count % 2 == 1 {\n            lst.remove(at: i)\n     \
    \   } else {\n            i += 1\n        }\n    }\n    lst.sort()\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpoe5kgcpc/tmpoe5kgcpc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c9740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c9437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c9437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c94367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoe5kgcpc                        0x00005632c23035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b14c992c460 __libc_start_main +
    245

    6    tmpoe5kgcpc                        0x00005632c23023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for item in lst\
    \ {\n        if item.count % 2 == 0 {\n            result.append(item)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmqajiyvk/tmpmqajiyvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab45345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab4503cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab4503c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab4503b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqajiyvk                        0x00005561b409767b <unavailable> + 9851

    5    libc.so.6                          0x00002aab45531460 __libc_start_main +
    245

    6    tmpmqajiyvk                        0x00005561b4096499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var result: [String] = []\n\
    \    var index = 0\n    while index < lst.count {\n        if lst[index].count\
    \ % 2 == 0 {\n            result.append(lst[index])\n            lst.remove(at:\
    \ index)\n        } else {\n            index += 1\n        }\n    }\n    result.sort()\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpsgkozzru/tmpsgkozzru.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b889bfdbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b889bcd2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b889bcd2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b889bcd17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsgkozzru                        0x0000560854d9560b <unavailable> + 9739

    5    libc.so.6                          0x00002b889c1c7460 __libc_start_main +
    245

    6    tmpsgkozzru                        0x0000560854d94429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var lst_len = lst.count\n  \
    \  var i = 0\n    while i < lst_len {\n        if lst[i].count % 2 == 1 {\n  \
    \          lst.remove(at: i)\n            lst_len -= 1\n        } else {\n   \
    \         i += 1\n        }\n    }\n    lst.sort(by: { $0.count < $1.count })\n\
    \    return lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpw8aixm05/tmpw8aixm05.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b17712ebc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1770fe2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1770fe2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1770fe17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8aixm05                        0x00005598d8dbadff <unavailable> + 7679

    5    libc.so.6                          0x00002b17714d7460 __libc_start_main +
    245

    6    tmpw8aixm05                        0x00005598d8dba329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var lst_len = lst.count\n  \
    \  var i = 0\n    while i < lst_len {\n        if lst[i].count % 2 == 1 {\n  \
    \          lst.remove(at: i)\n            lst_len -= 1\n        } else {\n   \
    \         i += 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp49rwcmai/tmp49rwcmai.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0cab0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0c7a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0c7a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0c7a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49rwcmai                        0x0000555db276c5bb <unavailable> + 9659

    5    libc.so.6                          0x00002b6b0cc9c460 __libc_start_main +
    245

    6    tmp49rwcmai                        0x0000555db276b3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for word in lst {\n\
    \        if word.count % 2 == 0 {\n            result.append(word)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpbbco9o54/tmpbbco9o54.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eeed53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eeea4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eeea4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eeea497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbbco9o54                        0x000055af62dcd6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b0eeef3f460 __libc_start_main +
    245

    6    tmpbbco9o54                        0x000055af62dcc4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for item in lst\
    \ {\n        if item.count % 2 == 0 {\n            result.append(item)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmqajiyvk/tmpmqajiyvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab45345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab4503cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab4503c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab4503b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqajiyvk                        0x00005561b409767b <unavailable> + 9851

    5    libc.so.6                          0x00002aab45531460 __libc_start_main +
    245

    6    tmpmqajiyvk                        0x00005561b4096499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var lst_len = lst.count\n  \
    \  var i = 0\n    while i < lst_len {\n        if lst[i].count % 2 == 1 {\n  \
    \          lst.remove(at: i)\n            lst_len -= 1\n        } else {\n   \
    \         i += 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp49rwcmai/tmp49rwcmai.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0cab0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0c7a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0c7a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0c7a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49rwcmai                        0x0000555db276c5bb <unavailable> + 9659

    5    libc.so.6                          0x00002b6b0cc9c460 __libc_start_main +
    245

    6    tmp49rwcmai                        0x0000555db276b3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i].count % 2 == 1 {\n            lst.remove(at: i)\n     \
    \   } else {\n            i += 1\n        }\n    }\n    lst.sort()\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpoe5kgcpc/tmpoe5kgcpc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c9740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c9437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c9437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c94367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoe5kgcpc                        0x00005632c23035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b14c992c460 __libc_start_main +
    245

    6    tmpoe5kgcpc                        0x00005632c23023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    lst.sort(by: { $0.count < $1.count\
    \ })\n    var result: [String] = []\n    var i = 0\n    while i < lst.count {\n\
    \        if lst[i].count % 2 == 0 {\n            result.append(lst[i])\n     \
    \   }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpm87imja2/tmpm87imja2.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0868efac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0868bf1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0868bf1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0868bf07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm87imja2                        0x000055b8aa057dff <unavailable> + 7679

    5    libc.so.6                          0x00002b08690e6460 __libc_start_main +
    245

    6    tmpm87imja2                        0x000055b8aa057329 <unavailable> + 4905

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for item in lst\
    \ {\n        if item.count % 2 == 0 {\n            result.append(item)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmqajiyvk/tmpmqajiyvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab45345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab4503cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab4503c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab4503b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqajiyvk                        0x00005561b409767b <unavailable> + 9851

    5    libc.so.6                          0x00002aab45531460 __libc_start_main +
    245

    6    tmpmqajiyvk                        0x00005561b4096499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i].count % 2 == 1 {\n            lst.remove(at: i)\n     \
    \   } else {\n            i += 1\n        }\n    }\n    lst.sort()\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpoe5kgcpc/tmpoe5kgcpc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c9740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c9437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c9437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c94367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoe5kgcpc                        0x00005632c23035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b14c992c460 __libc_start_main +
    245

    6    tmpoe5kgcpc                        0x00005632c23023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for item in lst {\n\
    \        if item.count % 2 == 0 {\n            result.append(item)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpwgtijn1j/tmpwgtijn1j.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dd57a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dd5497b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dd5497988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dd54967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgtijn1j                        0x000055b41ff1e6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b1dd598c460 __libc_start_main +
    245

    6    tmpwgtijn1j                        0x000055b41ff1d4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for word in lst\
    \ {\n        if word.count % 2 == 0 {\n            result.append(word)\n     \
    \   }\n    }\n    result.sort(by: { $0.count < $1.count })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp0t7vp82n/tmp0t7vp82n.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b46840fac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4683df1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4683df1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4683df07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0t7vp82n                        0x000055c335f92ebf <unavailable> + 7871

    5    libc.so.6                          0x00002b46842e6460 __libc_start_main +
    245

    6    tmp0t7vp82n                        0x000055c335f923e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    var lst = lst\n  \
    \  while lst.count > 0 {\n        var min = lst[0]\n        for i in lst {\n \
    \           if i.count < min.count {\n                min = i\n            }\n\
    \        }\n        result.append(min)\n        lst.removeAll(where: {$0 == min})\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmppevxr5xn/tmppevxr5xn.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9f0a4ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9f0a1d4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9f0a1d4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9f0a1d37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppevxr5xn                        0x000055dee2a189a6 <unavailable> + 6566

    5    libc.so.6                          0x00002b9f0a6c9460 __libc_start_main +
    245

    6    tmppevxr5xn                        0x000055dee2a18529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for item in lst\
    \ {\n        if item.count % 2 == 0 {\n            result.append(item)\n     \
    \   }\n    }\n    result.sort(by: { $0.count < $1.count })\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpkgkwp01g/tmpkgkwp01g.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afbd010ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afbcfe05b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afbcfe05988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afbcfe047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkgkwp01g                        0x0000559f32348ebf <unavailable> + 7871

    5    libc.so.6                          0x00002afbd02fa460 __libc_start_main +
    245

    6    tmpkgkwp01g                        0x0000559f323483e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var new_lst = lst\n    for i in 0..<new_lst.count\
    \ {\n        for j in 0..<new_lst.count {\n            if new_lst[i].count < new_lst[j].count\
    \ {\n                new_lst.swapAt(i, j)\n            }\n        }\n    }\n \
    \   return new_lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp9r3i5ef9/tmp9r3i5ef9.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af02fe41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af02fb38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af02fb38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af02fb377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9r3i5ef9                        0x0000560ed8576866 <unavailable> + 6246

    5    libc.so.6                          0x00002af03002d460 __libc_start_main +
    245

    6    tmp9r3i5ef9                        0x0000560ed85763e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for item in lst\
    \ {\n        if item.count % 2 == 0 {\n            result.append(item)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmqajiyvk/tmpmqajiyvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab45345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab4503cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab4503c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab4503b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqajiyvk                        0x00005561b409767b <unavailable> + 9851

    5    libc.so.6                          0x00002aab45531460 __libc_start_main +
    245

    6    tmpmqajiyvk                        0x00005561b4096499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for item in lst {\n\
    \        if item.count % 2 == 0 {\n            result.append(item)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpwgtijn1j/tmpwgtijn1j.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dd57a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dd5497b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dd5497988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dd54967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgtijn1j                        0x000055b41ff1e6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b1dd598c460 __libc_start_main +
    245

    6    tmpwgtijn1j                        0x000055b41ff1d4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for i in lst {\n\
    \        if i.count % 2 == 0 {\n            result.append(i)\n        }\n    }\n\
    \    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpjn51oqg7/tmpjn51oqg7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e9709fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e96d96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e96d96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e96d957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjn51oqg7                        0x0000558257b9e67b <unavailable> + 9851

    5    libc.so.6                          0x00002b6e9728b460 __libc_start_main +
    245

    6    tmpjn51oqg7                        0x0000558257b9d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let sorted_lst = lst.sorted { (a, b) -> Bool in\n\
    \        if a.count == b.count {\n            return a < b\n        }\n      \
    \  return a.count < b.count\n    }\n    var result: [String] = []\n    for i in\
    \ sorted_lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter({$0.count % 2 == 0}).sorted(by:\
    \ {$0.count < $1.count})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpc9p0rhki/tmpc9p0rhki.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9bf47a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9bf449eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9bf449e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9bf449d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc9p0rhki                        0x00005652f04d0dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b9bf4993460 __libc_start_main +
    245

    6    tmpc9p0rhki                        0x00005652f04d02e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let sorted_lst = lst.sorted { (a, b) -> Bool in\n\
    \        if a.count == b.count {\n            return a < b\n        }\n      \
    \  return a.count < b.count\n    }\n    var result = [String]()\n    for i in\
    \ 0..<sorted_lst.count {\n        if i == 0 {\n            result.append(sorted_lst[i])\n\
    \        } else if sorted_lst[i].count != sorted_lst[i - 1].count {\n        \
    \    result.append(sorted_lst[i])\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp9tigaqrp/tmp9tigaqrp.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba802018c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba801d0fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba801d0f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba801d0e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9tigaqrp                        0x00005649ec691946 <unavailable> + 6470

    5    libc.so.6                          0x00002ba802204460 __libc_start_main +
    245

    6    tmp9tigaqrp                        0x00005649ec6914c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    var lst = lst\n\
    \    while !lst.isEmpty {\n        var min_value = lst[0]\n        for i in lst\
    \ {\n            if i.count < min_value.count {\n                min_value = i\n\
    \            }\n        }\n        result.append(min_value)\n        lst.removeAll(where:\
    \ {$0 == min_value})\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpdse4monm/tmpdse4monm.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5a47a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5a44a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5a44a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5a449f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdse4monm                        0x000055da0ad51956 <unavailable> + 6486

    5    libc.so.6                          0x00002af5a4995460 __libc_start_main +
    245

    6    tmpdse4monm                        0x000055da0ad514d9 <unavailable> + 5337

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i].count % 2 == 1 {\n            lst.remove(at: i)\n     \
    \   } else {\n            i += 1\n        }\n    }\n    lst.sort()\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpoe5kgcpc/tmpoe5kgcpc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c9740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c9437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c9437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c94367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoe5kgcpc                        0x00005632c23035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b14c992c460 __libc_start_main +
    245

    6    tmpoe5kgcpc                        0x00005632c23023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for word in lst {\n\
    \        if word.count % 2 == 0 {\n            result.append(word)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpbbco9o54/tmpbbco9o54.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eeed53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eeea4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eeea4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eeea497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbbco9o54                        0x000055af62dcd6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b0eeef3f460 __libc_start_main +
    245

    6    tmpbbco9o54                        0x000055af62dcc4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for item in lst\
    \ {\n        if item.count % 2 == 0 {\n            result.append(item)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmqajiyvk/tmpmqajiyvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab45345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab4503cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab4503c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab4503b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqajiyvk                        0x00005561b409767b <unavailable> + 9851

    5    libc.so.6                          0x00002aab45531460 __libc_start_main +
    245

    6    tmpmqajiyvk                        0x00005561b4096499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let lst = lst.filter { $0.count % 2 == 0 }\n  \
    \  return lst.sorted { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpsr3mckkk/tmpsr3mckkk.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad39f691c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad39f388b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad39f388988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad39f3877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsr3mckkk                        0x0000564b701f4dbf <unavailable> + 7615

    5    libc.so.6                          0x00002ad39f87d460 __libc_start_main +
    245

    6    tmpsr3mckkk                        0x0000564b701f42e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for item in lst\
    \ {\n        if item.count % 2 == 0 {\n            result.append(item)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpmqajiyvk/tmpmqajiyvk.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aab45345c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aab4503cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aab4503c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aab4503b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmqajiyvk                        0x00005561b409767b <unavailable> + 9851

    5    libc.so.6                          0x00002aab45531460 __libc_start_main +
    245

    6    tmpmqajiyvk                        0x00005561b4096499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for word in lst\
    \ {\n        if word.count % 2 == 0 {\n            result.append(word)\n     \
    \   }\n    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"\
    ])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"\
    AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\", \"b\", \"c\"\
    , \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\", \"dcba\", \"\
    abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\"\
    , \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpfhz399b4/tmpfhz399b4.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b972d8a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b972d59fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b972d59f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b972d59e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfhz399b4                        0x000055be1995e67b <unavailable> + 9851

    5    libc.so.6                          0x00002b972da94460 __libc_start_main +
    245

    6    tmpfhz399b4                        0x000055be1995d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: 1
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var lst_sorted = [String]()\n\
    \    var lst_sorted_2 = [String]()\n    var lst_sorted_3 = [String]()\n    var\
    \ lst_sorted_4 = [String]()\n    var lst_sorted_5 = [String]()\n    var lst_sorted_6\
    \ = [String]()\n    var lst_sorted_7 = [String]()\n    var lst_sorted_8 = [String]()\n\
    \    var lst_sorted_9 = [String]()\n    var lst_sorted_10 = [String]()\n    var\
    \ lst_sorted_11 = [String]()\n    var lst_sorted_12 = [String]()\n    var lst_sorted_13\
    \ = [String]()\n    var lst_sorted_14 = [String]()\n    var lst_sorted_15 = [String]()\n\
    \    var lst_sorted_16 = [String]()\n    var lst_sorted_17 = [String]()\n    var\
    \ lst_sorted_18 = [String]()\n    var lst_sorted_19 = [String]()\n    var lst_sorted_20\
    \ = [String]()\n    var lst_sorted_21 = [String]()\n    var lst_sorted_22 = [String]()\n\
    \    var lst_sorted_23 = [String]()\n    var lst_sorted_24 = [String]()\n    var\
    \ lst_sorted_25 = [String]()\n    var lst_sorted_26 = [String]()\n    var lst_sorted_27\
    \ = [String]()\n    var lst_sorted_28 = [String]()\n    var lst_sorted_29 = [String]()\n\
    \    var lst_sorted_30 = [String]()\n    var lst_sorted_31 = [String]()\n    var\
    \ lst_sorted_32 = [String]()\n    var lst_sorted_33 = [String]()\n    var lst_sorted_34\
    \ =\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\"\
    , \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\"\
    , \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: SyntaxError
  stderr: "/tmp/tmp109adieu.swift:50:24: error: expected initial value after '='\n\
    \    var lst_sorted_34 =\n                       ^\n"
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var result: [String] = []\n\
    \    var i = 0\n    while i < lst.count {\n        if lst[i].count % 2 == 0 {\n\
    \            result.append(lst[i])\n            lst.remove(at: i)\n        } else\
    \ {\n            i += 1\n        }\n    }\n    result.sort()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpbivt5202/tmpbivt5202.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2c38091c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2c37d88b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2c37d88988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2c37d877b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbivt5202                        0x000055e2dff7a60b <unavailable> + 9739

    5    libc.so.6                          0x00002b2c3827d460 __libc_start_main +
    245

    6    tmpbivt5202                        0x000055e2dff79429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let sorted_lst = lst.sorted { (a, b) -> Bool in\n\
    \        if a.count == b.count {\n            return a < b\n        }\n      \
    \  return a.count < b.count\n    }\n    var result: [String] = []\n    for i in\
    \ sorted_lst {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    var lst = lst\n  \
    \  while lst.count > 0 {\n        var min = lst[0]\n        for i in 0..<lst.count\
    \ {\n            if lst[i].count < min.count {\n                min = lst[i]\n\
    \            }\n        }\n        result.append(min)\n        lst.removeAll(where:\
    \ {$0 == min})\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmp6sptdf4o/tmp6sptdf4o.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba534fffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba534cf6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba534cf6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba534cf57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6sptdf4o                        0x000055d30e9759c6 <unavailable> + 6598

    5    libc.so.6                          0x00002ba5351eb460 __libc_start_main +
    245

    6    tmp6sptdf4o                        0x000055d30e975549 <unavailable> + 5449

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var lst_len = lst.count\n  \
    \  var i = 0\n    while i < lst_len {\n        if lst[i].count % 2 == 1 {\n  \
    \          lst.remove(at: i)\n            lst_len -= 1\n        } else {\n   \
    \         i += 1\n        }\n    }\n    lst.sort()\n    return lst\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp49rwcmai/tmp49rwcmai.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6b0cab0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6b0c7a7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6b0c7a7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6b0c7a67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp49rwcmai                        0x0000555db276c5bb <unavailable> + 9659

    5    libc.so.6                          0x00002b6b0cc9c460 __libc_start_main +
    245

    6    tmp49rwcmai                        0x0000555db276b3d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for i in lst {\n\
    \        if i.count % 2 == 0 {\n            result.append(i)\n        }\n    }\n\
    \    return result.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp480g5f97/tmp480g5f97.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b26604afc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b26601a6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b26601a6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b26601a57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp480g5f97                        0x000055fe78c915fb <unavailable> + 9723

    5    libc.so.6                          0x00002b266069b460 __libc_start_main +
    245

    6    tmp480g5f97                        0x000055fe78c90419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    for i in 0..<lst.count {\n \
    \       for j in 0..<lst.count {\n            if lst[i].count < lst[j].count {\n\
    \                let tmp = lst[i]\n                lst[i] = lst[j]\n         \
    \       lst[j] = tmp\n            }\n        }\n    }\n    return lst\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp036afjqv/tmp036afjqv.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c12b5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c12851b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c12851988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c128507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp036afjqv                        0x000055d27e82d826 <unavailable> + 6182

    5    libc.so.6                          0x00002b3c12d46460 __libc_start_main +
    245

    6    tmp036afjqv                        0x000055d27e82d3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for i in lst {\n\
    \        if i.count % 2 == 0 {\n            result.append(i)\n        }\n    }\n\
    \    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpjn51oqg7/tmpjn51oqg7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e9709fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e96d96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e96d96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e96d957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjn51oqg7                        0x0000558257b9e67b <unavailable> + 9851

    5    libc.so.6                          0x00002b6e9728b460 __libc_start_main +
    245

    6    tmpjn51oqg7                        0x0000558257b9d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for str in lst {\n\
    \        if str.count % 2 == 0 {\n            result.append(str)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpoap76afm/tmpoap76afm.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1b673a4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1b6709bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1b6709b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1b6709a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoap76afm                        0x000055e02f43567b <unavailable> + 9851

    5    libc.so.6                          0x00002b1b67590460 __libc_start_main +
    245

    6    tmpoap76afm                        0x000055e02f434499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for item in lst {\n\
    \        if item.count % 2 == 0 {\n            result.append(item)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpwgtijn1j/tmpwgtijn1j.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1dd57a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1dd5497b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1dd5497988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1dd54967b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwgtijn1j                        0x000055b41ff1e6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b1dd598c460 __libc_start_main +
    245

    6    tmpwgtijn1j                        0x000055b41ff1d4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let sorted_list = lst.sorted { $0.count < $1.count\
    \ }\n    var result: [String] = []\n    for i in sorted_list {\n        if i.count\
    \ % 2 == 0 {\n            result.append(i)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpm5fsna5g/tmpm5fsna5g.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21ca4ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21ca1c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21ca1c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21ca1c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpm5fsna5g                        0x000055d06399bebf <unavailable> + 7871

    5    libc.so.6                          0x00002b21ca6b8460 __libc_start_main +
    245

    6    tmpm5fsna5g                        0x000055d06399b3e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for word in lst {\n\
    \        if word.count % 2 == 0 {\n            result.append(word)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpbbco9o54/tmpbbco9o54.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eeed53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eeea4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eeea4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eeea497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbbco9o54                        0x000055af62dcd6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b0eeef3f460 __libc_start_main +
    245

    6    tmpbbco9o54                        0x000055af62dcc4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for word in lst {\n\
    \        if word.count % 2 == 0 {\n            result.append(word)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpbbco9o54/tmpbbco9o54.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eeed53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eeea4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eeea4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eeea497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbbco9o54                        0x000055af62dcd6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b0eeef3f460 __libc_start_main +
    245

    6    tmpbbco9o54                        0x000055af62dcc4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: 0
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    let sorted_list = lst.sorted { (a, b) -> Bool in\n\
    \        if a.count == b.count {\n            return a < b\n        }\n      \
    \  return a.count < b.count\n    }\n    var result: [String] = []\n    for i in\
    \ sorted_list {\n        if i.count % 2 == 0 {\n            result.append(i)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var lst = lst\n    var i = 0\n    while i < lst.count\
    \ {\n        if lst[i].count % 2 == 1 {\n            lst.remove(at: i)\n     \
    \   } else {\n            i += 1\n        }\n    }\n    lst.sort()\n    return\
    \ lst\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst: [\"\
    aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\",\
    \ \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpoe5kgcpc/tmpoe5kgcpc.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14c9740c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14c9437b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14c9437988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14c94367b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpoe5kgcpc                        0x00005632c23035bb <unavailable> + 9659

    5    libc.so.6                          0x00002b14c992c460 __libc_start_main +
    245

    6    tmpoe5kgcpc                        0x00005632c23023d9 <unavailable> + 5081

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter({ $0.count % 2 == 0 }).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpjme_3lbi/tmpjme_3lbi.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ef069fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ef0396b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5ef0396988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5ef03957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjme_3lbi                        0x00005568805f84fb <unavailable> + 9467

    5    libc.so.6                          0x00002b5ef088b460 __libc_start_main +
    245

    6    tmpjme_3lbi                        0x00005568805f7319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824726
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for i in lst {\n\
    \        if i.count % 2 == 0 {\n            result.append(i)\n        }\n    }\n\
    \    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpjn51oqg7/tmpjn51oqg7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e9709fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e96d96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e96d96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e96d957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjn51oqg7                        0x0000558257b9e67b <unavailable> + 9851

    5    libc.so.6                          0x00002b6e9728b460 __libc_start_main +
    245

    6    tmpjn51oqg7                        0x0000558257b9d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter({$0.count % 2 == 0}).sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp12xcbn9g/tmp12xcbn9g.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acd10f63c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acd10c5ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acd10c5a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acd10c597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp12xcbn9g                        0x0000555d9945e4fb <unavailable> + 9467

    5    libc.so.6                          0x00002acd1114f460 __libc_start_main +
    245

    6    tmp12xcbn9g                        0x0000555d9945d319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result = [String]()\n    for word in lst {\n\
    \        if word.count % 2 == 0 {\n            result.append(word)\n        }\n\
    \    }\n    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpbbco9o54/tmpbbco9o54.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0eeed53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0eeea4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0eeea4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0eeea497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbbco9o54                        0x000055af62dcd6cb <unavailable> + 9931

    5    libc.so.6                          0x00002b0eeef3f460 __libc_start_main +
    245

    6    tmpbbco9o54                        0x000055af62dcc4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    var result: [String] = []\n    for i in lst {\n\
    \        if i.count % 2 == 0 {\n            result.append(i)\n        }\n    }\n\
    \    result.sort()\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst:\
    \ [\"school\", \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\n\
    assert(sorted_list_sum(lst: [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\n\
    assert(sorted_list_sum(lst: [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\",\
    \ \"dcba\"])\nassert(sorted_list_sum(lst: [\"AI\", \"ai\", \"au\"]) == [\"AI\"\
    , \"ai\", \"au\"])\nassert(sorted_list_sum(lst: [\"a\", \"b\", \"b\", \"c\", \"\
    c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"aaaa\", \"bbbb\"\
    , \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"])"
  status: Exception
  stderr: 'tmpjn51oqg7/tmpjn51oqg7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e9709fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e96d96b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e96d96988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e96d957b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjn51oqg7                        0x0000558257b9e67b <unavailable> + 9851

    5    libc.so.6                          0x00002b6e9728b460 __libc_start_main +
    245

    6    tmpjn51oqg7                        0x0000558257b9d499 <unavailable> + 5273

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted()\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sorted_list_sum(lst: [\"aa\", \"a\", \"aaa\"])\
    \ == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\", \"AI\", \"asdf\", \"\
    b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst: [\"d\",\
    \ \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst: [\"d\"\
    , \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmp__8b3hdq/tmp__8b3hdq.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9f9b6fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9f9866b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9f9866988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9f98657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp__8b3hdq                        0x000055d3267bd4fb <unavailable> + 9467

    5    libc.so.6                          0x00002ab9f9d5b460 __libc_start_main +
    245

    6    tmp__8b3hdq                        0x000055d3267bc319 <unavailable> + 4889

    '
  stdout: ''
  timestamp: 1659824725
- exit_code: -4
  program: "\n/// Write a function that accepts a list of strings as a parameter,\n\
    /// deletes the strings that have odd lengths from it,\n/// and returns the resulted\
    \ list with a sorted order,\n/// The list is always a list of strings and never\
    \ an array of numbers,\n/// and it may contain duplicates.\n/// The order of the\
    \ list should be ascending by length of each word, and you\n/// should return\
    \ the list sorted by that rule.\n/// If two words have the same length, sort the\
    \ list alphabetically.\n/// The function should return a list of strings in sorted\
    \ order.\n/// You may assume that all words will have the same length.\n/// For\
    \ example:\n/// assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n/// assert\
    \ list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\nfunc sorted_list_sum(lst:\
    \ [String]) -> [String] {\n    return lst.filter { $0.count % 2 == 0 }.sorted\
    \ { $0.count < $1.count }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sorted_list_sum(lst:\
    \ [\"aa\", \"a\", \"aaa\"]) == [\"aa\"])\nassert(sorted_list_sum(lst: [\"school\"\
    , \"AI\", \"asdf\", \"b\"]) == [\"AI\", \"asdf\", \"school\"])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"b\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"d\", \"dcba\", \"abcd\", \"a\"]) == [\"abcd\", \"dcba\"])\nassert(sorted_list_sum(lst:\
    \ [\"AI\", \"ai\", \"au\"]) == [\"AI\", \"ai\", \"au\"])\nassert(sorted_list_sum(lst:\
    \ [\"a\", \"b\", \"b\", \"c\", \"c\", \"a\"]) == [] as [String])\nassert(sorted_list_sum(lst:\
    \ [\"aaaa\", \"bbbb\", \"dd\", \"cc\"]) == [\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    ])"
  status: Exception
  stderr: 'tmpl2eahvn9/tmpl2eahvn9.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4daffcac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4dafcc1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4dafcc1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4dafcc07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpl2eahvn9                        0x000055e1c8482dbf <unavailable> + 7615

    5    libc.so.6                          0x00002b4db01b6460 __libc_start_main +
    245

    6    tmpl2eahvn9                        0x000055e1c84822e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1659824725
