language: swift
name: HumanEval_103_rounded_avg
results:
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let average = (n + m) / 2\n    let binary = String(average, radix:\
    \ 2)\n    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpx4c29855/tmpx4c29855.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7173963c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b717365ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b717365a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b71736597b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx4c29855                        0x000055ffba9ffeb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b7173b4f460 __libc_start_main +
    245

    6    tmpx4c29855                        0x000055ffba9ff649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp9zt24r9c/tmp9zt24r9c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7572abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad756fa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad756fa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad756fa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zt24r9c                        0x000055be9ef19775 <unavailable> + 6005

    5    libc.so.6                          0x00002ad757497460 __libc_start_main +
    245

    6    tmp9zt24r9c                        0x000055be9ef19379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmplo7tgga6/tmplo7tgga6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a388c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a385c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a385c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a385bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo7tgga6                        0x000055c3e082b775 <unavailable> + 6005

    5    libc.so.6                          0x00002b8a38ab5460 __libc_start_main +
    245

    6    tmplo7tgga6                        0x000055c3e082b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n +\
    \ 1)\n    let binary = String(avg, radix: 2)\n    return .success(binary)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7e28xwna/tmp7e28xwna.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3ce9e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3ce6d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3ce6d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3ce6d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7e28xwna                        0x000055dc8de0c775 <unavailable> + 6005

    5    libc.so.6                          0x00002ac3cebcc460 __libc_start_main +
    245

    6    tmp7e28xwna                        0x000055dc8de0c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp9zt24r9c/tmp9zt24r9c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7572abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad756fa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad756fa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad756fa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zt24r9c                        0x000055be9ef19775 <unavailable> + 6005

    5    libc.so.6                          0x00002ad757497460 __libc_start_main +
    245

    6    tmp9zt24r9c                        0x000055be9ef19379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let average = (n + m) / 2\n    let binary = String(average, radix: 2)\n\
    \    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp9rqpjzu4/tmp9rqpjzu4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd7884fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd78546b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd78546988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd785457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rqpjzu4                        0x00005642a9c72eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002afd78a3b460 __libc_start_main +
    245

    6    tmp9rqpjzu4                        0x00005642a9c72649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n +\
    \ 1)\n    let binary = String(avg, radix: 2)\n    return .success(binary)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7e28xwna/tmp7e28xwna.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3ce9e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3ce6d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3ce6d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3ce6d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7e28xwna                        0x000055dc8de0c775 <unavailable> + 6005

    5    libc.so.6                          0x00002ac3cebcc460 __libc_start_main +
    245

    6    tmp7e28xwna                        0x000055dc8de0c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let bin = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(bin)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpezqbaddt/tmpezqbaddt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73a90e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73a8ddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73a8ddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73a8dda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpezqbaddt                        0x000055a22db77eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b73a92d0460 __libc_start_main +
    245

    6    tmpezqbaddt                        0x000055a22db77649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    let bin = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(bin)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpyouoyw02/tmpyouoyw02.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad9bc59ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad9bc291b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad9bc291988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad9bc2907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyouoyw02                        0x00005645d7ca2eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002ad9bc786460 __libc_start_main +
    245

    6    tmpyouoyw02                        0x00005645d7ca2649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let average = (n + m) / 2\n    let binary = String(average, radix: 2)\n\
    \    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp9rqpjzu4/tmp9rqpjzu4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd7884fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd78546b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd78546988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd785457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rqpjzu4                        0x00005642a9c72eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002afd78a3b460 __libc_start_main +
    245

    6    tmp9rqpjzu4                        0x00005642a9c72649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpvtg24_g4/tmpvtg24_g4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a9e654c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a9e34bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a9e34b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a9e34a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtg24_g4                        0x000055a14958e8b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b1a9e840460 __libc_start_main +
    245

    6    tmpvtg24_g4                        0x000055a14958e4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    let bin = String(avg, radix: 2)\n    return .success(bin)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp10kj2rpl/tmp10kj2rpl.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad51eca8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad51e99fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad51e99f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad51e99e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp10kj2rpl                        0x000055a438550775 <unavailable> + 6005

    5    libc.so.6                          0x00002ad51ee94460 __libc_start_main +
    245

    6    tmp10kj2rpl                        0x000055a438550379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp9zt24r9c/tmp9zt24r9c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7572abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad756fa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad756fa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad756fa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zt24r9c                        0x000055be9ef19775 <unavailable> + 6005

    5    libc.so.6                          0x00002ad757497460 __libc_start_main +
    245

    6    tmp9zt24r9c                        0x000055be9ef19379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let bin = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(bin)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpezqbaddt/tmpezqbaddt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73a90e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73a8ddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73a8ddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73a8dda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpezqbaddt                        0x000055a22db77eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b73a92d0460 __libc_start_main +
    245

    6    tmpezqbaddt                        0x000055a22db77649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let average = (n + m) / 2\n    let binary = String(average, radix: 2)\n\
    \    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp9rqpjzu4/tmp9rqpjzu4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd7884fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd78546b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd78546988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd785457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rqpjzu4                        0x00005642a9c72eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002afd78a3b460 __libc_start_main +
    245

    6    tmp9rqpjzu4                        0x00005642a9c72649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let average = (n + m) / 2\n    let binary = String(average, radix: 2)\n\
    \    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp9rqpjzu4/tmp9rqpjzu4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd7884fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd78546b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd78546988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd785457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rqpjzu4                        0x00005642a9c72eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002afd78a3b460 __libc_start_main +
    245

    6    tmp9rqpjzu4                        0x00005642a9c72649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n  \
    \  return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpq8i6rtzc/tmpq8i6rtzc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1df3994c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1df368bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1df368b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1df368a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8i6rtzc                        0x000055cf7838beb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b1df3b80460 __libc_start_main +
    245

    6    tmpq8i6rtzc                        0x000055cf7838b649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let rounded = Int(round(Double(sum)\
    \ / Double(m - n + 1)))\n    return .success(String(rounded, radix: 2))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpukzihftt.swift:16:23: error: cannot find 'round' in scope\n   \
    \ let rounded = Int(round(Double(sum) / Double(m - n + 1)))\n                \
    \      ^~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let rounded = Int(round(Double(sum)\
    \ / Double(m - n + 1)))\n    return .success(String(rounded, radix: 2))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpaaw0j7jh.swift:16:23: error: cannot find 'round' in scope\n   \
    \ let rounded = Int(round(Double(sum) / Double(m - n + 1)))\n                \
    \      ^~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let bin = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(bin)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpezqbaddt/tmpezqbaddt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73a90e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73a8ddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73a8ddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73a8dda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpezqbaddt                        0x000055a22db77eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b73a92d0460 __libc_start_main +
    245

    6    tmpezqbaddt                        0x000055a22db77649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp9zt24r9c/tmp9zt24r9c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7572abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad756fa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad756fa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad756fa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zt24r9c                        0x000055be9ef19775 <unavailable> + 6005

    5    libc.so.6                          0x00002ad757497460 __libc_start_main +
    245

    6    tmp9zt24r9c                        0x000055be9ef19379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmplo7tgga6/tmplo7tgga6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a388c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a385c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a385c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a385bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo7tgga6                        0x000055c3e082b775 <unavailable> + 6005

    5    libc.so.6                          0x00002b8a38ab5460 __libc_start_main +
    245

    6    tmplo7tgga6                        0x000055c3e082b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmplo7tgga6/tmplo7tgga6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a388c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a385c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a385c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a385bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo7tgga6                        0x000055c3e082b775 <unavailable> + 6005

    5    libc.so.6                          0x00002b8a38ab5460 __libc_start_main +
    245

    6    tmplo7tgga6                        0x000055c3e082b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmplo7tgga6/tmplo7tgga6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a388c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a385c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a385c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a385bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo7tgga6                        0x000055c3e082b775 <unavailable> + 6005

    5    libc.so.6                          0x00002b8a38ab5460 __libc_start_main +
    245

    6    tmplo7tgga6                        0x000055c3e082b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let average = (n + m) / 2\n    let binary = String(average, radix: 2)\n\
    \    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp9rqpjzu4/tmp9rqpjzu4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd7884fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd78546b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd78546988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd785457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rqpjzu4                        0x00005642a9c72eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002afd78a3b460 __libc_start_main +
    245

    6    tmp9rqpjzu4                        0x00005642a9c72649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = Int(round(Double(n + m) / 2))\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpaz1j9d5f.swift:15:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(n + m) / 2))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmplo7tgga6/tmplo7tgga6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a388c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a385c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a385c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a385bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo7tgga6                        0x000055c3e082b775 <unavailable> + 6005

    5    libc.so.6                          0x00002b8a38ab5460 __libc_start_main +
    245

    6    tmplo7tgga6                        0x000055c3e082b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmplo7tgga6/tmplo7tgga6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a388c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a385c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a385c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a385bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo7tgga6                        0x000055c3e082b775 <unavailable> + 6005

    5    libc.so.6                          0x00002b8a38ab5460 __libc_start_main +
    245

    6    tmplo7tgga6                        0x000055c3e082b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp9zt24r9c/tmp9zt24r9c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7572abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad756fa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad756fa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad756fa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zt24r9c                        0x000055be9ef19775 <unavailable> + 6005

    5    libc.so.6                          0x00002ad757497460 __libc_start_main +
    245

    6    tmp9zt24r9c                        0x000055be9ef19379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let rounded = (sum + (m -\
    \ n) / 2) / (m - n + 1)\n    return .success(String(rounded, radix: 2))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpawyyq_8l/tmpawyyq_8l.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adabfc01c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adabf8f8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adabf8f8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adabf8f77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpawyyq_8l                        0x000055f8950ca775 <unavailable> + 6005

    5    libc.so.6                          0x00002adabfded460 __libc_start_main +
    245

    6    tmpawyyq_8l                        0x000055f8950ca379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let bin = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(bin)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpezqbaddt/tmpezqbaddt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73a90e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73a8ddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73a8ddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73a8dda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpezqbaddt                        0x000055a22db77eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b73a92d0460 __libc_start_main +
    245

    6    tmpezqbaddt                        0x000055a22db77649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    let binary = String(avg, radix: 2)\n    return .success(binary)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmppf8kv6n9/tmppf8kv6n9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98bd6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98bd3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98bd3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98bd3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppf8kv6n9                        0x0000555bb4b60775 <unavailable> + 6005

    5    libc.so.6                          0x00002b98bd8eb460 __libc_start_main +
    245

    6    tmppf8kv6n9                        0x0000555bb4b60379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n  \
    \  return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpq8i6rtzc/tmpq8i6rtzc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1df3994c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1df368bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1df368b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1df368a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8i6rtzc                        0x000055cf7838beb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b1df3b80460 __libc_start_main +
    245

    6    tmpq8i6rtzc                        0x000055cf7838b649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    let binary = String(avg, radix: 2)\n    return .success(binary)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmppf8kv6n9/tmppf8kv6n9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98bd6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98bd3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98bd3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98bd3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppf8kv6n9                        0x0000555bb4b60775 <unavailable> + 6005

    5    libc.so.6                          0x00002b98bd8eb460 __libc_start_main +
    245

    6    tmppf8kv6n9                        0x0000555bb4b60379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpvtg24_g4/tmpvtg24_g4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a9e654c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a9e34bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a9e34b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a9e34a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtg24_g4                        0x000055a14958e8b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b1a9e840460 __libc_start_main +
    245

    6    tmpvtg24_g4                        0x000055a14958e4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmplo7tgga6/tmplo7tgga6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a388c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a385c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a385c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a385bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo7tgga6                        0x000055c3e082b775 <unavailable> + 6005

    5    libc.so.6                          0x00002b8a38ab5460 __libc_start_main +
    245

    6    tmplo7tgga6                        0x000055c3e082b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let average = (n + m) / 2\n    let binary = String(average, radix: 2)\n\
    \    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp9rqpjzu4/tmp9rqpjzu4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd7884fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd78546b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd78546988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd785457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rqpjzu4                        0x00005642a9c72eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002afd78a3b460 __libc_start_main +
    245

    6    tmp9rqpjzu4                        0x00005642a9c72649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpvtg24_g4/tmpvtg24_g4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a9e654c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a9e34bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a9e34b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a9e34a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtg24_g4                        0x000055a14958e8b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b1a9e840460 __libc_start_main +
    245

    6    tmpvtg24_g4                        0x000055a14958e4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp9zt24r9c/tmp9zt24r9c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7572abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad756fa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad756fa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad756fa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zt24r9c                        0x000055be9ef19775 <unavailable> + 6005

    5    libc.so.6                          0x00002ad757497460 __libc_start_main +
    245

    6    tmp9zt24r9c                        0x000055be9ef19379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = Int(round(Double(n + m) / 2))\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpaz1j9d5f.swift:15:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(n + m) / 2))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    let avgBinary = String(avg, radix: 2)\n\
    \    return .success(\"0b\\(avgBinary)\")\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpqwfsu823/tmpqwfsu823.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e61fbcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e61cb3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e61cb3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e61cb27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqwfsu823                        0x0000564de1ccbeb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b6e621a8460 __libc_start_main +
    245

    6    tmpqwfsu823                        0x0000564de1ccb649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmplo7tgga6/tmplo7tgga6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a388c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a385c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a385c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a385bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo7tgga6                        0x000055c3e082b775 <unavailable> + 6005

    5    libc.so.6                          0x00002b8a38ab5460 __libc_start_main +
    245

    6    tmplo7tgga6                        0x000055c3e082b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    return .failure(1)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp837c8plk/tmp837c8plk.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b36879c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b36876bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b36876bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b36876ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp837c8plk                        0x000055f787037635 <unavailable> + 5685

    5    libc.so.6                          0x00002b3687bb0460 __libc_start_main +
    245

    6    tmp837c8plk                        0x000055f787037239 <unavailable> + 4665

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n +\
    \ 1)\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp0ac86h0_/tmp0ac86h0_.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b02a3ccbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b02a39c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b02a39c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b02a39c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ac86h0_                        0x0000563e43915775 <unavailable> + 6005

    5    libc.so.6                          0x00002b02a3eb7460 __libc_start_main +
    245

    6    tmp0ac86h0_                        0x0000563e43915379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpvtg24_g4/tmpvtg24_g4.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1a9e654c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1a9e34bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1a9e34b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1a9e34a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvtg24_g4                        0x000055a14958e8b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b1a9e840460 __libc_start_main +
    245

    6    tmpvtg24_g4                        0x000055a14958e4b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmplo7tgga6/tmplo7tgga6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a388c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a385c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a385c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a385bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo7tgga6                        0x000055c3e082b775 <unavailable> + 6005

    5    libc.so.6                          0x00002b8a38ab5460 __libc_start_main +
    245

    6    tmplo7tgga6                        0x000055c3e082b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmplo7tgga6/tmplo7tgga6.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8a388c9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8a385c0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8a385c0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8a385bf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo7tgga6                        0x000055c3e082b775 <unavailable> + 6005

    5    libc.so.6                          0x00002b8a38ab5460 __libc_start_main +
    245

    6    tmplo7tgga6                        0x000055c3e082b379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let average = Int(round(Double(n + m) / 2))\n    return .success(String(average,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpjtnbzetd.swift:15:23: error: cannot find 'round' in scope\n   \
    \ let average = Int(round(Double(n + m) / 2))\n                      ^~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp9zt24r9c/tmp9zt24r9c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7572abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad756fa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad756fa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad756fa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zt24r9c                        0x000055be9ef19775 <unavailable> + 6005

    5    libc.so.6                          0x00002ad757497460 __libc_start_main +
    245

    6    tmp9zt24r9c                        0x000055be9ef19379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = Int(round(Double(sum) /\
    \ Double(m - n + 1)))\n    return .success(String(avg, radix: 2))\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmp96n4_hc2.swift:16:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(sum) / Double(m - n + 1)))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp9zt24r9c/tmp9zt24r9c.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad7572abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad756fa2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad756fa2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad756fa17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9zt24r9c                        0x000055be9ef19775 <unavailable> + 6005

    5    libc.so.6                          0x00002ad757497460 __libc_start_main +
    245

    6    tmp9zt24r9c                        0x000055be9ef19379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let rounded = sum / (m -\
    \ n + 1)\n    return .success(String(rounded, radix: 2))\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n:\
    \ 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpgusxeyqt/tmpgusxeyqt.swift:35: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1777e51c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1777b48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1777b48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1777b477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgusxeyqt                        0x000055a5144c9775 <unavailable> + 6005

    5    libc.so.6                          0x00002b177803d460 __libc_start_main +
    245

    6    tmpgusxeyqt                        0x000055a5144c9379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n + 1)\n\
    \    let binary = String(avg, radix: 2)\n    return .success(binary)\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmppf8kv6n9/tmppf8kv6n9.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b98bd6ffc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b98bd3f6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b98bd3f6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b98bd3f57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppf8kv6n9                        0x0000555bb4b60775 <unavailable> + 6005

    5    libc.so.6                          0x00002b98bd8eb460 __libc_start_main +
    245

    6    tmppf8kv6n9                        0x0000555bb4b60379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = Int(round(Double(n + m) / 2))\n    return .success(String(avg,\
    \ radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1,\
    \ m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpaz1j9d5f.swift:15:19: error: cannot find 'round' in scope\n   \
    \ let avg = Int(round(Double(n + m) / 2))\n                  ^~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let average = (n + m) / 2\n    return .success(String(average, radix:\
    \ 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpab8bp95a/tmpab8bp95a.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10ca119c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10c9e10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10c9e10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10c9e0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpab8bp95a                        0x000055e34d6c6775 <unavailable> + 6005

    5    libc.so.6                          0x00002b10ca305460 __libc_start_main +
    245

    6    tmpab8bp95a                        0x000055e34d6c6379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n +\
    \ 1)\n    let binary = String(avg, radix: 2)\n    return .success(binary)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7e28xwna/tmp7e28xwna.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3ce9e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3ce6d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3ce6d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3ce6d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7e28xwna                        0x000055dc8de0c775 <unavailable> + 6005

    5    libc.so.6                          0x00002ac3cebcc460 __libc_start_main +
    245

    6    tmp7e28xwna                        0x000055dc8de0c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let bin = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(bin)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpezqbaddt/tmpezqbaddt.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73a90e4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73a8ddbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73a8ddb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73a8dda7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpezqbaddt                        0x000055a22db77eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b73a92d0460 __libc_start_main +
    245

    6    tmpezqbaddt                        0x000055a22db77649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let average = (n + m) / 2\n    return .success(String(average, radix:\
    \ 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpab8bp95a/tmpab8bp95a.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b10ca119c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b10c9e10b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b10c9e10988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b10c9e0f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpab8bp95a                        0x000055e34d6c6775 <unavailable> + 6005

    5    libc.so.6                          0x00002b10ca305460 __libc_start_main +
    245

    6    tmpab8bp95a                        0x000055e34d6c6379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let average = (n + m) / 2\n    return .success(String(average, radix:\
    \ 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(rounded_avg(n: 1, m: 5)\
    \ == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"\
    ))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n:\
    \ 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851)\
    \ == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"\
    0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"\
    ))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n:\
    \ 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) ==\
    \ .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n:\
    \ 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmpw59djunm/tmpw59djunm.swift:34: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aeb2f7c4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aeb2f4bbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aeb2f4bb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aeb2f4ba7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw59djunm                        0x0000563dc5a74775 <unavailable> + 6005

    5    libc.so.6                          0x00002aeb2f9b0460 __libc_start_main +
    245

    6    tmpw59djunm                        0x0000563dc5a74379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824839
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    return .success(String(avg, radix: 2))\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp_612zdob/tmp_612zdob.swift:32: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6d2ddb6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6d2daadb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6d2daad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6d2daac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_612zdob                        0x0000559b61c8f775 <unavailable> + 6005

    5    libc.so.6                          0x00002b6d2dfa2460 __libc_start_main +
    245

    6    tmp_612zdob                        0x0000559b61c8f379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n +\
    \ 1)\n    let binary = String(avg, radix: 2)\n    return .success(binary)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7e28xwna/tmp7e28xwna.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3ce9e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3ce6d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3ce6d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3ce6d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7e28xwna                        0x000055dc8de0c775 <unavailable> + 6005

    5    libc.so.6                          0x00002ac3cebcc460 __libc_start_main +
    245

    6    tmp7e28xwna                        0x000055dc8de0c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: 1
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let rounded = Int(round(Double(sum)\
    \ / Double(m - n + 1)))\n    return .success(String(rounded, radix: 2))\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: SyntaxError
  stderr: "/tmp/tmpukzihftt.swift:16:23: error: cannot find 'round' in scope\n   \
    \ let rounded = Int(round(Double(sum) / Double(m - n + 1)))\n                \
    \      ^~~~~\n"
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n  \
    \  return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpq8i6rtzc/tmpq8i6rtzc.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1df3994c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1df368bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1df368b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1df368a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8i6rtzc                        0x000055cf7838beb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b1df3b80460 __libc_start_main +
    245

    6    tmpq8i6rtzc                        0x000055cf7838b649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    if n > m {\n        return .failure(-1)\n\
    \    }\n    let sum = (n + m) * (m - n + 1) / 2\n    let avg = sum / (m - n +\
    \ 1)\n    let binary = String(avg, radix: 2)\n    return .success(binary)\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\n\
    assert(rounded_avg(n: 7, m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n:\
    \ 964, m: 977) == .success(\"0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997)\
    \ == .success(\"0b1111100100\"))\nassert(rounded_avg(n: 560, m: 851) == .success(\"\
    0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546) == .success(\"0b101101110\"\
    ))\nassert(rounded_avg(n: 362, m: 496) == .success(\"0b110101101\"))\nassert(rounded_avg(n:\
    \ 350, m: 902) == .success(\"0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233)\
    \ == .success(\"0b11010111\"))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5)\
    \ == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp7e28xwna/tmp7e28xwna.swift:36: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac3ce9e0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac3ce6d7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac3ce6d7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac3ce6d67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7e28xwna                        0x000055dc8de0c775 <unavailable> + 6005

    5    libc.so.6                          0x00002ac3cebcc460 __libc_start_main +
    245

    6    tmp7e28xwna                        0x000055dc8de0c379 <unavailable> + 4985

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let average = (n + m) / 2\n    let binary = String(average, radix: 2)\n\
    \    return .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmp9rqpjzu4/tmp9rqpjzu4.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afd7884fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afd78546b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afd78546988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afd785457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9rqpjzu4                        0x00005642a9c72eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002afd78a3b460 __libc_start_main +
    245

    6    tmp9rqpjzu4                        0x00005642a9c72649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let avg = (n + m) / 2\n    let binary = String(avg, radix: 2)\n    return\
    \ .success(\"0b\\(binary)\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(rounded_avg(n:\
    \ 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7, m: 13) == .success(\"\
    0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"0b1111001010\"))\n\
    assert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"))\nassert(rounded_avg(n:\
    \ 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n: 185, m: 546)\
    \ == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496) == .success(\"\
    0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"0b1001110010\"\
    ))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"))\nassert(rounded_avg(n:\
    \ 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5, m: 1) == .failure(-1))\n\
    assert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"))"
  status: Exception
  stderr: 'tmp8rqa0ths/tmp8rqa0ths.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ccd27ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8cccf71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8cccf71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8cccf707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8rqa0ths                        0x000055fe07097eb8 <unavailable> + 7864

    5    libc.so.6                          0x00002b8ccd466460 __libc_start_main +
    245

    6    tmp8rqa0ths                        0x000055fe07097649 <unavailable> + 5705

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
- exit_code: -4
  program: "\nextension Int: Error {}\n        \n/// You are given two positive integers\
    \ n and m, and your task is to compute the\n/// average of the integers from n\
    \ through m (including n and m). \n/// Round the answer to the nearest integer\
    \ and convert that to binary.\n/// If n is greater than m, return -1.\n/// Example:\n\
    /// rounded_avg(1, 5) => \"0b11\"\n/// rounded_avg(7, 5) => -1\n/// rounded_avg(10,\
    \ 20) => \"0b1111\"\n/// rounded_avg(20, 33) => \"0b11010\"\nfunc rounded_avg(n:\
    \ Int, m: Int) -> Result<String, Int> {\n    guard n <= m else { return .failure(-1)\
    \ }\n    let sum = (n...m).reduce(0, +)\n    let avg = sum / (m - n + 1)\n   \
    \ return .success(String(avg, radix: 2))\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(rounded_avg(n: 1, m: 5) == .success(\"0b11\"))\nassert(rounded_avg(n: 7,\
    \ m: 13) == .success(\"0b1010\"))\nassert(rounded_avg(n: 964, m: 977) == .success(\"\
    0b1111001010\"))\nassert(rounded_avg(n: 996, m: 997) == .success(\"0b1111100100\"\
    ))\nassert(rounded_avg(n: 560, m: 851) == .success(\"0b1011000010\"))\nassert(rounded_avg(n:\
    \ 185, m: 546) == .success(\"0b101101110\"))\nassert(rounded_avg(n: 362, m: 496)\
    \ == .success(\"0b110101101\"))\nassert(rounded_avg(n: 350, m: 902) == .success(\"\
    0b1001110010\"))\nassert(rounded_avg(n: 197, m: 233) == .success(\"0b11010111\"\
    ))\nassert(rounded_avg(n: 7, m: 5) == .failure(-1))\nassert(rounded_avg(n: 5,\
    \ m: 1) == .failure(-1))\nassert(rounded_avg(n: 5, m: 5) == .success(\"0b101\"\
    ))"
  status: Exception
  stderr: 'tmpn17k260_/tmpn17k260_.swift:33: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b51590bcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5158db3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5158db3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5158db27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn17k260_                        0x000055b6e42b68b5 <unavailable> + 6325

    5    libc.so.6                          0x00002b51592a8460 __libc_start_main +
    245

    6    tmpn17k260_                        0x000055b6e42b64b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1659824838
