name: HumanEval_71_triangle_area
language: swift
prompt: "\n/// Given the lengths of the three sides of a triangle. Return the area\
  \ of\n/// the triangle rounded to 2 decimal points if the three sides form a valid\
  \ triangle. \n/// Otherwise return -1\n/// Three sides make a valid triangle when\
  \ the sum of any two sides is greater \n/// than the third side.\n/// Example:\n\
  /// triangle_area(3, 4, 5) == 6.00\n/// triangle_area(1, 2, 10) == -1\nfunc triangle_area(a:\
  \ Int, b: Int, c: Int) -> Double {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(triangle_area(a: 3, b: 4, c: 5) == 6.0)\n\
  assert(triangle_area(a: 1, b: 2, c: 10) == -1)\nassert(triangle_area(a: 4, b: 8,\
  \ c: 5) == 8.18)\nassert(triangle_area(a: 2, b: 2, c: 2) == 1.73)\nassert(triangle_area(a:\
  \ 1, b: 2, c: 3) == -1)\nassert(triangle_area(a: 10, b: 5, c: 7) == 16.25)\nassert(triangle_area(a:\
  \ 2, b: 6, c: 3) == -1)\nassert(triangle_area(a: 1, b: 1, c: 1) == 0.43)\nassert(triangle_area(a:\
  \ 2, b: 2, c: 10) == -1)"
completions: ["    let s = Double(a + b + c) / 2\n    let area = sqrt(s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c)))\n    return area.isNaN ? -1 : area", " \
    \   let s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b)\
    \ * (s - c)))\n    return area.isNaN ? -1 : area", "    let s = (a + b + c) /\
    \ 2\n    let area = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n    return\
    \ area.isNaN ? -1 : area", "    let sides = [a, b, c].sorted()\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = Double(a + b + c) / 2\n        return\
    \ sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n    }\n    return\
    \ -1", "    let s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) *\
    \ (s - b) * (s - c)))\n    return area.isNaN ? -1 : area", "    let s = (a + b\
    \ + c) / 2.0\n    let area = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s -\
    \ Double(c)))\n    return area.isNaN ? -1 : round(area * 100) / 100", "    let\
    \ s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b) * (s -\
    \ c)))\n    return area.isNaN ? -1 : area", "    if a + b > c && a + c > b &&\
    \ b + c > a {\n        let s = Double(a + b + c) / 2\n        return sqrt(s *\
    \ (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    }\n    return -1",
  "    let s = Double(a + b + c) / 2\n    let area = sqrt(s * (s - Double(a)) * (s\
    \ - Double(b)) * (s - Double(c)))\n    return area.isNaN ? -1 : area", "    let\
    \ sides = [a, b, c].sorted()\n    if sides[0] + sides[1] > sides[2] {\n      \
    \  let p = (Double(a) + Double(b) + Double(c)) / 2\n        return sqrt(p * (p\
    \ - Double(a)) * (p - Double(b)) * (p - Double(c)))\n    }\n    return -1", " \
    \   let s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b)\
    \ * (s - c)))\n    return area.isNaN ? -1 : area", "    let s = Double(a + b +\
    \ c) / 2\n    let area = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n\
    \    return area.isNaN ? -1 : area", "    let s = Double(a + b + c) / 2\n    let\
    \ area = sqrt(s * (s - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    return\
    \ area.isNaN ? -1 : area", "    let sides = [a, b, c].sorted()\n    if sides[0]\
    \ + sides[1] > sides[2] {\n        let p = Double(a + b + c) / 2\n        return\
    \ sqrt(p * (p - Double(a)) * (p - Double(b)) * (p - Double(c)))\n    }\n    return\
    \ -1", "    let s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) *\
    \ (s - b) * (s - c)))\n    return area.isNaN ? -1 : area", "    let s = (a + b\
    \ + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n   \
    \ return area.isNaN ? -1 : area", "    let s = (a + b + c) / 2\n    let area =\
    \ sqrt(Double(s * (s - a) * (s - b) * (s - c)))\n    return area.isNaN ? -1 :\
    \ area", "    let s = Double(a + b + c) / 2\n    let area = sqrt(s * (s - Double(a))\
    \ * (s - Double(b)) * (s - Double(c)))\n    return area > 0 ? area : -1", "  \
    \  let s = (a + b + c) / 2\n    let area = sqrt(Double(s * (s - a) * (s - b) *\
    \ (s - c)))\n    return area.isNaN ? -1 : area", "    let s = Double(a + b + c)\
    \ / 2\n    if a + b > c && a + c > b && b + c > a {\n        return sqrt(s * (s\
    \ - Double(a)) * (s - Double(b)) * (s - Double(c)))\n    }\n    return -1"]
stop_tokens:
- "\n}"
