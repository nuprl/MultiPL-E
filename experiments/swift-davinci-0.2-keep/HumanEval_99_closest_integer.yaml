name: HumanEval_99_closest_integer
language: swift
prompt: "\n/// Create a function that takes a value (string) representing a number\n\
  /// and returns the closest integer to it. If the number is equidistant\n/// from\
  \ two integers, round it away from zero.\n/// Examples\n/// >>> closest_integer(\"\
  10\")\n/// 10\n/// >>> closest_integer(\"15.3\")\n/// 15\n/// Note:\n/// Rounding\
  \ away from zero means that if the given number is equidistant\n/// from two integers,\
  \ the one you should return is the one that is the\n/// farthest from zero. For\
  \ example closest_integer(\"14.5\") should\n/// return 15 and closest_integer(\"\
  -14.5\") should return -15.\nfunc closest_integer(value: String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(closest_integer(value: \"10\") == 10)\n\
  assert(closest_integer(value: \"14.5\") == 15)\nassert(closest_integer(value: \"\
  -15.5\") == -16)\nassert(closest_integer(value: \"15.3\") == 15)\nassert(closest_integer(value:\
  \ \"0\") == 0)"
completions: ["    let number = Double(value)!\n    let rounded = Int(number.rounded())\n\
    \    let ceiled = Int(number.rounded(.up))\n    let floored = Int(number.rounded(.down))\n\
    \    let diff1 = abs(number - Double(rounded))\n    let diff2 = abs(number - Double(ceiled))\n\
    \    let diff3 = abs(number - Double(floored))\n    if diff1 < diff2 && diff1\
    \ < diff3 {\n        return rounded\n    } else if diff2 < diff1 && diff2 < diff3\
    \ {\n        return ceiled\n    } else {\n        return floored\n    }", "  \
    \  let number = Double(value)!\n    let rounded = Int(number.rounded())\n    let\
    \ ceiled = Int(number.rounded(.up))\n    let floored = Int(number.rounded(.down))\n\
    \    let diff1 = abs(number - Double(rounded))\n    let diff2 = abs(number - Double(ceiled))\n\
    \    let diff3 = abs(number - Double(floored))\n    if diff1 < diff2 && diff1\
    \ < diff3 {\n        return rounded\n    } else if diff2 < diff1 && diff2 < diff3\
    \ {\n        return ceiled\n    } else {\n        return floored\n    }", "  \
    \  let doubleValue = Double(value)\n    let roundedValue = round(doubleValue!)\n\
    \    return Int(roundedValue)", "    let doubleValue = Double(value)\n    let\
    \ roundedValue = round(doubleValue!)\n    return Int(roundedValue)", "    let\
    \ doubleValue = Double(value)\n    let roundedValue = round(doubleValue!)\n  \
    \  return Int(roundedValue)", "    let doubleValue = Double(value)\n    let roundedValue\
    \ = round(doubleValue!)\n    return Int(roundedValue)", "    let doubleValue =\
    \ Double(value)\n    let roundedValue = round(doubleValue!)\n    return Int(roundedValue)",
  "    let doubleValue = Double(value)\n    let roundedValue = Int(round(doubleValue!))\n\
    \    return roundedValue", "    let doubleValue = Double(value)\n    let roundedValue\
    \ = round(doubleValue!)\n    return Int(roundedValue)", "    let num = Double(value)!\n\
    \    let int = Int(num)\n    let decimal = num - Double(int)\n    if decimal >=\
    \ 0.5 {\n        return int + 1\n    } else {\n        return int\n    }", " \
    \   let value = Double(value)!\n    let floor = Int(floor(value))\n    let ceil\
    \ = Int(ceil(value))\n    return value - Double(floor) < Double(ceil) - value\
    \ ? floor : ceil", "    let doubleValue = Double(value)\n    let roundedValue\
    \ = round(doubleValue!)\n    return Int(roundedValue)", "    let number = Double(value)!\n\
    \    let rounded = round(number)\n    let int = Int(rounded)\n    return int",
  "    let doubleValue = Double(value)\n    let roundedValue = round(doubleValue!)\n\
    \    return Int(roundedValue)", "    let number = Double(value)!\n    let rounded\
    \ = round(number)\n    if number - rounded >= 0.5 {\n        return Int(rounded\
    \ + 1)\n    } else {\n        return Int(rounded)\n    }", "    let number = Double(value)!\n\
    \    let rounded = Int(number.rounded())\n    let floor = Int(number.rounded(.down))\n\
    \    let ceil = Int(number.rounded(.up))\n    if number - Double(floor) == 0.5\
    \ {\n        return floor\n    } else if number - Double(ceil) == -0.5 {\n   \
    \     return ceil\n    } else {\n        return rounded\n    }", "    let number\
    \ = Double(value)!\n    let rounded = number.rounded()\n    let roundedInt = Int(rounded)\n\
    \    if rounded - Double(roundedInt) >= 0.5 {\n        return roundedInt + 1\n\
    \    } else {\n        return roundedInt\n    }", "    let doubleValue = Double(value)\n\
    \    let intValue = Int(doubleValue!)\n    let decimal = doubleValue! - Double(intValue)\n\
    \    if decimal >= 0.5 {\n        return intValue + 1\n    } else {\n        return\
    \ intValue\n    }", "    let number = Double(value)!\n    let rounded = round(number)\n\
    \    let int = Int(rounded)\n    return int", "    let number = Double(value)!\n\
    \    let rounded = round(number)\n    let floor = Int(rounded)\n    let ceil =\
    \ Int(rounded) + 1\n    let diffFloor = abs(number - Double(floor))\n    let diffCeil\
    \ = abs(number - Double(ceil))\n    if diffFloor < diffCeil {\n        return\
    \ floor\n    } else {\n        return ceil\n    }"]
stop_tokens:
- "\n}"
