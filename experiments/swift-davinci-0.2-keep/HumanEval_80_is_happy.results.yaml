language: swift
name: HumanEval_80_is_happy
results:
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let sub = s[range]\n        let set = Set(sub)\n\
    \        if set.count != 3 {\n            result = false\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var i = 0\n\
    \    while i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub\
    \ = s[start..<end]\n        if Set(sub).count != 3 {\n            return false\n\
    \        }\n        i += 1\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        let set = Set(sub)\n        if set.count != 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count != 3 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let subString = s[range]\n        let set\
    \ = Set(subString)\n        if set.count != 3 {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ != 3 {\n            result = false\n            break\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    var index = s.startIndex\n    while index < s.endIndex {\n     \
    \   let start = s.index(index, offsetBy: 0)\n        let end = s.index(index,\
    \ offsetBy: 3)\n        let range = start..<end\n        let subString = s[range]\n\
    \        if Set(subString).count != 3 {\n            result = false\n        \
    \    break\n        }\n        index = s.index(index, offsetBy: 3)\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b45b69cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45b66c4561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b45b66c4286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b45b66c413c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b45b66c3bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b45b67f7b0d <unavailable> + 2693901

    6    tmpbyitecmr                        0x0000555dcf324cda <unavailable> + 7386

    7    tmpbyitecmr                        0x0000555dcf324786 <unavailable> + 6022

    8    libc.so.6                          0x00002b45b6bb9460 __libc_start_main +
    245

    9    tmpbyitecmr                        0x0000555dcf324349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub\
    \ = s[start..<end]\n        let set = Set(sub)\n        if set.count < 3 {\n \
    \           result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let subString = s[start..<end]\n\
    \        if Set(subString).count != 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var previous =\
    \ \"\"\n    for char in s {\n        if previous.count == 2 {\n            if\
    \ previous.contains(char) {\n                return false\n            }\n   \
    \         previous = \"\"\n        }\n        previous.append(char)\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmp1x7b9xil/tmp1x7b9xil.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2181f8fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2181c86b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2181c86988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2181c857b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1x7b9xil                        0x0000555978bb76b1 <unavailable> + 5809

    5    libc.so.6                          0x00002b218217b460 __libc_start_main +
    245

    6    tmp1x7b9xil                        0x0000555978bb7159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range\
    \ = start..<end\n        let sub = s[range]\n        let set = Set(sub)\n    \
    \    if set.count != 3 {\n            result = false\n            break\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count < 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    let s = s.lowercased()\n    guard s.count >= 3 else { return\
    \ false }\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let sub = s[start..<end]\n        if Set(sub).count != 3 {\n           \
    \ return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var result = true\n    if s.count < 3 {\n        result = false\n\
    \    } else {\n        for i in 0...s.count - 3 {\n            let index = s.index(s.startIndex,\
    \ offsetBy: i)\n            let index1 = s.index(s.startIndex, offsetBy: i + 1)\n\
    \            let index2 = s.index(s.startIndex, offsetBy: i + 2)\n           \
    \ if s[index] == s[index1] || s[index] == s[index2] || s[index1] == s[index2]\
    \ {\n                result = false\n                break\n            }\n  \
    \      }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var set =\
    \ Set<Character>()\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let sub = s[range]\n        for c in sub\
    \ {\n            set.insert(c)\n        }\n        if set.count == 3 {\n     \
    \       set.removeAll()\n        } else {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count < 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index1 = s.index(s.startIndex, offsetBy: i + 1)\n\
    \        let index2 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index]\
    \ == s[index1] || s[index] == s[index2] || s[index1] == s[index2] {\n        \
    \    result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ != 3 {\n            result = false\n            break\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var chars = Array(s)\n\
    \    for i in 0..<chars.count - 2 {\n        if chars[i] == chars[i + 1] || chars[i]\
    \ == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var chars = [Character](s)\n\
    \    var i = 0\n    while i < chars.count - 2 {\n        if chars[i] == chars[i\
    \ + 1] || chars[i] == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n       \
    \     return false\n        }\n        i += 1\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count < 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let sub = s[start..<end]\n        if Set(sub).count != 3 {\n           \
    \ result = false\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let index1 = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index2 = s.index(s.startIndex, offsetBy: i + 1)\n\
    \        let index3 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index1]\
    \ == s[index2] || s[index1] == s[index3] || s[index2] == s[index3] {\n       \
    \     result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var index = s.startIndex\n\
    \    while index < s.endIndex {\n        let start = s.index(index, offsetBy:\
    \ 0)\n        let end = s.index(index, offsetBy: 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n     \
    \   index = s.index(index, offsetBy: 3)\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ac9e381bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac9e3512561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac9e3512286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac9e351213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac9e3511bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ac9e3645b0d <unavailable> + 2693901

    6    tmpj33jcn9g                        0x000055d68c05fc8b <unavailable> + 7307

    7    tmpj33jcn9g                        0x000055d68c05f786 <unavailable> + 6022

    8    libc.so.6                          0x00002ac9e3a07460 __libc_start_main +
    245

    9    tmpj33jcn9g                        0x000055d68c05f349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var set = Set<Character>()\n\
    \    for i in 0..<s.count {\n        if i + 2 < s.count {\n            let start\
    \ = s.index(s.startIndex, offsetBy: i)\n            let end = s.index(s.startIndex,\
    \ offsetBy: i + 3)\n            let sub = s[start..<end]\n            for c in\
    \ sub {\n                set.insert(c)\n            }\n            if set.count\
    \ == 3 {\n                set.removeAll()\n            } else {\n            \
    \    return false\n            }\n        }\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ != 3 {\n            result = false\n            break\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0..<s.count-2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        let range\
    \ = start..<end\n        let sub = s[range]\n        let set = Set(sub)\n    \
    \    if set.count != 3 {\n            result = false\n            break\n    \
    \    }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    let s = Array(s)\n\
    \    for i in 0..<s.count - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ != 3 {\n            result = false\n            break\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var index\
    \ = s.startIndex\n    while index < s.endIndex {\n        let start = s.index(index,\
    \ offsetBy: 0)\n        let end = s.index(index, offsetBy: 3)\n        let range\
    \ = start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ != 3 {\n            return false\n        }\n        index = s.index(index,\
    \ offsetBy: 3)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b8eb1765c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8eb145c561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8eb145c286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8eb145c13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8eb145bbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b8eb158fb0d <unavailable> + 2693901

    6    tmpv45n_6j7                        0x000055df4b378cb4 <unavailable> + 7348

    7    tmpv45n_6j7                        0x000055df4b378786 <unavailable> + 6022

    8    libc.so.6                          0x00002b8eb1951460 __libc_start_main +
    245

    9    tmpv45n_6j7                        0x000055df4b378349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    let s = s.map {\
    \ String($0) }\n    for i in 0..<s.count - 2 {\n        if s[i] == s[i + 1] ||\
    \ s[i] == s[i + 2] || s[i + 1] == s[i + 2] {\n            return false\n     \
    \   }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var i = 0\n   \
    \ while i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range\
    \ = start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ == 1 {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpo21pocag/tmpo21pocag.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0c749bec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0c746b5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0c746b5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0c746b47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo21pocag                        0x00005617975f17f1 <unavailable> + 6129

    5    libc.so.6                          0x00002b0c74baa460 __libc_start_main +
    245

    6    tmpo21pocag                        0x00005617975f1299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range\
    \ = start..<end\n        let substring = s[range]\n        let set = Set(substring)\n\
    \        if set.count != 3 {\n            result = false\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var prev =\
    \ s.first!\n    var curr = s.dropFirst().first!\n    var next = s.dropFirst(2).first!\n\
    \    for i in 2..<s.count {\n        if prev == curr || curr == next || prev ==\
    \ next {\n            return false\n        }\n        prev = curr\n        curr\
    \ = next\n        next = s.dropFirst(i + 1).first!\n    }\n    return true\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpwucpmm3b/tmpwucpmm3b.swift:25: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002af9db34bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af9db042561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af9db042286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af9db04213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af9db041bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpwucpmm3b                        0x000055e2337f2592 <unavailable> + 9618

    6    tmpwucpmm3b                        0x000055e2337f1706 <unavailable> + 5894

    7    libc.so.6                          0x00002af9db537460 __libc_start_main +
    245

    8    tmpwucpmm3b                        0x000055e2337f12c9 <unavailable> + 4809

    '
  stdout: ''
  timestamp: 1660013733
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0..<s.count-2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i+3)\n        let sub\
    \ = s[start..<end]\n        if Set(sub).count != 3 {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var set =\
    \ Set<Character>()\n    for i in 0..<s.count {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        set.insert(s[index])\n        if set.count == 3 {\n  \
    \          return true\n        }\n    }\n    return false\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpe8m3af2o/tmpe8m3af2o.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2db150ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2db1205b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2db1205988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2db12047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe8m3af2o                        0x000055bce9c29ba8 <unavailable> + 7080

    5    libc.so.6                          0x00002b2db16fa460 __libc_start_main +
    245

    6    tmpe8m3af2o                        0x000055bce9c29369 <unavailable> + 4969

    '
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index1 = s.index(s.startIndex, offsetBy: i + 1)\n\
    \        let index2 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index]\
    \ == s[index1] || s[index] == s[index2] || s[index1] == s[index2] {\n        \
    \    result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var set = Set<Character>()\n\
    \    for i in 0..<s.count - 2 {\n        let index = s.index(s.startIndex, offsetBy:\
    \ i)\n        let index1 = s.index(s.startIndex, offsetBy: i + 1)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 2)\n        let char = s[index]\n\
    \        let char1 = s[index1]\n        let char2 = s[index2]\n        if char\
    \ == char1 || char == char2 || char1 == char2 {\n            return false\n  \
    \      }\n        set.insert(char)\n        set.insert(char1)\n        set.insert(char2)\n\
    \    }\n    return set.count == s.count\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpiis7nmp0/tmpiis7nmp0.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1d2ead3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1d2e7cab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1d2e7ca988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1d2e7c97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiis7nmp0                        0x000055f9811d1b35 <unavailable> + 6965

    5    libc.so.6                          0x00002b1d2ecbf460 __libc_start_main +
    245

    6    tmpiis7nmp0                        0x000055f9811d13b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index1 = s.index(s.startIndex, offsetBy: i + 1)\n\
    \        let index2 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index]\
    \ == s[index1] || s[index] == s[index2] || s[index1] == s[index2] {\n        \
    \    result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var last = s.first!\n\
    \    var last2 = s[s.index(after: s.startIndex)]\n    for c in s.dropFirst(2)\
    \ {\n        if c == last || c == last2 {\n            return false\n        }\n\
    \        last2 = last\n        last = c\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var happy = true\n    if s.count < 3 {\n        happy = false\n\
    \    } else {\n        var index = s.startIndex\n        var previous = s[index]\n\
    \        index = s.index(after: index)\n        var current = s[index]\n     \
    \   index = s.index(after: index)\n        var next = s[index]\n        while\
    \ index < s.endIndex {\n            if previous == current || current == next\
    \ || previous == next {\n                happy = false\n                break\n\
    \            }\n            previous = current\n            current = next\n \
    \           index = s.index(after: index)\n            next = s[index]\n     \
    \   }\n    }\n    return happy\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b9723314c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b972300b561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b972300b286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b972300b13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b972300abb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b972313eec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b97230f7660 String.subscript.getter
    + 34

    7    tmp7uw1_p03                        0x000055f312aa5d4d <unavailable> + 7501

    8    tmp7uw1_p03                        0x000055f312aa5596 <unavailable> + 5526

    9    libc.so.6                          0x00002b9723500460 __libc_start_main +
    245

    10   tmp7uw1_p03                        0x000055f312aa5159 <unavailable> + 4441

    '
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count-2 {\n        let index1 = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index2 = s.index(s.startIndex, offsetBy: i+1)\n  \
    \      let index3 = s.index(s.startIndex, offsetBy: i+2)\n        if s[index1]\
    \ == s[index2] || s[index1] == s[index3] || s[index2] == s[index3] {\n       \
    \     result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0...s.count\
    \ - 3 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var i = 0\n   \
    \ while i < s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range\
    \ = start..<end\n        let sub = s[range]\n        if Set(sub).count != 3 {\n\
    \            return false\n        }\n        i += 1\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return s.count >= 3 && s.enumerated().map { $0.offset % 3 ==\
    \ 0 ? String(s[$0.offset..<s.index(s.startIndex, offsetBy: $0.offset + 3)]) :\
    \ \"\" }.filter { $0.count > 0 }.filter { $0.count == Set($0).count }.count ==\
    \ s.count / 3\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmpe1ev878m.swift:13:82: error: cannot convert value of type 'Int'\
    \ to expected argument type 'String.Index'\n    return s.count >= 3 && s.enumerated().map\
    \ { $0.offset % 3 == 0 ? String(s[$0.offset..<s.index(s.startIndex, offsetBy:\
    \ $0.offset + 3)]) : \"\" }.filter { $0.count > 0 }.filter { $0.count == Set($0).count\
    \ }.count == s.count / 3\n                                                   \
    \                              ^\n"
  stdout: ''
  timestamp: 1660013754
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    let s = s.lowercased()\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub\
    \ = s[start..<end]\n        if Set(sub).count != 3 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        let set = Set(subString)\n        if\
    \ set.count == 1 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpydlh5yje/tmpydlh5yje.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b19d4c05c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b19d48fcb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b19d48fc988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b19d48fb7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpydlh5yje                        0x00005600d7ab38e1 <unavailable> + 6369

    5    libc.so.6                          0x00002b19d4df1460 __libc_start_main +
    245

    6    tmpydlh5yje                        0x00005600d7ab3389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        let set = Set(sub)\n        if set.count == 1 {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpjqkx_nwb/tmpjqkx_nwb.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b806fa38c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b806f72fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b806f72f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b806f72e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjqkx_nwb                        0x000055e5d5e528e1 <unavailable> + 6369

    5    libc.so.6                          0x00002b806fc24460 __libc_start_main +
    245

    6    tmpjqkx_nwb                        0x000055e5d5e52389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013733
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var prev =\
    \ s.first!\n    var prev2 = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex,\
    \ offsetBy: 2)..<s.endIndex {\n        if prev == s[i] || prev2 == s[i] {\n  \
    \          return false\n        }\n        prev = prev2\n        prev2 = s[i]\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: SyntaxError
  stderr: "/tmp/tmp9t4439y5.swift:18:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmp9t4439y5.swift:18:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        let set = Set(subString)\n        if\
    \ set.count != 3 {\n            return false\n        }\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var chars = Array(s)\n\
    \    for i in 0..<chars.count - 2 {\n        if chars[i] == chars[i + 1] || chars[i]\
    \ == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var chars\
    \ = Array(s)\n    for i in 0..<chars.count - 2 {\n        if chars[i] == chars[i\
    \ + 1] || chars[i] == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0..<s.count - 2 {\n        let index = s.index(s.startIndex, offsetBy:\
    \ i)\n        let nextIndex = s.index(s.startIndex, offsetBy: i + 1)\n       \
    \ let nextNextIndex = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index]\
    \ == s[nextIndex] || s[index] == s[nextNextIndex] || s[nextIndex] == s[nextNextIndex]\
    \ {\n            result = false\n            break\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") ==\
    \ false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") ==\
    \ true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") ==\
    \ true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0...s.count - 3 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let subString = s[range]\n        let set\
    \ = Set(subString)\n        if set.count != 3 {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        let subString = s[index...index]\n        let index2 =\
    \ s.index(s.startIndex, offsetBy: i + 1)\n        let subString2 = s[index2...index2]\n\
    \        let index3 = s.index(s.startIndex, offsetBy: i + 2)\n        let subString3\
    \ = s[index3...index3]\n        if subString == subString2 || subString == subString3\
    \ || subString2 == subString3 {\n            result = false\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let subString = s[range]\n        let set\
    \ = Set(subString)\n        if set.count != 3 {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var previous\
    \ = s.prefix(3)\n    for i in 3..<s.count {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        let current = s[index..<s.index(after: index)]\n     \
    \   if previous.contains(current) {\n            return false\n        }\n   \
    \     previous = s[index..<s.index(index, offsetBy: 3)]\n    }\n    return true\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b82ea612c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b82ea309561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b82ea309286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b82ea30913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b82ea308bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b82ea43cb0d <unavailable> + 2693901

    6    tmp_1jdx8xc                        0x000055f39ef9f07d <unavailable> + 8317

    7    tmp_1jdx8xc                        0x000055f39ef9e836 <unavailable> + 6198

    8    libc.so.6                          0x00002b82ea7fe460 __libc_start_main +
    245

    9    tmp_1jdx8xc                        0x000055f39ef9e3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013733
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count-2 {\n        let index1 = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index2 = s.index(s.startIndex, offsetBy: i+1)\n  \
    \      let index3 = s.index(s.startIndex, offsetBy: i+2)\n        if s[index1]\
    \ == s[index2] || s[index1] == s[index3] || s[index2] == s[index3] {\n       \
    \     result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let subString = s[start..<end]\n\
    \        if Set(subString).count != 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let sub = s[start..<end]\n        if Set(sub).count != 3 {\n           \
    \ result = false\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 1
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var last = s.first!\n\
    \    var secondLast = s[s.index(after: s.startIndex)]\n    for i in s.index(s.startIndex,\
    \ offsetBy: 2)..<s.endIndex {\n        if last == secondLast && secondLast ==\
    \ s[i] {\n            return false\n        }\n        last = secondLast\n   \
    \     secondLast = s[i]\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: SyntaxError
  stderr: "/tmp/tmpyj1ba9k2.swift:16:48: error: protocol 'Sequence' requires that\
    \ 'String.Index' conform to 'Strideable'\n    for i in s.index(s.startIndex, offsetBy:\
    \ 2)..<s.endIndex {\n                                               ^\nSwift.Range:1:11:\
    \ note: requirement from conditional conformance of 'Range<String.Index>' to 'Sequence'\n\
    extension Range : Sequence where Bound : Strideable, Bound.Stride : SignedInteger\
    \ {\n          ^\n/tmp/tmpyj1ba9k2.swift:16:48: error: referencing instance method\
    \ 'makeIterator()' on 'Range' requires that 'String.Index' conform to 'Strideable'\n\
    \    for i in s.index(s.startIndex, offsetBy: 2)..<s.endIndex {\n            \
    \                                   ^\nSwift.Range:1:11: note: requirement from\
    \ conditional conformance of 'Range<String.Index>' to 'Collection'\nextension\
    \ Range : Collection, BidirectionalCollection, RandomAccessCollection where Bound\
    \ : Strideable, Bound.Stride : SignedInteger {\n          ^\n<unknown>:0: error:\
    \ referencing instance method 'next()' on 'Range' requires that 'String.Index'\
    \ conform to 'Strideable'\nSwift.Range:1:11: note: requirement from conditional\
    \ conformance of 'Range<String.Index>' to 'Collection'\nextension Range : Collection,\
    \ BidirectionalCollection, RandomAccessCollection where Bound : Strideable, Bound.Stride\
    \ : SignedInteger {\n          ^\n"
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var happy = true\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range\
    \ = start..<end\n        let sub = s[range]\n        if Set(sub).count < 3 {\n\
    \            happy = false\n            break\n        }\n    }\n    return happy\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    let s = Array(s)\n\
    \    for i in 0..<s.count - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    let s = Array(s)\n\
    \    for i in 0..<s.count - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count != 3 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count != 3 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count\
    \ - 3 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count != 3 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range\
    \ = start..<end\n        let subString = s[range]\n        if Set(subString).count\
    \ != 3 {\n            result = false\n            break\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    return s.enumerated().reduce(true)\
    \ { (result, element) in\n        guard result else { return false }\n       \
    \ let index = element.offset\n        let char = element.element\n        if index\
    \ + 2 < s.count {\n            let nextChar = s[s.index(s.startIndex, offsetBy:\
    \ index + 1)]\n            let nextNextChar = s[s.index(s.startIndex, offsetBy:\
    \ index + 2)]\n            return char != nextChar && char != nextNextChar &&\
    \ nextChar != nextNextChar\n        }\n        return true\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count\
    \ - 3 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count < 3 {\n   \
    \         return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let subString = s[range]\n        let set\
    \ = Set(subString)\n        if set.count != 3 {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var set = Set<String>()\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub\
    \ = String(s[start..<end])\n        if set.contains(sub) {\n            return\
    \ false\n        }\n        set.insert(sub)\n    }\n    return true\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpuq_vbfe8/tmpuq_vbfe8.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9317b99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9317890b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9317890988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b931788f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuq_vbfe8                        0x000055e541564921 <unavailable> + 6433

    5    libc.so.6                          0x00002b9317d85460 __libc_start_main +
    245

    6    tmpuq_vbfe8                        0x000055e5415643c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range\
    \ = start..<end\n        let sub = s[range]\n        if Set(sub).count < 3 {\n\
    \            result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count != 3 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let index1 = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index2 = s.index(s.startIndex, offsetBy: i + 1)\n\
    \        let index3 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index1]\
    \ == s[index2] || s[index1] == s[index3] || s[index2] == s[index3] {\n       \
    \     result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count-2\
    \ {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end =\
    \ s.index(s.startIndex, offsetBy: i+3)\n        let range = start..<end\n    \
    \    let subString = s[range]\n        if Set(subString).count == 1 {\n      \
    \      return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpg3_ls2u8/tmpg3_ls2u8.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21d03f8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21d00efb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21d00ef988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21d00ee7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg3_ls2u8                        0x000055e7848368e1 <unavailable> + 6369

    5    libc.so.6                          0x00002b21d05e4460 __libc_start_main +
    245

    6    tmpg3_ls2u8                        0x000055e784836389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        if Set(s[range]).count != 3 {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0..<s.count - 2 {\n        let index1 = s.index(s.startIndex, offsetBy:\
    \ i)\n        let index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let\
    \ index3 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index1] == s[index2]\
    \ || s[index1] == s[index3] || s[index2] == s[index3] {\n            result =\
    \ false\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let substring = s[range]\n        if substring.count == Set(substring).count\
    \ {\n            return true\n        }\n    }\n    return false\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw8pj_2cr/tmpw8pj_2cr.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b121ff80c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b121fc77b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b121fc77988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b121fc767b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw8pj_2cr                        0x000055750f808c58 <unavailable> + 7256

    5    libc.so.6                          0x00002b122016c460 __libc_start_main +
    245

    6    tmpw8pj_2cr                        0x000055750f808419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index1 = s.index(s.startIndex, offsetBy: i + 1)\n\
    \        let index2 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index]\
    \ == s[index1] || s[index] == s[index2] || s[index1] == s[index2] {\n        \
    \    result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count-2 {\n        let index1 = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index2 = s.index(s.startIndex, offsetBy: i+1)\n  \
    \      let index3 = s.index(s.startIndex, offsetBy: i+2)\n        if s[index1]\
    \ == s[index2] || s[index1] == s[index3] || s[index2] == s[index3] {\n       \
    \     result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var set =\
    \ Set<Character>()\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let sub = s[range]\n        for c in sub\
    \ {\n            set.insert(c)\n        }\n        if set.count == 3 {\n     \
    \       set.removeAll()\n        } else {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let sub = s[range]\n        if Set(sub).count\
    \ != 3 {\n            result = false\n            break\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var set = Set<Character>()\n\
    \    for i in 0..<s.count {\n        let index = s.index(s.startIndex, offsetBy:\
    \ i)\n        let char = s[index]\n        if set.contains(char) {\n         \
    \   return false\n        }\n        set.insert(char)\n        if i >= 2 {\n \
    \           set.remove(s[s.index(s.startIndex, offsetBy: i - 2)])\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index1 = s.index(s.startIndex, offsetBy: i + 1)\n\
    \        let index2 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index]\
    \ == s[index1] || s[index] == s[index2] || s[index1] == s[index2] {\n        \
    \    result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub\
    \ = s[start..<end]\n        if Set(sub).count != 3 {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let sub = s[start..<end]\n        if Set(sub).count != 3 {\n           \
    \ result = false\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index1 = s.index(s.startIndex, offsetBy: i + 1)\n\
    \        let index2 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index]\
    \ == s[index1] || s[index] == s[index2] || s[index1] == s[index2] {\n        \
    \    result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0...s.count - 3 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub\
    \ = s[start..<end]\n        if Set(sub).count != 3 {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count != 3 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var result = false\n    if s.count >= 3 {\n        for i in 0..<s.count\
    \ - 2 {\n            let index1 = s.index(s.startIndex, offsetBy: i)\n       \
    \     let index2 = s.index(s.startIndex, offsetBy: i + 1)\n            let index3\
    \ = s.index(s.startIndex, offsetBy: i + 2)\n            if s[index1] != s[index2]\
    \ && s[index1] != s[index3] && s[index2] != s[index3] {\n                result\
    \ = true\n            } else {\n                result = false\n             \
    \   break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var result = false\n    if s.count >= 3 {\n        let sArr =\
    \ Array(s)\n        for i in 0..<sArr.count-2 {\n            if sArr[i] != sArr[i+1]\
    \ && sArr[i] != sArr[i+2] && sArr[i+1] != sArr[i+2] {\n                result\
    \ = true\n            } else {\n                result = false\n             \
    \   break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let sub\
    \ = s[start..<end]\n        if Set(sub).count < 3 {\n            result = false\n\
    \            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count != 3 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let index1 = s.index(s.startIndex, offsetBy: i)\n        let\
    \ index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let index3 = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index1] == s[index2] || s[index1] == s[index3]\
    \ || s[index2] == s[index3] {\n            return false\n        }\n    }\n  \
    \  return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index1 = s.index(s.startIndex, offsetBy: i + 1)\n\
    \        let index2 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index]\
    \ == s[index1] || s[index] == s[index2] || s[index1] == s[index2] {\n        \
    \    result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0..<s.count - 2 {\n        let index1 = s.index(s.startIndex, offsetBy:\
    \ i)\n        let index2 = s.index(s.startIndex, offsetBy: i + 1)\n        let\
    \ index3 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index1] == s[index2]\
    \ || s[index1] == s[index3] || s[index2] == s[index3] {\n            result =\
    \ false\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    let s = s.lowercased()\n\
    \    var i = 0\n    while i < s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let range = start..<end\n        let sub = s[range]\n        if Set(sub).count\
    \ != 3 {\n            return false\n        }\n        i += 1\n    }\n    return\
    \ true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\") == false)\n\
    assert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\n\
    assert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\n\
    assert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\n\
    assert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let index = s.index(s.startIndex, offsetBy: i)\n        let nextIndex\
    \ = s.index(s.startIndex, offsetBy: i + 1)\n        let nextNextIndex = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index] == s[nextIndex] || s[index] == s[nextNextIndex]\
    \ || s[nextIndex] == s[nextNextIndex] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var chars = Array(s)\n\
    \    for i in 0..<chars.count - 2 {\n        if chars[i] == chars[i + 1] || chars[i]\
    \ == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    let chars = Array(s)\n\
    \    for i in 0..<chars.count - 2 {\n        if chars[i] == chars[i + 1] || chars[i]\
    \ == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var index = s.startIndex\n\
    \    while index < s.endIndex {\n        let start = s.index(index, offsetBy:\
    \ 0)\n        let end = s.index(index, offsetBy: 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count < 3 { return false }\n        index = s.index(index,\
    \ offsetBy: 3)\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002af7aab52c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af7aa849561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002af7aa849286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002af7aa84913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002af7aa848bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002af7aa97cb0d <unavailable> + 2693901

    6    tmpp5otm1kx                        0x000055d69dce6c8b <unavailable> + 7307

    7    tmpp5otm1kx                        0x000055d69dce6786 <unavailable> + 6022

    8    libc.so.6                          0x00002af7aad3e460 __libc_start_main +
    245

    9    tmpp5otm1kx                        0x000055d69dce6349 <unavailable> + 4937

    '
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let sub = s[start..<end]\n        if Set(sub).count < 3 {\n            result\
    \ = false\n            break\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let index1 = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index2 = s.index(s.startIndex, offsetBy: i + 1)\n\
    \        let index3 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index1]\
    \ == s[index2] || s[index1] == s[index3] || s[index2] == s[index3] {\n       \
    \     result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex,\
    \ offsetBy: i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n   \
    \     let subString = s[start..<end]\n        if Set(subString).count < 3 {\n\
    \            result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count - 2 {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index1 = s.index(s.startIndex, offsetBy: i + 1)\n\
    \        let index2 = s.index(s.startIndex, offsetBy: i + 2)\n        if s[index]\
    \ == s[index1] || s[index] == s[index2] || s[index1] == s[index2] {\n        \
    \    result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let index = s.index(s.startIndex, offsetBy: i)\n        let nextIndex\
    \ = s.index(s.startIndex, offsetBy: i + 1)\n        let nextNextIndex = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index] == s[nextIndex] || s[index] == s[nextNextIndex]\
    \ || s[nextIndex] == s[nextNextIndex] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var chars\
    \ = Array(s)\n    for i in 0..<chars.count - 2 {\n        if chars[i] == chars[i\
    \ + 1] || chars[i] == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n       \
    \     return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\")\
    \ == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let subString = s[range]\n        if Set(subString).count != 3 {\n  \
    \          return false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\"\
    ) == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\"\
    ) == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\"\
    ) == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"\
    iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var result\
    \ = true\n    for i in 0..<s.count-2 {\n        let index = s.index(s.startIndex,\
    \ offsetBy: i)\n        let index1 = s.index(s.startIndex, offsetBy: i+1)\n  \
    \      let index2 = s.index(s.startIndex, offsetBy: i+2)\n        if s[index]\
    \ == s[index1] || s[index] == s[index2] || s[index1] == s[index2] {\n        \
    \    result = false\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    var index\
    \ = s.startIndex\n    while index < s.endIndex {\n        let nextIndex = s.index(index,\
    \ offsetBy: 3)\n        if nextIndex > s.endIndex {\n            break\n     \
    \   }\n        let subString = s[index..<nextIndex]\n        if Set(subString).count\
    \ != 3 {\n            return false\n        }\n        index = nextIndex\n   \
    \ }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'Swift/StringCharacterView.swift:153: Fatal error: String index is out of
    bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002ad294e8bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad294b82561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ad294b82286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ad294b8213c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ad294b81bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002ad294cb5b0d <unavailable> + 2693901

    6    tmponm1xo9l                        0x0000556e56168d43 <unavailable> + 7491

    7    tmponm1xo9l                        0x0000556e56168856 <unavailable> + 6230

    8    libc.so.6                          0x00002ad295077460 __libc_start_main +
    245

    9    tmponm1xo9l                        0x0000556e56168419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    let chars = Array(s)\n\
    \    for i in 0..<chars.count - 2 {\n        if chars[i] == chars[i + 1] || chars[i]\
    \ == chars[i + 2] || chars[i + 1] == chars[i + 2] {\n            return false\n\
    \        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    let s = Array(s)\n\
    \    for i in 0..<s.count - 2 {\n        if s[i] == s[i + 1] || s[i] == s[i +\
    \ 2] || s[i + 1] == s[i + 2] {\n            return false\n        }\n    }\n \
    \   return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var s = s\n   \
    \ while s.count >= 3 {\n        let first = s.removeFirst()\n        let second\
    \ = s.removeFirst()\n        let third = s.removeFirst()\n        if first ==\
    \ second || second == third || first == third {\n            return false\n  \
    \      }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmppu6yzkkl/tmppu6yzkkl.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b780c423c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b780c11ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b780c11a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b780c1197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppu6yzkkl                        0x000055ee89b718a8 <unavailable> + 6312

    5    libc.so.6                          0x00002b780c60f460 __libc_start_main +
    245

    6    tmppu6yzkkl                        0x000055ee89b71069 <unavailable> + 4201

    '
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count != 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013733
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    var result = true\n    if s.count < 3 {\n        result = false\n\
    \    } else {\n        for i in 0..<s.count - 2 {\n            let start = s.index(s.startIndex,\
    \ offsetBy: i)\n            let end = s.index(s.startIndex, offsetBy: i + 3)\n\
    \            let range = start..<end\n            let subString = s[range]\n \
    \           if Set(subString).count != 3 {\n                result = false\n \
    \               break\n            }\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var result = true\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range\
    \ = start..<end\n        let subString = s[range]\n        let set = Set(subString)\n\
    \        if set.count != 3 {\n            result = false\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s:\
    \ \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s:\
    \ \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s:\
    \ \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        let set = Set(sub)\n        if set.count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0...s.count\
    \ - 3 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        let set = Set(sub)\n        if set.count\
    \ != 3 {\n            return false\n        }\n    }\n    return true\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s:\
    \ \"aa\") == false)\nassert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s:\
    \ \"aabb\") == false)\nassert(is_happy(s: \"adb\") == true)\nassert(is_happy(s:\
    \ \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s:\
    \ \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpw2xw8p4p/tmpw2xw8p4p.swift:31: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6b50b5c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6b4dacb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6b4dac988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6b4dab7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw2xw8p4p                        0x0000562ed383e39b <unavailable> + 5019

    5    libc.so.6                          0x00002ba6b52a1460 __libc_start_main +
    245

    6    tmpw2xw8p4p                        0x0000562ed383dee9 <unavailable> + 3817

    '
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let range = start..<end\n\
    \        let sub = s[range]\n        if Set(sub).count < 3 {\n            return\
    \ false\n        }\n    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(is_happy(s: \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\n\
    assert(is_happy(s: \"abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\n\
    assert(is_happy(s: \"adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\n\
    assert(is_happy(s: \"iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") ==\
    \ false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: -4
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    guard s.count >= 3 else { return false }\n    var set = Set<String>()\n\
    \    for i in 0..<s.count - 2 {\n        let start = s.index(s.startIndex, offsetBy:\
    \ i)\n        let end = s.index(s.startIndex, offsetBy: i + 3)\n        let range\
    \ = start..<end\n        let sub = String(s[range])\n        if set.contains(sub)\
    \ {\n            return false\n        }\n        set.insert(sub)\n    }\n   \
    \ return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: Exception
  stderr: 'tmpspjm8dj2/tmpspjm8dj2.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad128dd9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad128ad0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad128ad0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad128acf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpspjm8dj2                        0x000055fd08962921 <unavailable> + 6433

    5    libc.so.6                          0x00002ad128fc5460 __libc_start_main +
    245

    6    tmpspjm8dj2                        0x000055fd089623c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013734
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let start = s.index(s.startIndex, offsetBy: i)\n        let end\
    \ = s.index(s.startIndex, offsetBy: i + 3)\n        let sub = s[start..<end]\n\
    \        if Set(sub).count != 3 {\n            return false\n        }\n    }\n\
    \    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(is_happy(s: \"a\"\
    ) == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"abcd\"\
    ) == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"adb\"\
    ) == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"iopaxpoi\"\
    ) == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013732
- exit_code: 0
  program: "\n/// You are given a string s.\n/// Your task is to check if the string\
    \ is happy or not.\n/// A string is happy if its length is at least 3 and every\
    \ 3 consecutive letters are distinct\n/// For example:\n/// is_happy(a) => False\n\
    /// is_happy(aa) => False\n/// is_happy(abcd) => True\n/// is_happy(aabb) => False\n\
    /// is_happy(adb) => True\n/// is_happy(xyy) => False\nfunc is_happy(s: String)\
    \ -> Bool {\n    if s.count < 3 {\n        return false\n    }\n    for i in 0..<s.count\
    \ - 2 {\n        let index = s.index(s.startIndex, offsetBy: i)\n        let nextIndex\
    \ = s.index(s.startIndex, offsetBy: i + 1)\n        let nextNextIndex = s.index(s.startIndex,\
    \ offsetBy: i + 2)\n        if s[index] == s[nextIndex] || s[index] == s[nextNextIndex]\
    \ || s[nextIndex] == s[nextNextIndex] {\n            return false\n        }\n\
    \    }\n    return true\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(is_happy(s:\
    \ \"a\") == false)\nassert(is_happy(s: \"aa\") == false)\nassert(is_happy(s: \"\
    abcd\") == true)\nassert(is_happy(s: \"aabb\") == false)\nassert(is_happy(s: \"\
    adb\") == true)\nassert(is_happy(s: \"xyy\") == false)\nassert(is_happy(s: \"\
    iopaxpoi\") == true)\nassert(is_happy(s: \"iopaxioi\") == false)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013734
