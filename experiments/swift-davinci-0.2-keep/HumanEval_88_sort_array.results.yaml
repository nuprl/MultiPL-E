language: swift
name: HumanEval_88_sort_array
results:
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted(by:\
    \ sum % 2 == 0 ? > : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp5ccs6d6x.swift:15:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmp5ccs6d6x.swift:15:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmp5ccs6d6x.swift:14:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var sortedArray\
    \ = array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        sortedArray.sort(by:\
    \ >)\n    } else {\n        sortedArray.sort(by: <)\n    }\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpsw_gg0y7/tmpsw_gg0y7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5c050dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5c0204b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5c0204988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5c02037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsw_gg0y7                        0x0000563f8750e934 <unavailable> + 6452

    5    libc.so.6                          0x00002ae5c06f9460 __libc_start_main +
    245

    6    tmpsw_gg0y7                        0x0000563f8750e189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    let sum\
    \ = array.first! + array.last!\n    if sum % 2 == 0 {\n        result.sort(by:\
    \ >)\n    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpb_9vr0z5/tmpb_9vr0z5.swift:14: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b914f356c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b914f04d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b914f04d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b914f04d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b914f04cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb_9vr0z5                        0x000055f6007cfefd <unavailable> + 7933

    6    tmpb_9vr0z5                        0x000055f6007cf50d <unavailable> + 5389

    7    libc.so.6                          0x00002b914f542460 __libc_start_main +
    245

    8    tmpb_9vr0z5                        0x000055f6007cf219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        if array.count % 2 == 0 {\n            result.sort(by: >)\n \
    \       } else {\n            result.sort(by: <)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_oiheybv/tmp_oiheybv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90ce8f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ce5eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ce5ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ce5e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oiheybv                        0x0000561a1f1c9756 <unavailable> + 5974

    5    libc.so.6                          0x00002b90ceadf460 __libc_start_main +
    245

    6    tmp_oiheybv                        0x0000561a1f1c9139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ == 0 {\n        return array\n    }\n    if array.count == 1 {\n        return\
    \ array\n    }\n    if array.count == 2 {\n        if array[0] > array[1] {\n\
    \            let temp = array[0]\n            array[0] = array[1]\n          \
    \  array[1] = temp\n        }\n        return array\n    }\n    if array[0] +\
    \ array[array.count - 1] % 2 == 0 {\n        array.sort(by: >)\n    } else {\n\
    \        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw682ceh0/tmpw682ceh0.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab132976c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab13266db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab13266d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab13266c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw682ceh0                        0x000055cc2d4fe984 <unavailable> + 6532

    5    libc.so.6                          0x00002ab132b62460 __libc_start_main +
    245

    6    tmpw682ceh0                        0x000055cc2d4fe1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let first = array.first!\n        let last = array.last!\n  \
    \      if (first + last) % 2 == 0 {\n            result.sort(by: >)\n        }\
    \ else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    let sum =\
    \ array.first! + array.last!\n    if sum % 2 == 0 {\n        array.sort(by: >)\n\
    \    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpu0tcp6d_/tmpu0tcp6d_.swift:14: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e8f342c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e8f039561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0e8f039286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0e8f03913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0e8f038bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpu0tcp6d_                        0x000055a2ae8ddf2d <unavailable> + 7981

    6    tmpu0tcp6d_                        0x000055a2ae8dd50d <unavailable> + 5389

    7    libc.so.6                          0x00002b0e8f52e460 __libc_start_main +
    245

    8    tmpu0tcp6d_                        0x000055a2ae8dd219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let firstIndex = array.first!\n    let lastIndex = array.last!\n\
    \    let sum = firstIndex + lastIndex\n    let sortedArray = array.sorted()\n\
    \    return sum % 2 == 0 ? sortedArray.reversed() : sortedArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let sum = array.first! + array.last!\n\
    \    return sum % 2 == 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzkvxn_ba/tmpzkvxn_ba.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b439d43ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b439d135561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b439d135286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b439d13513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b439d134bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpzkvxn_ba                        0x000056461830cf7b <unavailable> + 8059

    6    tmpzkvxn_ba                        0x000056461830c59d <unavailable> + 5533

    7    libc.so.6                          0x00002b439d62a460 __libc_start_main +
    245

    8    tmpzkvxn_ba                        0x000056461830c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        if array.count % 2 == 0 {\n            result.sort(by: >)\n \
    \       } else {\n            result.sort(by: <)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_oiheybv/tmp_oiheybv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90ce8f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ce5eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ce5ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ce5e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oiheybv                        0x0000561a1f1c9756 <unavailable> + 5974

    5    libc.so.6                          0x00002b90ceadf460 __libc_start_main +
    245

    6    tmp_oiheybv                        0x0000561a1f1c9139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    let isOdd\
    \ = array.count % 2 == 1\n    if isOdd {\n        array.sort(by: <)\n    } else\
    \ {\n        array.sort(by: >)\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmppgf17cen/tmppgf17cen.swift:38: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b05275ccc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b05272c3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b05272c3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b05272c27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppgf17cen                        0x0000558cd53e8756 <unavailable> + 5974

    5    libc.so.6                          0x00002b05277b8460 __libc_start_main +
    245

    6    tmppgf17cen                        0x0000558cd53e8139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if array[0] > array[1] {\n            return [array[1], array[0]]\n\
    \        }\n        return array\n    }\n    var array = array\n    var first\
    \ = 0\n    var last = array.count - 1\n    while first < last {\n        if array[first]\
    \ > array[last] {\n            let temp = array[first]\n            array[first]\
    \ = array[last]\n            array[last] = temp\n        }\n        first += 1\n\
    \        last -= 1\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpk4hz_1gq/tmpk4hz_1gq.swift:55: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002acfdcda7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002acfdca9eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002acfdca9e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002acfdca9d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4hz_1gq                        0x00005610cc8c26e6 <unavailable> + 5862

    5    libc.so.6                          0x00002acfdcf93460 __libc_start_main +
    245

    6    tmpk4hz_1gq                        0x00005610cc8c20c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let first = array.first!\n        let last = array.last!\n  \
    \      if (first + last) % 2 == 0 {\n            result.sort(by: >)\n        }\
    \ else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var array = array\n    let first = array.removeFirst()\n    let\
    \ last = array.removeLast()\n    let sum = first + last\n    let isOdd = sum %\
    \ 2 == 1\n    let sorted = array.sorted(by: isOdd ? > : <)\n    return [first]\
    \ + sorted + [last]\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmptyv8jgsm.swift:19:43: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: isOdd ? > : <)\n       \
    \                                   ^~\n                                     \
    \      \n/tmp/tmptyv8jgsm.swift:19:45: error: expected expression after '?' in\
    \ ternary expression\n    let sorted = array.sorted(by: isOdd ? > : <)\n     \
    \                                       ^\n/tmp/tmptyv8jgsm.swift:18:9: warning:\
    \ initialization of immutable value 'isOdd' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let isOdd = sum % 2 == 1\n    ~~~~^~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let isEven = (array.first! + array.last!) % 2 == 0\n    return\
    \ isEven ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if array.first! + array.last! % 2 == 0 {\n            result.sort(by:\
    \ >)\n        } else {\n            result.sort(by: <)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpf0ufgym2/tmpf0ufgym2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae44022bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43ff22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43ff22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43ff217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0ufgym2                        0x00005652f1d1ca14 <unavailable> + 6676

    5    libc.so.6                          0x00002ae440417460 __libc_start_main +
    245

    6    tmpf0ufgym2                        0x00005652f1d1c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ == 0 {\n        return array\n    }\n    if array.count == 1 {\n        return\
    \ array\n    }\n    if array.count == 2 {\n        if (array[0] + array[1]) %\
    \ 2 == 0 {\n            array.sort(by: >)\n        } else {\n            array.sort(by:\
    \ <)\n        }\n        return array\n    }\n    if (array[0] + array[array.count\
    \ - 1]) % 2 == 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by:\
    \ <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    return sum % 2\
    \ == 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sortedArray = array\n    if\
    \ array.count > 1 {\n        if array.first! + array.last! % 2 == 0 {\n      \
    \      sortedArray.sort(by: >)\n        } else {\n            sortedArray.sort(by:\
    \ <)\n        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdsf867i0/tmpdsf867i0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af51a320c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af51a017b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af51a017988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af51a0167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsf867i0                        0x000055770b08aa14 <unavailable> + 6676

    5    libc.so.6                          0x00002af51a50c460 __libc_start_main +
    245

    6    tmpdsf867i0                        0x000055770b08a269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let first = array.first!\n    let last = array.last!\n    let sum\
    \ = first + last\n    let sorted = array.sorted()\n    return sum % 2 == 0 ? sorted.reversed()\
    \ : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    let firstIndex\
    \ = array.first ?? 0\n    let lastIndex = array.last ?? 0\n    if (firstIndex\
    \ + lastIndex) % 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted(by:\
    \ { $0 < $1 })\n    return sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        return array[0] > array[1] ? [array[1], array[0]] : array\n\
    \    }\n    var result = array\n    let first = array[0]\n    let last = array[array.count\
    \ - 1]\n    if (first + last) % 2 == 0 {\n        result.sort(by: >)\n    } else\
    \ {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sortedArray = array\n    if\
    \ array.count > 1 {\n        let first = array.first!\n        let last = array.last!\n\
    \        if (first + last) % 2 == 0 {\n            sortedArray = array.sorted(by:\
    \ >)\n        } else {\n            sortedArray = array.sorted(by: <)\n      \
    \  }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sortedArray = array\n    if\
    \ array.count > 0 {\n        if array.first! + array.last! % 2 == 0 {\n      \
    \      sortedArray.sort(by: >)\n        } else {\n            sortedArray.sort(by:\
    \ <)\n        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpe9qvnatm/tmpe9qvnatm.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba26028dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba25ff84b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba25ff84988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba25ff837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe9qvnatm                        0x00005593eae83a14 <unavailable> + 6676

    5    libc.so.6                          0x00002ba260479460 __libc_start_main +
    245

    6    tmpe9qvnatm                        0x00005593eae83269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let sum = array.first! + array.last!\n\
    \    return sum % 2 == 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzkvxn_ba/tmpzkvxn_ba.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b439d43ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b439d135561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b439d135286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b439d13513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b439d134bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpzkvxn_ba                        0x000056461830cf7b <unavailable> + 8059

    6    tmpzkvxn_ba                        0x000056461830c59d <unavailable> + 5533

    7    libc.so.6                          0x00002b439d62a460 __libc_start_main +
    245

    8    tmpzkvxn_ba                        0x000056461830c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let first = array[0]\n        let last = array[array.count -\
    \ 1]\n        if (first + last) % 2 == 0 {\n            result.sort(by: >)\n \
    \       } else {\n            result.sort(by: <)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let first = array.first!\n        let last = array.last!\n  \
    \      if (first + last) % 2 == 0 {\n            result.sort(by: >)\n        }\
    \ else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var array = array\n    let sum = array[0] + array[array.count -\
    \ 1]\n    if sum % 2 == 0 {\n        array.sort(by: >)\n    } else {\n       \
    \ array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        return array.sorted(by: >)\n \
    \   }\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted(by:\
    \ sum % 2 == 0 ? > : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp5ccs6d6x.swift:15:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmp5ccs6d6x.swift:15:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmp5ccs6d6x.swift:14:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ > 1 {\n        if array[0] + array[array.count - 1] % 2 == 0 {\n           \
    \ array.sort(by: >)\n        } else {\n            array.sort(by: <)\n       \
    \ }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_z704jee/tmp_z704jee.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b665f074c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b665ed6bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b665ed6b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b665ed6a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_z704jee                        0x00005575fa364934 <unavailable> + 6452

    5    libc.so.6                          0x00002b665f260460 __libc_start_main +
    245

    6    tmp_z704jee                        0x00005575fa364189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ > 1 {\n        if array.first! + array.last! % 2 == 0 {\n            array.sort(by:\
    \ >)\n        } else {\n            array.sort(by: <)\n        }\n    }\n    return\
    \ array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6vmzie51/tmp6vmzie51.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c7a0f2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c79de9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c79de9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c79de87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6vmzie51                        0x000056099c5bca14 <unavailable> + 6676

    5    libc.so.6                          0x00002b4c7a2de460 __libc_start_main +
    245

    6    tmp6vmzie51                        0x000056099c5bc269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    var isOdd\
    \ = false\n    if array.count > 1 {\n        isOdd = (array[0] + array[array.count\
    \ - 1]) % 2 == 1\n    }\n    if isOdd {\n        result.sort(by: >)\n    } else\
    \ {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpreom73zn/tmpreom73zn.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b96d42d0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b96d3fc7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b96d3fc7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b96d3fc67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpreom73zn                        0x000055d6ccea27a6 <unavailable> + 6054

    5    libc.so.6                          0x00002b96d44bc460 __libc_start_main +
    245

    6    tmpreom73zn                        0x000055d6ccea2189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted(by: { (a, b)\
    \ -> Bool in\n        if (a + array.count) % 2 == 0 {\n            return a >\
    \ b\n        } else {\n            return a < b\n        }\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpueip_5_x/tmpueip_5_x.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b56975c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b5666cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b5666c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b5666b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpueip_5_x                        0x0000560ef1ea8746 <unavailable> + 5958

    5    libc.so.6                          0x00002b7b56b61460 __libc_start_main +
    245

    6    tmpueip_5_x                        0x0000560ef1ea8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if array[0] > array[1] {\n            return [array[1], array[0]]\n\
    \        }\n        return array\n    }\n    var result = array\n    if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n        result.sort(by: >)\n    } else\
    \ {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphtc8bgl5/tmphtc8bgl5.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b411e62cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b411e323b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b411e323988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b411e3227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphtc8bgl5                        0x000055698f043934 <unavailable> + 6452

    5    libc.so.6                          0x00002b411e818460 __libc_start_main +
    245

    6    tmphtc8bgl5                        0x000055698f043189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if (array[0] + array[1]) % 2 == 0 {\n            return [array[1],\
    \ array[0]]\n        } else {\n            return array\n        }\n    }\n  \
    \  var result = array\n    var i = 0\n    var j = array.count - 1\n    while i\
    \ < j {\n        if (result[i] + result[j]) % 2 == 0 {\n            let temp =\
    \ result[i]\n            result[i] = result[j]\n            result[j] = temp\n\
    \        }\n        i += 1\n        j -= 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwluo86ht/tmpwluo86ht.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af53fb0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af53f803b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af53f803988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af53f8027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwluo86ht                        0x00005593e0468786 <unavailable> + 6022

    5    libc.so.6                          0x00002af53fcf8460 __libc_start_main +
    245

    6    tmpwluo86ht                        0x00005593e0468169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if array.first! + array.last! % 2 == 0 {\n            result.sort(by:\
    \ >)\n        } else {\n            result.sort(by: <)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpf0ufgym2/tmpf0ufgym2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae44022bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43ff22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43ff22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43ff217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0ufgym2                        0x00005652f1d1ca14 <unavailable> + 6676

    5    libc.so.6                          0x00002ae440417460 __libc_start_main +
    245

    6    tmpf0ufgym2                        0x00005652f1d1c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        let first = array[0]\n        let last = array[array.count -\
    \ 1]\n        if (first + last) % 2 == 0 {\n            result.sort(by: >)\n \
    \       } else {\n            result.sort(by: <)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let firstIndex = array.first!\n    let lastIndex = array.last!\n\
    \    let sum = firstIndex + lastIndex\n    let isEven = sum % 2 == 0\n    let\
    \ sortedArray = array.sorted(by: isEven ? > : <)\n    return sortedArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp85nozx62.swift:18:49: error: unary operator cannot be separated\
    \ from its operand\n    let sortedArray = array.sorted(by: isEven ? > : <)\n \
    \                                               ^~\n                         \
    \                        \n/tmp/tmp85nozx62.swift:18:51: error: expected expression\
    \ after '?' in ternary expression\n    let sortedArray = array.sorted(by: isEven\
    \ ? > : <)\n                                                  ^\n/tmp/tmp85nozx62.swift:17:9:\
    \ warning: initialization of immutable value 'isEven' was never used; consider\
    \ replacing with assignment to '_' or removing it\n    let isEven = sum % 2 ==\
    \ 0\n    ~~~~^~~~~~\n    _\n"
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var newArray = array\n    let first = array[0]\n    let last =\
    \ array[array.count - 1]\n    if (first + last) % 2 == 0 {\n        newArray.sort(by:\
    \ >)\n    } else {\n        newArray.sort(by: <)\n    }\n    return newArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 0 else { return\
    \ [] }\n    guard array.count > 1 else { return array }\n    \n    var array =\
    \ array\n    let first = array[0]\n    let last = array[array.count - 1]\n   \
    \ let sum = first + last\n    let isOdd = sum % 2 == 1\n    \n    if isOdd {\n\
    \        array.sort { $0 < $1 }\n    } else {\n        array.sort { $0 > $1 }\n\
    \    }\n    \n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let sum = array.first! + array.last!\n\
    \    return sum % 2 == 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzkvxn_ba/tmpzkvxn_ba.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b439d43ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b439d135561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b439d135286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b439d13513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b439d134bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpzkvxn_ba                        0x000056461830cf7b <unavailable> + 8059

    6    tmpzkvxn_ba                        0x000056461830c59d <unavailable> + 5533

    7    libc.so.6                          0x00002b439d62a460 __libc_start_main +
    245

    8    tmpzkvxn_ba                        0x000056461830c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var result = array\n    if array.first! + array.last! % 2 == 0\
    \ {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0ym7c0tj/tmp0ym7c0tj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac28e8a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac28e59eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac28e59e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac28e59d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ym7c0tj                        0x000055f3e4e8fa14 <unavailable> + 6676

    5    libc.so.6                          0x00002ac28ea93460 __libc_start_main +
    245

    6    tmp0ym7c0tj                        0x000055f3e4e8f269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if array[0] > array[1] {\n            return [array[1], array[0]]\n\
    \        }\n        return array\n    }\n    var newArray = array\n    if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n        newArray.sort(by: >)\n    } else\
    \ {\n        newArray.sort(by: <)\n    }\n    return newArray\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmplo2e70l0/tmplo2e70l0.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0245bfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0242b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0242b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0242b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplo2e70l0                        0x000056515102a934 <unavailable> + 6452

    5    libc.so.6                          0x00002af0247ab460 __libc_start_main +
    245

    6    tmplo2e70l0                        0x000056515102a189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var result = array\n    if array.first! + array.last! % 2 == 0\
    \ {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0ym7c0tj/tmp0ym7c0tj.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac28e8a7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac28e59eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac28e59e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac28e59d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0ym7c0tj                        0x000055f3e4e8fa14 <unavailable> + 6676

    5    libc.so.6                          0x00002ac28ea93460 __libc_start_main +
    245

    6    tmp0ym7c0tj                        0x000055f3e4e8f269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if array.first! + array.last! % 2 == 0 {\n            result.sort(by:\
    \ >)\n        } else {\n            result.sort(by: <)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpf0ufgym2/tmpf0ufgym2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae44022bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43ff22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43ff22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43ff217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0ufgym2                        0x00005652f1d1ca14 <unavailable> + 6676

    5    libc.so.6                          0x00002ae440417460 __libc_start_main +
    245

    6    tmpf0ufgym2                        0x00005652f1d1c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var result = array\n    let sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        result.sort(by: >)\n    } else {\n    \
    \    result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var array = array\n    let sum = array[0] + array[array.count -\
    \ 1]\n    if sum % 2 == 0 {\n        array.sort(by: >)\n    } else {\n       \
    \ array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let first = array.first!\n        let last = array.last!\n  \
    \      if (first + last) % 2 == 0 {\n            result.sort(by: >)\n        }\
    \ else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ == 0 {\n        return result\n    }\n    if array.count == 1 {\n        return\
    \ result\n    }\n    if array.count == 2 {\n        if array[0] > array[1] {\n\
    \            result[0] = array[1]\n            result[1] = array[0]\n        }\n\
    \        return result\n    }\n    if array[0] + array[array.count - 1] % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmprk91t_cc/tmprk91t_cc.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b261ab8dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b261a884b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b261a884988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b261a8837b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprk91t_cc                        0x0000560501f01984 <unavailable> + 6532

    5    libc.so.6                          0x00002b261ad79460 __libc_start_main +
    245

    6    tmprk91t_cc                        0x0000560501f011d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var result\
    \ = array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        result.sort(by:\
    \ >)\n    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpp3j6m05y/tmpp3j6m05y.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8221f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae821eebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae821eeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae821eea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3j6m05y                        0x000056496ecec934 <unavailable> + 6452

    5    libc.so.6                          0x00002ae8223e0460 __libc_start_main +
    245

    6    tmpp3j6m05y                        0x000056496ecec189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if array.first! + array.last! % 2 == 0 {\n            result.sort(by:\
    \ >)\n        } else {\n            result.sort(by: <)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpf0ufgym2/tmpf0ufgym2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae44022bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43ff22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43ff22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43ff217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0ufgym2                        0x00005652f1d1ca14 <unavailable> + 6676

    5    libc.so.6                          0x00002ae440417460 __libc_start_main +
    245

    6    tmpf0ufgym2                        0x00005652f1d1c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result: [Int] = array\n    if\
    \ array.count > 0 {\n        if array.count % 2 == 0 {\n            result.sort(by:\
    \ >)\n        } else {\n            result.sort(by: <)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpk7_hugrm/tmpk7_hugrm.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc9df43c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc9dc3ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc9dc3a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc9dc397b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk7_hugrm                        0x000056373bc66756 <unavailable> + 5974

    5    libc.so.6                          0x00002abc9e12f460 __libc_start_main +
    245

    6    tmpk7_hugrm                        0x000056373bc66139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sortedArray = array\n    if\
    \ array.count > 0 {\n        if array.count % 2 == 0 {\n            sortedArray.sort(by:\
    \ >)\n        } else {\n            sortedArray.sort(by: <)\n        }\n    }\n\
    \    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpviwzb41e/tmpviwzb41e.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5395fbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5395cb2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5395cb2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5395cb17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpviwzb41e                        0x000055faa5402756 <unavailable> + 5974

    5    libc.so.6                          0x00002b53961a7460 __libc_start_main +
    245

    6    tmpviwzb41e                        0x000055faa5402139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let first = array.first!\n    let last = array.last!\n    let sum\
    \ = first + last\n    let isOdd = sum % 2 == 1\n    let sorted = array.sorted(by:\
    \ isOdd ? { $0 > $1 } : { $0 < $1 })\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaj7bz_xk/tmpaj7bz_xk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f3c98ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f3c685b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f3c685988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f3c6847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaj7bz_xk                        0x0000559d41937886 <unavailable> + 6278

    5    libc.so.6                          0x00002b0f3cb7a460 __libc_start_main +
    245

    6    tmpaj7bz_xk                        0x0000559d41937269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if array.first! + array.last! % 2 == 0 {\n            result.sort(by:\
    \ >)\n        } else {\n            result.sort(by: <)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpf0ufgym2/tmpf0ufgym2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae44022bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43ff22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43ff22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43ff217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0ufgym2                        0x00005652f1d1ca14 <unavailable> + 6676

    5    libc.so.6                          0x00002ae440417460 __libc_start_main +
    245

    6    tmpf0ufgym2                        0x00005652f1d1c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if array.first! + array.last! % 2 == 0 {\n            result.sort(by:\
    \ >)\n        } else {\n            result.sort(by: <)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpf0ufgym2/tmpf0ufgym2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae44022bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43ff22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43ff22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43ff217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0ufgym2                        0x00005652f1d1ca14 <unavailable> + 6676

    5    libc.so.6                          0x00002ae440417460 __libc_start_main +
    245

    6    tmpf0ufgym2                        0x00005652f1d1c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        if array.count % 2 == 0 {\n            result.sort(by: >)\n \
    \       } else {\n            result.sort(by: <)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_oiheybv/tmp_oiheybv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90ce8f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ce5eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ce5ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ce5e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oiheybv                        0x0000561a1f1c9756 <unavailable> + 5974

    5    libc.so.6                          0x00002b90ceadf460 __libc_start_main +
    245

    6    tmp_oiheybv                        0x0000561a1f1c9139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    let sum =\
    \ array.first! + array.last!\n    if sum % 2 == 0 {\n        array.sort(by: >)\n\
    \    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpu0tcp6d_/tmpu0tcp6d_.swift:14: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e8f342c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e8f039561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0e8f039286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0e8f03913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0e8f038bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpu0tcp6d_                        0x000055a2ae8ddf2d <unavailable> + 7981

    6    tmpu0tcp6d_                        0x000055a2ae8dd50d <unavailable> + 5389

    7    libc.so.6                          0x00002b0e8f52e460 __libc_start_main +
    245

    8    tmpu0tcp6d_                        0x000055a2ae8dd219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sortedArray\
    \ = array.sorted()\n    return sum % 2 == 0 ? sortedArray.reversed() : sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted(by:\
    \ sum % 2 == 0 ? > : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp5ccs6d6x.swift:15:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmp5ccs6d6x.swift:15:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmp5ccs6d6x.swift:14:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let isEven = (array.first! + array.last!) % 2 == 0\n    return\
    \ isEven ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var newArray\
    \ = array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        newArray.sort(by:\
    \ >)\n    } else {\n        newArray.sort(by: <)\n    }\n    return newArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpy1i3jcpi/tmpy1i3jcpi.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac532d5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac532a53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac532a53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac532a527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy1i3jcpi                        0x000055c908b8f934 <unavailable> + 6452

    5    libc.so.6                          0x00002ac532f48460 __libc_start_main +
    245

    6    tmpy1i3jcpi                        0x000055c908b8f189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted(by:\
    \ sum % 2 == 0 ? { $0 > $1 } : { $0 < $1 })\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    return sum % 2\
    \ == 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted(by:\
    \ sum % 2 == 0 ? > : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp5ccs6d6x.swift:15:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmp5ccs6d6x.swift:15:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmp5ccs6d6x.swift:14:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if array.first! + array.last! % 2 == 0 {\n            result.sort(by:\
    \ >)\n        } else {\n            result.sort(by: <)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpf0ufgym2/tmpf0ufgym2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae44022bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43ff22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43ff22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43ff217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0ufgym2                        0x00005652f1d1ca14 <unavailable> + 6676

    5    libc.so.6                          0x00002ae440417460 __libc_start_main +
    245

    6    tmpf0ufgym2                        0x00005652f1d1c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let sum = array.first! + array.last!\n\
    \    return array.sorted(by: sum % 2 == 0 ? > : <)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpywfzj56j.swift:14:44: error: unary operator cannot be separated\
    \ from its operand\n    return array.sorted(by: sum % 2 == 0 ? > : <)\n      \
    \                                     ^~\n                                   \
    \         \n/tmp/tmpywfzj56j.swift:14:46: error: expected expression after '?'\
    \ in ternary expression\n    return array.sorted(by: sum % 2 == 0 ? > : <)\n \
    \                                            ^\n/tmp/tmpywfzj56j.swift:13:9: warning:\
    \ initialization of immutable value 'sum' was never used; consider replacing with\
    \ assignment to '_' or removing it\n    let sum = array.first! + array.last!\n\
    \    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var array = array\n    let first = array.removeFirst()\n    let\
    \ last = array.removeLast()\n    let sum = first + last\n    if sum % 2 == 0 {\n\
    \        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n \
    \   return [first] + array + [last]\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp46hfefso/tmp46hfefso.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ab728ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ab6f81b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ab6f81988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ab6f807b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp46hfefso                        0x0000562f9f2bb8f6 <unavailable> + 6390

    5    libc.so.6                          0x00002b3ab7476460 __libc_start_main +
    245

    6    tmp46hfefso                        0x0000562f9f2bb2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted\
    \ { $0 < $1 }\n    return sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted(by: { (a, b)\
    \ -> Bool in\n        if (a + array.count) % 2 == 0 {\n            return a >\
    \ b\n        } else {\n            return a < b\n        }\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpueip_5_x/tmpueip_5_x.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b56975c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b5666cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b5666c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b5666b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpueip_5_x                        0x0000560ef1ea8746 <unavailable> + 5958

    5    libc.so.6                          0x00002b7b56b61460 __libc_start_main +
    245

    6    tmpueip_5_x                        0x0000560ef1ea8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let isEven = (array.first! + array.last!) % 2 == 0\n    return\
    \ isEven ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if array.first! + array.last! % 2 == 0 {\n            result.sort(by:\
    \ >)\n        } else {\n            result.sort(by: <)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpf0ufgym2/tmpf0ufgym2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae44022bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43ff22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43ff22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43ff217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0ufgym2                        0x00005652f1d1ca14 <unavailable> + 6676

    5    libc.so.6                          0x00002ae440417460 __libc_start_main +
    245

    6    tmpf0ufgym2                        0x00005652f1d1c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let first = array.first!\n    let last = array.last!\n    let sum\
    \ = first + last\n    let isOdd = sum % 2 == 1\n    let sorted = array.sorted(by:\
    \ isOdd ? { $0 > $1 } : { $0 < $1 })\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpaj7bz_xk/tmpaj7bz_xk.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0f3c98ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0f3c685b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0f3c685988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0f3c6847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpaj7bz_xk                        0x0000559d41937886 <unavailable> + 6278

    5    libc.so.6                          0x00002b0f3cb7a460 __libc_start_main +
    245

    6    tmpaj7bz_xk                        0x0000559d41937269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sortedArray\
    \ = array.sorted(by: sum % 2 == 0 ? > : <)\n    return sortedArray\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpkl_uadvz.swift:15:55: error: unary operator cannot be separated\
    \ from its operand\n    let sortedArray = array.sorted(by: sum % 2 == 0 ? > :\
    \ <)\n                                                      ^~\n             \
    \                                          \n/tmp/tmpkl_uadvz.swift:15:57: error:\
    \ expected expression after '?' in ternary expression\n    let sortedArray = array.sorted(by:\
    \ sum % 2 == 0 ? > : <)\n                                                    \
    \    ^\n/tmp/tmpkl_uadvz.swift:14:9: warning: initialization of immutable value\
    \ 'sum' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let sum = array[0] + array[array.count - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if array[0] > array[1] {\n            return [array[1], array[0]]\n\
    \        }\n        return array\n    }\n    var result = array\n    var i = 0\n\
    \    var j = array.count - 1\n    while i < j {\n        if array[i] > array[j]\
    \ {\n            result[i] = array[j]\n            result[j] = array[i]\n    \
    \    }\n        i += 1\n        j -= 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpmo32knfu/tmpmo32knfu.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1c190c3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1c18dbab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1c18dba988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1c18db97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmo32knfu                        0x0000564cb8aee6e6 <unavailable> + 5862

    5    libc.so.6                          0x00002b1c192af460 __libc_start_main +
    245

    6    tmpmo32knfu                        0x0000564cb8aee0c9 <unavailable> + 4297

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted\
    \ { $0 < $1 }\n    return sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let first = array.first!\n        let last = array.last!\n  \
    \      if (first + last) % 2 == 0 {\n            result.sort(by: >)\n        }\
    \ else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let first = array.first!\n        let last = array.last!\n  \
    \      let sum = first + last\n        if sum % 2 == 0 {\n            result.sort(by:\
    \ >)\n        } else {\n            result.sort(by: <)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ == 0 {\n        return array\n    }\n    if array.count == 1 {\n        return\
    \ array\n    }\n    if array.count == 2 {\n        if array[0] > array[1] {\n\
    \            let temp = array[0]\n            array[0] = array[1]\n          \
    \  array[1] = temp\n        }\n        return array\n    }\n    if array[0] +\
    \ array[array.count - 1] % 2 == 0 {\n        array.sort(by: >)\n    } else {\n\
    \        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpw682ceh0/tmpw682ceh0.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab132976c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab13266db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab13266d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab13266c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpw682ceh0                        0x000055cc2d4fe984 <unavailable> + 6532

    5    libc.so.6                          0x00002ab132b62460 __libc_start_main +
    245

    6    tmpw682ceh0                        0x000055cc2d4fe1d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if array.first! + array.last! % 2 == 0 {\n            result.sort(by:\
    \ >)\n        } else {\n            result.sort(by: <)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpf0ufgym2/tmpf0ufgym2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae44022bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43ff22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43ff22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43ff217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0ufgym2                        0x00005652f1d1ca14 <unavailable> + 6676

    5    libc.so.6                          0x00002ae440417460 __libc_start_main +
    245

    6    tmpf0ufgym2                        0x00005652f1d1c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var result = array\n    let sum = array[0] + array[array.count\
    \ - 1]\n    if sum % 2 == 0 {\n        result.sort(by: >)\n    } else {\n    \
    \    result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted\
    \ { $0 < $1 }\n    return sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var array\
    \ = array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        array.sort(by:\
    \ >)\n    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpgx1eur2g/tmpgx1eur2g.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22ba37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b72eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b72e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b72d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgx1eur2g                        0x00005645482f7934 <unavailable> + 6452

    5    libc.so.6                          0x00002ac22bc23460 __libc_start_main +
    245

    6    tmpgx1eur2g                        0x00005645482f7189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted()\n\
    \    return sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ == 0 {\n        return result\n    }\n    if array.count == 1 {\n        return\
    \ result\n    }\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n     \
    \   result.sort(by: >)\n    } else {\n        result.sort(by: <)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var result = array\n    let first = array.first!\n    let last\
    \ = array.last!\n    let sum = first + last\n    if sum % 2 == 0 {\n        result.sort(by:\
    \ >)\n    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let sum = array.first! + array.last!\n\
    \    return sum % 2 == 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzkvxn_ba/tmpzkvxn_ba.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b439d43ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b439d135561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b439d135286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b439d13513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b439d134bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpzkvxn_ba                        0x000056461830cf7b <unavailable> + 8059

    6    tmpzkvxn_ba                        0x000056461830c59d <unavailable> + 5533

    7    libc.so.6                          0x00002b439d62a460 __libc_start_main +
    245

    8    tmpzkvxn_ba                        0x000056461830c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if (array[0]\
    \ + array[array.count - 1]) % 2 == 0 {\n        return array.sorted(by: >)\n \
    \   }\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        if array.count % 2 == 0 {\n            result.sort(by: >)\n \
    \       } else {\n            result.sort(by: <)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_oiheybv/tmp_oiheybv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90ce8f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ce5eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ce5ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ce5e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oiheybv                        0x0000561a1f1c9756 <unavailable> + 5974

    5    libc.so.6                          0x00002b90ceadf460 __libc_start_main +
    245

    6    tmp_oiheybv                        0x0000561a1f1c9139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if array[0] > array[1] {\n            return [array[1], array[0]]\n\
    \        }\n        return array\n    }\n    var result = array\n    let first\
    \ = array[0]\n    let last = array[array.count - 1]\n    if (first + last) % 2\
    \ == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let first = array.first!\n    let last = array.last!\n    let sum\
    \ = first + last\n    let sorted = array.sorted()\n    return sum % 2 == 0 ? sorted.reversed()\
    \ : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count < 2 {\n        return\
    \ array\n    }\n    var a = array\n    let first = a[0]\n    let last = a[a.count\
    \ - 1]\n    let sum = first + last\n    if sum % 2 == 0 {\n        a.sort(by:\
    \ >)\n    } else {\n        a.sort(by: <)\n    }\n    return a\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    let sum\
    \ = array[0] + array[array.count - 1]\n    if sum % 2 == 0 {\n        return array.sorted(by:\
    \ >)\n    }\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return []\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpca0ltsqg/tmpca0ltsqg.swift:30: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad51abc0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad51a8b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad51a8b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad51a8b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpca0ltsqg                        0x000055de3ca5547d <unavailable> + 5245

    5    libc.so.6                          0x00002ad51adac460 __libc_start_main +
    245

    6    tmpca0ltsqg                        0x000055de3ca54fc9 <unavailable> + 4041

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sortedArray = array\n    if\
    \ array.count > 1 {\n        if array.first! + array.last! % 2 == 0 {\n      \
    \      sortedArray.sort(by: >)\n        } else {\n            sortedArray.sort(by:\
    \ <)\n        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdsf867i0/tmpdsf867i0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af51a320c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af51a017b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af51a017988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af51a0167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsf867i0                        0x000055770b08aa14 <unavailable> + 6676

    5    libc.so.6                          0x00002af51a50c460 __libc_start_main +
    245

    6    tmpdsf867i0                        0x000055770b08a269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        if array.count % 2 == 0 {\n            result.sort(by: >)\n \
    \       } else {\n            result.sort(by: <)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_oiheybv/tmp_oiheybv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90ce8f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ce5eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ce5ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ce5e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oiheybv                        0x0000561a1f1c9756 <unavailable> + 5974

    5    libc.so.6                          0x00002b90ceadf460 __libc_start_main +
    245

    6    tmp_oiheybv                        0x0000561a1f1c9139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ > 1 {\n        let first = array[0]\n        let last = array[array.count -\
    \ 1]\n        if (first + last) % 2 == 0 {\n            array.sort(by: >)\n  \
    \      } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var result\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var array\
    \ = array\n    var sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n  \
    \  }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if array.first! + array.last! % 2 == 0 {\n            result.sort(by:\
    \ >)\n        } else {\n            result.sort(by: <)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpf0ufgym2/tmpf0ufgym2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae44022bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43ff22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43ff22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43ff217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0ufgym2                        0x00005652f1d1ca14 <unavailable> + 6676

    5    libc.so.6                          0x00002ae440417460 __libc_start_main +
    245

    6    tmpf0ufgym2                        0x00005652f1d1c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if result.count\
    \ > 1 {\n        if (result[0] + result[result.count - 1]) % 2 == 0 {\n      \
    \      result.sort(by: >)\n        } else {\n            result.sort(by: <)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let sum = array.first! + array.last!\n\
    \    return sum % 2 == 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzkvxn_ba/tmpzkvxn_ba.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b439d43ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b439d135561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b439d135286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b439d13513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b439d134bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpzkvxn_ba                        0x000056461830cf7b <unavailable> + 8059

    6    tmpzkvxn_ba                        0x000056461830c59d <unavailable> + 5533

    7    libc.so.6                          0x00002b439d62a460 __libc_start_main +
    245

    8    tmpzkvxn_ba                        0x000056461830c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ == 0 {\n        return array\n    }\n    if array.count == 1 {\n        return\
    \ array\n    }\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n      \
    \  array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n    return\
    \ array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let first = array.first!\n        let last = array.last!\n  \
    \      if (first + last) % 2 == 0 {\n            result.sort(by: >)\n        }\
    \ else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if (array[0] + array[1]) % 2 == 0 {\n            return [array[1],\
    \ array[0]]\n        } else {\n            return array\n        }\n    }\n  \
    \  var result = array\n    var i = 0\n    var j = array.count - 1\n    while i\
    \ < j {\n        if (result[i] + result[j]) % 2 == 0 {\n            let temp =\
    \ result[i]\n            result[i] = result[j]\n            result[j] = temp\n\
    \        }\n        i += 1\n        j -= 1\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpwluo86ht/tmpwluo86ht.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af53fb0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af53f803b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af53f803988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af53f8027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwluo86ht                        0x00005593e0468786 <unavailable> + 6022

    5    libc.so.6                          0x00002af53fcf8460 __libc_start_main +
    245

    6    tmpwluo86ht                        0x00005593e0468169 <unavailable> + 4457

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        if array.count % 2 == 0 {\n            result.sort(by: >)\n \
    \       } else {\n            result.sort(by: <)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_oiheybv/tmp_oiheybv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90ce8f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ce5eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ce5ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ce5e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oiheybv                        0x0000561a1f1c9756 <unavailable> + 5974

    5    libc.so.6                          0x00002b90ceadf460 __libc_start_main +
    245

    6    tmp_oiheybv                        0x0000561a1f1c9139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let first = array.first!\n    let last = array.last!\n    let sum\
    \ = first + last\n    let sorted = array.sorted()\n    if sum % 2 == 0 {\n   \
    \     return sorted.reversed()\n    }\n    return sorted\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    return sum % 2\
    \ == 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted()\n\
    \    return sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let sum = array.first! + array.last!\n\
    \    let sortedArray = array.sorted()\n    return sum % 2 == 0 ? sortedArray.reversed()\
    \ : sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp0vpul0yt/tmp0vpul0yt.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002aacc5c4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aacc5941561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002aacc5941286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002aacc594113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002aacc5940bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0vpul0yt                        0x0000555edec19f7d <unavailable> + 8061

    6    tmp0vpul0yt                        0x0000555edec1958d <unavailable> + 5517

    7    libc.so.6                          0x00002aacc5e36460 __libc_start_main +
    245

    8    tmp0vpul0yt                        0x0000555edec19299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let first = array.first!\n        let last = array.last!\n  \
    \      if (first + last) % 2 == 0 {\n            result.sort(by: >)\n        }\
    \ else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ > 0 {\n        if array.count % 2 == 0 {\n            array.sort(by: >)\n  \
    \      } else {\n            array.sort(by: <)\n        }\n    }\n    return array\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_s9osct7/tmp_s9osct7.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aee6b7b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aee6b4aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aee6b4ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aee6b4ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_s9osct7                        0x0000559c3ee08756 <unavailable> + 5974

    5    libc.so.6                          0x00002aee6b9a3460 __libc_start_main +
    245

    6    tmp_s9osct7                        0x0000559c3ee08139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    return sum % 2\
    \ == 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sortedArray = array\n    if\
    \ array.count > 1 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n\
    \            sortedArray.sort(by: >)\n        } else {\n            sortedArray.sort(by:\
    \ <)\n        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted()\n\
    \    return sum % 2 == 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var sortedArray\
    \ = array\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n        sortedArray.sort(by:\
    \ >)\n    } else {\n        sortedArray.sort(by: <)\n    }\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    let sum\
    \ = array[0] + array[array.count - 1]\n    if sum % 2 == 0 {\n        return array.sorted(by:\
    \ >)\n    }\n    return array.sorted()\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var array\
    \ = array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        array.sort(by:\
    \ >)\n    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpgx1eur2g/tmpgx1eur2g.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac22ba37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac22b72eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac22b72e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac22b72d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgx1eur2g                        0x00005645482f7934 <unavailable> + 6452

    5    libc.so.6                          0x00002ac22bc23460 __libc_start_main +
    245

    6    tmpgx1eur2g                        0x00005645482f7189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let sum = array.first! + array.last!\n\
    \    let sorted = array.sorted()\n    return sum % 2 == 0 ? sorted.reversed()\
    \ : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfgo368y1/tmpfgo368y1.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2516fc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2516cb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2516cb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2516cb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2516cb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpfgo368y1                        0x000055d99355df7d <unavailable> + 8061

    6    tmpfgo368y1                        0x000055d99355d58d <unavailable> + 5517

    7    libc.so.6                          0x00002b25171ae460 __libc_start_main +
    245

    8    tmpfgo368y1                        0x000055d99355d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if array[0] > array[1] {\n            return [array[1], array[0]]\n\
    \        }\n        return array\n    }\n    if array.count == 3 {\n        if\
    \ array[0] > array[1] {\n            if array[1] > array[2] {\n              \
    \  return [array[2], array[1], array[0]]\n            }\n            if array[0]\
    \ > array[2] {\n                return [array[1], array[2], array[0]]\n      \
    \      }\n            return [array[1], array[0], array[2]]\n        }\n     \
    \   if array[0] > array[2] {\n            return [array[2], array[0], array[1]]\n\
    \        }\n        if array[1] > array[2] {\n            return [array[0], array[2],\
    \ array[1]]\n        }\n        return array\n    }\n    if array.count == 4 {\n\
    \        if array[0] > array[1] {\n            if array[1] > array[2] {\n    \
    \            if array[2] > array[3] {\n                    return [array[3], array[2],\
    \ array[1], array[0]]\n                }\n                if array[0] > array[3]\
    \ {\n                    return [array[2], array[3], array[1], array[0]]\n   \
    \             }\n                return [array[2], array[1], array[3], array[0]]\n\
    \            }\n            if array[0] > array[2] {\n                if array[2]\
    \ > array[3] {\n                    return [array[1], array[2], array[3], array[0]]\n\
    \                }\n                return [array[1], array[3], array[2], array[0]]\n\
    \            }\n            if array[2] > array[3] {\n                return [array[1],\
    \ array[0], array[2], array[3]]\n            }\n            return [array[1],\
    \ array[0], array[3], array[2]]\n       \n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpzyuc3vbu.swift:86:64: error: expected '}' at end of brace statement\n\
    assert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])\n            \
    \                                                   ^\n/tmp/tmpzyuc3vbu.swift:43:25:\
    \ note: to match this opening '{'\n    if array.count == 4 {\n               \
    \         ^\n/tmp/tmpzyuc3vbu.swift:86:64: error: expected '}' at end of brace\
    \ statement\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])\n\
    \                                                               ^\n/tmp/tmpzyuc3vbu.swift:12:40:\
    \ note: to match this opening '{'\nfunc sort_array(array: [Int]) -> [Int] {\n\
    \                                       ^\n/tmp/tmpzyuc3vbu.swift:68:6: error:\
    \ operator functions can only be declared at global or in type scope\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n     ^\n"
  stdout: ''
  timestamp: 1660013863
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted(by:\
    \ sum % 2 == 0 ? > : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp5ccs6d6x.swift:15:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmp5ccs6d6x.swift:15:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmp5ccs6d6x.swift:14:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var result\
    \ = array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        result.sort(by:\
    \ >)\n    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpp3j6m05y/tmpp3j6m05y.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8221f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae821eebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae821eeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae821eea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3j6m05y                        0x000056496ecec934 <unavailable> + 6452

    5    libc.so.6                          0x00002ae8223e0460 __libc_start_main +
    245

    6    tmpp3j6m05y                        0x000056496ecec189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ == 0 {\n        return array\n    }\n    if array.count == 1 {\n        return\
    \ array\n    }\n    if (array[0] + array[array.count - 1]) % 2 == 0 {\n      \
    \  array.sort(by: >)\n    } else {\n        array.sort(by: <)\n    }\n    return\
    \ array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n \
    \   if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(sort_array(array: [] as\
    \ [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var array\
    \ = array\n    let sum = array[0] + array[array.count - 1]\n    if sum % 2 ==\
    \ 0 {\n        array.sort(by: >)\n    } else {\n        array.sort(by: <)\n  \
    \  }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sortedArray = array.sorted()\n    let sum = array.first! +\
    \ array.last!\n    return sum % 2 == 0 ? sortedArray.reversed() : sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = sum\
    \ % 2 == 0 ? array.sorted(by: >) : array.sorted()\n    return sorted\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    let sum =\
    \ array.first! + array.last!\n    if sum % 2 == 0 {\n        array.sort(by: >)\n\
    \    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpu0tcp6d_/tmpu0tcp6d_.swift:14: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b0e8f342c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0e8f039561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0e8f039286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0e8f03913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0e8f038bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpu0tcp6d_                        0x000055a2ae8ddf2d <unavailable> + 7981

    6    tmpu0tcp6d_                        0x000055a2ae8dd50d <unavailable> + 5389

    7    libc.so.6                          0x00002b0e8f52e460 __libc_start_main +
    245

    8    tmpu0tcp6d_                        0x000055a2ae8dd219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var result\
    \ = array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        result.sort(by:\
    \ >)\n    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpp3j6m05y/tmpp3j6m05y.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae8221f4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae821eebb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae821eeb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae821eea7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp3j6m05y                        0x000056496ecec934 <unavailable> + 6452

    5    libc.so.6                          0x00002ae8223e0460 __libc_start_main +
    245

    6    tmpp3j6m05y                        0x000056496ecec189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let first = array.first!\n        let last = array.last!\n  \
    \      if (first + last) % 2 == 0 {\n            result.sort(by: >)\n        }\
    \ else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    let sum\
    \ = array.first! + array.last!\n    if sum % 2 == 0 {\n        result.sort(by:\
    \ >)\n    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpb_9vr0z5/tmpb_9vr0z5.swift:14: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b914f356c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b914f04d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b914f04d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b914f04d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b914f04cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpb_9vr0z5                        0x000055f6007cfefd <unavailable> + 7933

    6    tmpb_9vr0z5                        0x000055f6007cf50d <unavailable> + 5389

    7    libc.so.6                          0x00002b914f542460 __libc_start_main +
    245

    8    tmpb_9vr0z5                        0x000055f6007cf219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ > 1 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   array.sort(by: >)\n        } else {\n            array.sort(by: <)\n     \
    \   }\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let sum = array.first! + array.last!\n\
    \    return sum % 2 == 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzkvxn_ba/tmpzkvxn_ba.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b439d43ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b439d135561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b439d135286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b439d13513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b439d134bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpzkvxn_ba                        0x000056461830cf7b <unavailable> + 8059

    6    tmpzkvxn_ba                        0x000056461830c59d <unavailable> + 5533

    7    libc.so.6                          0x00002b439d62a460 __libc_start_main +
    245

    8    tmpzkvxn_ba                        0x000056461830c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if array[0] > array[1] {\n            return [array[1], array[0]]\n\
    \        }\n        return array\n    }\n    var result = array\n    let first\
    \ = array[0]\n    let last = array[array.count - 1]\n    if (first + last) % 2\
    \ == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by: <)\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ == 0 {\n        return array\n    }\n    if array.count == 1 {\n        return\
    \ array\n    }\n    if array.count == 2 {\n        if array[0] > array[1] {\n\
    \            array.swapAt(0, 1)\n        }\n        return array\n    }\n    if\
    \ array[0] + array[array.count - 1] % 2 == 0 {\n        array.sort(by: >)\n  \
    \  } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpgxscwoam/tmpgxscwoam.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eaa2e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ea9fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ea9fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ea9fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxscwoam                        0x000055621e08f9d4 <unavailable> + 6612

    5    libc.so.6                          0x00002b2eaa4d5460 __libc_start_main +
    245

    6    tmpgxscwoam                        0x000055621e08f229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var result = array\n    let first = array.first!\n    let last\
    \ = array.last!\n    let sum = first + last\n    if sum % 2 == 0 {\n        result.sort(by:\
    \ >)\n    } else {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let first = array.first!\n    let last = array.last!\n    let sum\
    \ = first + last\n    let sorted = array.sorted()\n    return sum % 2 == 0 ? sorted.reversed()\
    \ : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    var sum =\
    \ array[0] + array[array.count - 1]\n    if sum % 2 == 0 {\n        array.sort(by:\
    \ >)\n    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range

    Current stack trace:

    0    libswiftCore.so                    0x00002b8332186c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8331e7d561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b8331e7d286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b8331e7d13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b8331e7cbb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftSwiftOnoneSupport.so       0x00002b8331c7ce83 <unavailable> + 188035

    6    tmp8cjc_bsk                        0x000055b9c0392daf <unavailable> + 7599

    7    tmp8cjc_bsk                        0x000055b9c039247d <unavailable> + 5245

    8    libc.so.6                          0x00002b8332372460 __libc_start_main +
    245

    9    tmp8cjc_bsk                        0x000055b9c0392189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var sortedArray\
    \ = array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        sortedArray.sort(by:\
    \ >)\n    } else {\n        sortedArray.sort(by: <)\n    }\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpsw_gg0y7/tmpsw_gg0y7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5c050dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5c0204b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5c0204988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5c02037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsw_gg0y7                        0x0000563f8750e934 <unavailable> + 6452

    5    libc.so.6                          0x00002ae5c06f9460 __libc_start_main +
    245

    6    tmpsw_gg0y7                        0x0000563f8750e189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if array.first! + array.last! % 2 == 0 {\n            result.sort(by:\
    \ >)\n        } else {\n            result.sort(by: <)\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpf0ufgym2/tmpf0ufgym2.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae44022bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae43ff22b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae43ff22988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae43ff217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf0ufgym2                        0x00005652f1d1ca14 <unavailable> + 6676

    5    libc.so.6                          0x00002ae440417460 __libc_start_main +
    245

    6    tmpf0ufgym2                        0x00005652f1d1c269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if array[0] > array[1] {\n            return [array[1], array[0]]\n\
    \        }\n        return array\n    }\n    var sortedArray = array\n    if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n        sortedArray.sort(by: >)\n    }\
    \ else {\n        sortedArray.sort(by: <)\n    }\n    return sortedArray\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzd90hz16/tmpzd90hz16.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8ed3006c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8ed2cfdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8ed2cfd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8ed2cfc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzd90hz16                        0x0000560227581934 <unavailable> + 6452

    5    libc.so.6                          0x00002b8ed31f2460 __libc_start_main +
    245

    6    tmpzd90hz16                        0x0000560227581189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let sum = array.first! + array.last!\n\
    \    return sum % 2 == 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzkvxn_ba/tmpzkvxn_ba.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b439d43ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b439d135561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b439d135286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b439d13513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b439d134bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpzkvxn_ba                        0x000056461830cf7b <unavailable> + 8059

    6    tmpzkvxn_ba                        0x000056461830c59d <unavailable> + 5533

    7    libc.so.6                          0x00002b439d62a460 __libc_start_main +
    245

    8    tmpzkvxn_ba                        0x000056461830c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    if array.count\
    \ == 2 {\n        if array[0] > array[1] {\n            return [array[1], array[0]]\n\
    \        }\n        return array\n    }\n    var result = array\n    if array[0]\
    \ + array[array.count - 1] % 2 == 0 {\n        result.sort(by: >)\n    } else\
    \ {\n        result.sort(by: <)\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmphtc8bgl5/tmphtc8bgl5.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b411e62cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b411e323b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b411e323988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b411e3227b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphtc8bgl5                        0x000055698f043934 <unavailable> + 6452

    5    libc.so.6                          0x00002b411e818460 __libc_start_main +
    245

    6    tmphtc8bgl5                        0x000055698f043189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let sum = array.first! + array.last!\n\
    \    let sorted = array.sorted()\n    return sum % 2 == 0 ? sorted.reversed()\
    \ : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpfgo368y1/tmpfgo368y1.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b2516fc2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2516cb9561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2516cb9286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2516cb913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2516cb8bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpfgo368y1                        0x000055d99355df7d <unavailable> + 8061

    6    tmpfgo368y1                        0x000055d99355d58d <unavailable> + 5517

    7    libc.so.6                          0x00002b25171ae460 __libc_start_main +
    245

    8    tmpfgo368y1                        0x000055d99355d299 <unavailable> + 4761

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ == 0 {\n        return result\n    }\n    if array.count == 1 {\n        return\
    \ result\n    }\n    let sum = array[0] + array[array.count - 1]\n    if sum %\
    \ 2 == 0 {\n        result.sort(by: >)\n    } else {\n        result.sort(by:\
    \ <)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let isOdd = sum\
    \ % 2 == 1\n    let sorted = array.sorted(by: isOdd ? > : <)\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpz6r2upra.swift:16:43: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: isOdd ? > : <)\n       \
    \                                   ^~\n                                     \
    \      \n/tmp/tmpz6r2upra.swift:16:45: error: expected expression after '?' in\
    \ ternary expression\n    let sorted = array.sorted(by: isOdd ? > : <)\n     \
    \                                       ^\n/tmp/tmpz6r2upra.swift:15:9: warning:\
    \ initialization of immutable value 'isOdd' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let isOdd = sum % 2 == 1\n    ~~~~^~~~~\n\
    \    _\n"
  stdout: ''
  timestamp: 1660013863
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted(by:\
    \ sum % 2 == 0 ? > : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp5ccs6d6x.swift:15:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmp5ccs6d6x.swift:15:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmp5ccs6d6x.swift:14:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var sortedArray\
    \ = array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        sortedArray.sort(by:\
    \ >)\n    } else {\n        sortedArray.sort(by: <)\n    }\n    return sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpsw_gg0y7/tmpsw_gg0y7.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae5c050dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae5c0204b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae5c0204988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae5c02037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsw_gg0y7                        0x0000563f8750e934 <unavailable> + 6452

    5    libc.so.6                          0x00002ae5c06f9460 __libc_start_main +
    245

    6    tmpsw_gg0y7                        0x0000563f8750e189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sortedArray = array\n    if\
    \ array.count > 1 {\n        if array.first! + array.last! % 2 == 0 {\n      \
    \      sortedArray.sort(by: >)\n        } else {\n            sortedArray.sort(by:\
    \ <)\n        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpdsf867i0/tmpdsf867i0.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af51a320c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af51a017b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af51a017988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af51a0167b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdsf867i0                        0x000055770b08aa14 <unavailable> + 6676

    5    libc.so.6                          0x00002af51a50c460 __libc_start_main +
    245

    6    tmpdsf867i0                        0x000055770b08a269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        if array.count % 2 == 0 {\n            result.sort(by: >)\n \
    \       } else {\n            result.sort(by: <)\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp_oiheybv/tmp_oiheybv.swift:39: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b90ce8f3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b90ce5eab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b90ce5ea988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b90ce5e97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_oiheybv                        0x0000561a1f1c9756 <unavailable> + 5974

    5    libc.so.6                          0x00002b90ceadf460 __libc_start_main +
    245

    6    tmp_oiheybv                        0x0000561a1f1c9139 <unavailable> + 4409

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sortedArray\
    \ = array.sorted()\n    return sum % 2 == 0 ? sortedArray.reversed() : sortedArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    var first\
    \ = 0\n    var last = array.count - 1\n    while first < last {\n        if array[first]\
    \ % 2 == 0 {\n            while array[last] % 2 == 0 && first < last {\n     \
    \           last -= 1\n            }\n            swap(&array[first], &array[last])\n\
    \        }\n        first += 1\n    }\n    if array.count % 2 == 0 {\n       \
    \ array = array.reverse()\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpdgd1myk8.swift:26:23: error: cannot assign value of type '()' to\
    \ type '[Int]'\n        array = array.reverse()\n                ~~~~~~^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013863
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sorted = array.sorted(by:\
    \ sum % 2 == 0 ? > : <)\n    return sorted\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp5ccs6d6x.swift:15:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmp5ccs6d6x.swift:15:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmp5ccs6d6x.swift:14:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array[0] + array[array.count\
    \ - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013862
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sum = array[0] + array[array.count - 1]\n    let sortedArray\
    \ = array.sorted(by: sum % 2 == 0 ? > : <)\n    return sortedArray\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpkl_uadvz.swift:15:55: error: unary operator cannot be separated\
    \ from its operand\n    let sortedArray = array.sorted(by: sum % 2 == 0 ? > :\
    \ <)\n                                                      ^~\n             \
    \                                          \n/tmp/tmpkl_uadvz.swift:15:57: error:\
    \ expected expression after '?' in ternary expression\n    let sortedArray = array.sorted(by:\
    \ sum % 2 == 0 ? > : <)\n                                                    \
    \    ^\n/tmp/tmpkl_uadvz.swift:14:9: warning: initialization of immutable value\
    \ 'sum' was never used; consider replacing with assignment to '_' or removing\
    \ it\n    let sum = array[0] + array[array.count - 1]\n    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 0 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    let sum =\
    \ array.first! + array.last!\n    if sum % 2 == 0 {\n        array.sortInPlace(>)\n\
    \    } else {\n        array.sortInPlace(<)\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmp3vytu20s.swift:16:15: error: value of type '[Int]' has no member\
    \ 'sortInPlace'\n        array.sortInPlace(>)\n        ~~~~~ ^~~~~~~~~~~\n/tmp/tmp3vytu20s.swift:18:15:\
    \ error: value of type '[Int]' has no member 'sortInPlace'\n        array.sortInPlace(<)\n\
    \        ~~~~~ ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    let sum\
    \ = array[0] + array[array.count - 1]\n    let sortedArray = array.sorted()\n\
    \    if sum % 2 == 0 {\n        return sortedArray.reversed()\n    }\n    return\
    \ sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let isOdd = (array.first! + array.last!) % 2 == 1\n    return isOdd\
    \ ? array.sorted() : array.sorted().reversed()\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let first = array.first!\n        let last = array.last!\n  \
    \      if (first + last) % 2 == 0 {\n            result.sort(by: >)\n        }\
    \ else {\n            result.sort(by: <)\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted { (a, b) ->\
    \ Bool in\n        if a + array.count % 2 == 0 {\n            return a > b\n \
    \       } else {\n            return a < b\n        }\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmp6q1d6255/tmp6q1d6255.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adb7a972c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adb7a669b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adb7a669988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adb7a6687b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6q1d6255                        0x000055b18fd8c746 <unavailable> + 5958

    5    libc.so.6                          0x00002adb7ab5e460 __libc_start_main +
    245

    6    tmp6q1d6255                        0x000055b18fd8c129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var array = array\n    let sum = array[0] + array[array.count -\
    \ 1]\n    if sum % 2 == 0 {\n        array.sort(by: >)\n    } else {\n       \
    \ array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ == 0 {\n        return array\n    }\n    if array.count == 1 {\n        return\
    \ array\n    }\n    if array.count == 2 {\n        if array[0] > array[1] {\n\
    \            array.swapAt(0, 1)\n        }\n        return array\n    }\n    if\
    \ (array[0] + array[array.count - 1]) % 2 == 0 {\n        array.sort(by: >)\n\
    \    } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if result.count\
    \ > 1 {\n        if (result[0] + result[result.count - 1]) % 2 == 0 {\n      \
    \      result.sort(by: >)\n        } else {\n            result.sort(by: <)\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ == 0 {\n        return array\n    }\n    if array.count == 1 {\n        return\
    \ array\n    }\n    if array.count == 2 {\n        if array[0] > array[1] {\n\
    \            array.swapAt(0, 1)\n        }\n        return array\n    }\n    if\
    \ array[0] + array[array.count - 1] % 2 == 0 {\n        array.sort(by: >)\n  \
    \  } else {\n        array.sort(by: <)\n    }\n    return array\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpgxscwoam/tmpgxscwoam.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2eaa2e9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2ea9fe0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2ea9fe0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2ea9fdf7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgxscwoam                        0x000055621e08f9d4 <unavailable> + 6612

    5    libc.so.6                          0x00002b2eaa4d5460 __libc_start_main +
    245

    6    tmpgxscwoam                        0x000055621e08f229 <unavailable> + 4649

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var array = array\n    if array.count\
    \ == 0 {\n        return array\n    }\n    if array.count == 1 {\n        return\
    \ array\n    }\n    if array.count == 2 {\n        return array.reduce(0, +) %\
    \ 2 == 0 ? array.reversed() : array\n    }\n    if array.count > 2 {\n       \
    \ if array.reduce(0, +) % 2 == 0 {\n            array.sort(by: >)\n        } else\
    \ {\n            array.sort(by: <)\n        }\n    }\n    return array\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpvlet16hx/tmpvlet16hx.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae3fc3e2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae3fc0d9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae3fc0d9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae3fc0d87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvlet16hx                        0x0000559e8eff09b4 <unavailable> + 6580

    5    libc.so.6                          0x00002ae3fc5ce460 __libc_start_main +
    245

    6    tmpvlet16hx                        0x0000559e8eff0209 <unavailable> + 4617

    '
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        let sum = array[0] + array[array.count - 1]\n        if sum %\
    \ 2 == 0 {\n            result.sort(by: >)\n        } else {\n            result.sort(by:\
    \ <)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let sum = array.first! + array.last!\n\
    \    return sum % 2 == 0 ? array.sorted(by: >) : array.sorted()\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpzkvxn_ba/tmpzkvxn_ba.swift:13: Fatal error: Unexpectedly found nil while
    unwrapping an Optional value

    Current stack trace:

    0    libswiftCore.so                    0x00002b439d43ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b439d135561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b439d135286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b439d13513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b439d134bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpzkvxn_ba                        0x000056461830cf7b <unavailable> + 8059

    6    tmpzkvxn_ba                        0x000056461830c59d <unavailable> + 5533

    7    libc.so.6                          0x00002b439d62a460 __libc_start_main +
    245

    8    tmpzkvxn_ba                        0x000056461830c2a9 <unavailable> + 4777

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let first = array.first!\n    let last = array.last!\n    let sum\
    \ = first + last\n    let sorted = array.sorted()\n    return sum % 2 == 0 ? sorted.reversed()\
    \ : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    return array.sorted(by: { (a, b)\
    \ -> Bool in\n        if (a + array.count) % 2 == 0 {\n            return a >\
    \ b\n        } else {\n            return a < b\n        }\n    })\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpueip_5_x/tmpueip_5_x.swift:37: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7b56975c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7b5666cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7b5666c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7b5666b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpueip_5_x                        0x0000560ef1ea8746 <unavailable> + 5958

    5    libc.so.6                          0x00002b7b56b61460 __libc_start_main +
    245

    6    tmpueip_5_x                        0x0000560ef1ea8129 <unavailable> + 4393

    '
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    var result = array\n    let isOdd = (result[0] + result[result.count\
    \ - 1]) % 2 == 1\n    result.sort { (a, b) -> Bool in\n        if isOdd {\n  \
    \          return a < b\n        } else {\n            return a > b\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 1
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    let sum = array.first! + array.last!\n\
    \    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n    return sorted\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: SyntaxError
  stderr: "/tmp/tmpofrrf2k1.swift:14:50: error: unary operator cannot be separated\
    \ from its operand\n    let sorted = array.sorted(by: sum % 2 == 0 ? > : <)\n\
    \                                                 ^~\n                       \
    \                           \n/tmp/tmpofrrf2k1.swift:14:52: error: expected expression\
    \ after '?' in ternary expression\n    let sorted = array.sorted(by: sum % 2 ==\
    \ 0 ? > : <)\n                                                   ^\n/tmp/tmpofrrf2k1.swift:13:9:\
    \ warning: initialization of immutable value 'sum' was never used; consider replacing\
    \ with assignment to '_' or removing it\n    let sum = array.first! + array.last!\n\
    \    ~~~~^~~\n    _\n"
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var result = array\n    if array.count\
    \ > 1 {\n        if (array[0] + array[array.count - 1]) % 2 == 0 {\n         \
    \   result.sort(by: >)\n        } else {\n            result.sort(by: <)\n   \
    \     }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let first = array.first!\n    let last = array.last!\n    let sum\
    \ = first + last\n    let sorted = array.sorted()\n    return sum % 2 == 0 ? sorted.reversed()\
    \ : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(sort_array(array: []\
    \ as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013862
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    var sortedArray = array\n    if\
    \ array.count > 0 {\n        let firstValue = array[0]\n        let lastValue\
    \ = array[array.count - 1]\n        if (firstValue + lastValue) % 2 == 0 {\n \
    \           sortedArray.sort(by: >)\n        } else {\n            sortedArray.sort(by:\
    \ <)\n        }\n    }\n    return sortedArray\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(sort_array(array: [] as [Int]) == [] as [Int])\nassert(sort_array(array:\
    \ [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4,\
    \ 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\n\
    assert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array: [15, 42,\
    \ 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array: [21, 14,\
    \ 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: 0
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    guard array.count > 1 else { return\
    \ array }\n    let sorted = array.sorted()\n    let first = sorted.first!\n  \
    \  let last = sorted.last!\n    let sum = first + last\n    return sum % 2 ==\
    \ 0 ? sorted.reversed() : sorted\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(sort_array(array:\
    \ [] as [Int]) == [] as [Int])\nassert(sort_array(array: [5]) == [5])\nassert(sort_array(array:\
    \ [2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4,\
    \ 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1])\
    \ == [1, 2])\nassert(sort_array(array: [15, 42, 87, 32, 11, 0]) == [0, 11, 15,\
    \ 32, 42, 87])\nassert(sort_array(array: [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013863
- exit_code: -4
  program: "\n/// Given an array of non-negative integers, return a copy of the given\
    \ array after sorting,\n/// you will sort the given array in ascending order if\
    \ the sum( first index value, last index value) is odd,\n/// or sort it in descending\
    \ order if the sum( first index value, last index value) is even.\n/// Note:\n\
    /// * don't change the given array.\n/// Examples:\n/// * sort_array([]) => []\n\
    /// * sort_array([5]) => [5]\n/// * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
    \ 3, 4, 5]\n/// * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n\
    func sort_array(array: [Int]) -> [Int] {\n    if array.count == 0 {\n        return\
    \ []\n    }\n    if array.count == 1 {\n        return array\n    }\n    var newArray\
    \ = array\n    if array[0] + array[array.count - 1] % 2 == 0 {\n        newArray.sort(by:\
    \ >)\n    } else {\n        newArray.sort(by: <)\n    }\n    return newArray\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(sort_array(array: [] as [Int]) == [] as [Int])\n\
    assert(sort_array(array: [5]) == [5])\nassert(sort_array(array: [2, 4, 3, 0, 1,\
    \ 5]) == [0, 1, 2, 3, 4, 5])\nassert(sort_array(array: [2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0])\nassert(sort_array(array: [2, 1]) == [1, 2])\nassert(sort_array(array:\
    \ [15, 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\nassert(sort_array(array:\
    \ [21, 14, 23, 11]) == [23, 21, 14, 11])"
  status: Exception
  stderr: 'tmpy1i3jcpi/tmpy1i3jcpi.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac532d5cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac532a53b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac532a53988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac532a527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpy1i3jcpi                        0x000055c908b8f934 <unavailable> + 6452

    5    libc.so.6                          0x00002ac532f48460 __libc_start_main +
    245

    6    tmpy1i3jcpi                        0x000055c908b8f189 <unavailable> + 4489

    '
  stdout: ''
  timestamp: 1660013863
