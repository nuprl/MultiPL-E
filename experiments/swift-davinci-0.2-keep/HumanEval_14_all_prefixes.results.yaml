language: swift
name: HumanEval_14_all_prefixes
results:
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpr_s36im5/tmpr_s36im5.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b785c7b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b785c4adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b785c4ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b785c4ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_s36im5                        0x0000562af1a9fb98 <unavailable> + 7064

    5    libc.so.6                          0x00002b785c9a2460 __libc_start_main +
    245

    6    tmpr_s36im5                        0x0000562af1a9f5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfgfsbcxj.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfgfsbcxj.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpfgfsbcxj.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(string[0..<i+1])\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwhza6rje.swift:8:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        prefixes.append(string[0..<i+1])\n                        ^~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i + 1))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpac9psjon.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i + 1))\n             \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpac9psjon.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i\
    \ + 1))\n               ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfgfsbcxj.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfgfsbcxj.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpfgfsbcxj.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpao82qb9g.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpao82qb9g.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpao82qb9g.swift:8:65:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfgfsbcxj.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfgfsbcxj.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpfgfsbcxj.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0...string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpbypgkmpm/tmpbypgkmpm.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0280ff6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0280cedb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0280ced988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0280cec7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbypgkmpm                        0x000055c6e1fa986e <unavailable> + 6254

    5    libc.so.6                          0x00002b02811e2460 __libc_start_main +
    245

    6    tmpbypgkmpm                        0x000055c6e1fa94b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpbzp50_p1.swift:8:29: error: subscript 'subscript(_:)' requires\
    \ the types 'String.Index' and 'Int' be equivalent\n        result.append(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)])\n                            ^\nSwift.String:5:12: note: where\
    \ 'R.Bound' = 'String.Index'\n    public subscript<R>(bounds: R) -> String where\
    \ R : RangeExpression, R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfgfsbcxj.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfgfsbcxj.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpfgfsbcxj.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3ympchp3.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3ympchp3.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp3ympchp3.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp0_b6s380/tmp0_b6s380.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b938a62ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b938a325b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b938a325988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b938a3247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_b6s380                        0x00005651e464ab48 <unavailable> + 6984

    5    libc.so.6                          0x00002b938a81a460 __libc_start_main +
    245

    6    tmp0_b6s380                        0x00005651e464a5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3ympchp3.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3ympchp3.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp3ympchp3.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(string[0..<i+1])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmppssirnmf.swift:8:23: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        result.append(string[0..<i+1])\n                      ^~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string[0..<i])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp752whl6k.swift:8:23: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        result.append(string[0..<i])\n                      ^~~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0...string.characters.count\
    \ {\n        prefixes.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpt9db0wxn.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0...string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpt9db0wxn.swift:8:32: error: value of type 'String' has no member\
    \ 'substring'\n        prefixes.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i)))\n                        ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string[0..<i+1])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6yvg9x8y.swift:8:23: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        result.append(string[0..<i+1])\n                      ^~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 1...string.count\
    \ {\n        prefixes.append(string.prefix(i))\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp7rybx0lj.swift:8:18: error: no exact matches in call to instance\
    \ method 'append'\n        prefixes.append(string.prefix(i))\n               \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmp7rybx0lj.swift:8:18: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        prefixes.append(string.prefix(i))\n\
    \                 ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzlroudvd.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzlroudvd.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzlroudvd.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpuqtr2r3q/tmpuqtr2r3q.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1a7251c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1a6f48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1a6f48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1a6f477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuqtr2r3q                        0x00005602d0fcab48 <unavailable> + 6984

    5    libc.so.6                          0x00002ae1a743d460 __libc_start_main +
    245

    6    tmpuqtr2r3q                        0x00005602d0fca5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    let length = string.characters.count\n    var result\
    \ = [String]()\n    for i in 0..<length {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp53ey2esu.swift:6:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    let length = string.characters.count\n            \
    \            ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp53ey2esu.swift:9:30: error: value of type 'String' has no member 'substringToIndex'\n\
    \        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp53ey2esu.swift:9:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpuqtr2r3q/tmpuqtr2r3q.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1a7251c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1a6f48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1a6f48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1a6f477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuqtr2r3q                        0x00005602d0fcab48 <unavailable> + 6984

    5    libc.so.6                          0x00002ae1a743d460 __libc_start_main +
    245

    6    tmpuqtr2r3q                        0x00005602d0fca5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0...string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp78ys5x00.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0...string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp78ys5x00.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp78ys5x00.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfgfsbcxj.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfgfsbcxj.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpfgfsbcxj.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpuqtr2r3q/tmpuqtr2r3q.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1a7251c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1a6f48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1a6f48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1a6f477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuqtr2r3q                        0x00005602d0fcab48 <unavailable> + 6984

    5    libc.so.6                          0x00002ae1a743d460 __libc_start_main +
    245

    6    tmpuqtr2r3q                        0x00005602d0fca5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzlroudvd.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzlroudvd.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzlroudvd.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(string[0..<i+1])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmppssirnmf.swift:8:23: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        result.append(string[0..<i+1])\n                      ^~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzlroudvd.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzlroudvd.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzlroudvd.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 1...string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b777a431c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b777a128561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b777a128286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b777a12813c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b777a127bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp5f01rfo1                        0x000055ef34f36e45 <unavailable> + 7749

    6    tmp5f01rfo1                        0x000055ef34f368a5 <unavailable> + 6309

    7    libc.so.6                          0x00002b777a61d460 __libc_start_main +
    245

    8    tmp5f01rfo1                        0x000055ef34f365a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3ympchp3.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3ympchp3.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp3ympchp3.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfgfsbcxj.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfgfsbcxj.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpfgfsbcxj.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(string[0..<i+1])\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwhza6rje.swift:8:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        prefixes.append(string[0..<i+1])\n                        ^~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfgfsbcxj.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfgfsbcxj.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpfgfsbcxj.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3ympchp3.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3ympchp3.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp3ympchp3.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzlroudvd.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzlroudvd.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzlroudvd.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(string[0..<i+1])\n    }\n    return prefixes\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwhza6rje.swift:8:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        prefixes.append(string[0..<i+1])\n                        ^~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpr_s36im5/tmpr_s36im5.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b785c7b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b785c4adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b785c4ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b785c4ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_s36im5                        0x0000562af1a9fb98 <unavailable> + 7064

    5    libc.so.6                          0x00002b785c9a2460 __libc_start_main +
    245

    6    tmpr_s36im5                        0x0000562af1a9f5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string[0..<i+1])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6yvg9x8y.swift:8:23: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        result.append(string[0..<i+1])\n                      ^~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmptm2dkdke/tmptm2dkdke.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb723fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb720f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb720f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb720f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptm2dkdke                        0x0000562478c4ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002abb725ea460 __libc_start_main +
    245

    6    tmptm2dkdke                        0x0000562478c4a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzlroudvd.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzlroudvd.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzlroudvd.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(string[0..<i+1])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmppssirnmf.swift:8:23: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        result.append(string[0..<i+1])\n                      ^~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for index in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ index)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpkve28_ka/tmpkve28_ka.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ada7db9bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ada7d892b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ada7d892988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ada7d8917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkve28_ka                        0x000055c68bf79b48 <unavailable> + 6984

    5    libc.so.6                          0x00002ada7dd87460 __libc_start_main +
    245

    6    tmpkve28_ka                        0x000055c68bf795a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpao82qb9g.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpao82qb9g.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpao82qb9g.swift:8:65:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmptm2dkdke/tmptm2dkdke.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb723fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb720f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb720f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb720f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptm2dkdke                        0x0000562478c4ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002abb725ea460 __libc_start_main +
    245

    6    tmptm2dkdke                        0x0000562478c4a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3ympchp3.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3ympchp3.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp3ympchp3.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmptm2dkdke/tmptm2dkdke.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb723fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb720f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb720f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb720f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptm2dkdke                        0x0000562478c4ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002abb725ea460 __libc_start_main +
    245

    6    tmptm2dkdke                        0x0000562478c4a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpuqtr2r3q/tmpuqtr2r3q.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1a7251c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1a6f48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1a6f48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1a6f477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuqtr2r3q                        0x00005602d0fcab48 <unavailable> + 6984

    5    libc.so.6                          0x00002ae1a743d460 __libc_start_main +
    245

    6    tmpuqtr2r3q                        0x00005602d0fca5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 1...string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b1fd611ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1fd5e11561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b1fd5e11286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b1fd5e1113c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b1fd5e10bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp9im1frcc                        0x00005602dab3be8a <unavailable> + 7818

    6    tmp9im1frcc                        0x00005602dab3b8f5 <unavailable> + 6389

    7    libc.so.6                          0x00002b1fd6306460 __libc_start_main +
    245

    8    tmp9im1frcc                        0x00005602dab3b5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp0_b6s380/tmp0_b6s380.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b938a62ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b938a325b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b938a325988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b938a3247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_b6s380                        0x00005651e464ab48 <unavailable> + 6984

    5    libc.so.6                          0x00002b938a81a460 __libc_start_main +
    245

    6    tmp0_b6s380                        0x00005651e464a5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 1...string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp1bu5j8f_.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 1...string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp1bu5j8f_.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp1bu5j8f_.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 1...string.count\
    \ {\n        result.append(string.prefix(i))\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp8yquzsiw.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i))\n               ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmp8yquzsiw.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i))\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpao82qb9g.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpao82qb9g.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpao82qb9g.swift:8:65:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzlroudvd.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzlroudvd.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzlroudvd.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i+1))\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9jh2gtrl.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i+1))\n               ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmp9jh2gtrl.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i+1))\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i + 1))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpac9psjon.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i + 1))\n             \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpac9psjon.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i\
    \ + 1))\n               ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpao82qb9g.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpao82qb9g.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpao82qb9g.swift:8:65:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzttmqor8.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzttmqor8.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzttmqor8.swift:8:65:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzlroudvd.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzlroudvd.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzlroudvd.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzttmqor8.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzttmqor8.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzttmqor8.swift:8:65:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(string[0..<i])\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpy0mmnvdj.swift:8:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        prefixes.append(string[0..<i])\n                        ^~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 1...string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpercgpeh6.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 1...string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpercgpeh6.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpercgpeh6.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpr_s36im5/tmpr_s36im5.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b785c7b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b785c4adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b785c4ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b785c4ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_s36im5                        0x0000562af1a9fb98 <unavailable> + 7064

    5    libc.so.6                          0x00002b785c9a2460 __libc_start_main +
    245

    6    tmpr_s36im5                        0x0000562af1a9f5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpao82qb9g.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpao82qb9g.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpao82qb9g.swift:8:65:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0...string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp0peya86h/tmp0peya86h.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca59f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca56e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca56e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca56e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0peya86h                        0x000056003640395e <unavailable> + 6494

    5    libc.so.6                          0x00002b3ca5bdc460 __libc_start_main +
    245

    6    tmp0peya86h                        0x00005600364035a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)])\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpmjj2qkub.swift:8:29: error: subscript 'subscript(_:)' requires\
    \ the types 'String.Index' and 'Int' be equivalent\n        result.append(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)])\n                            ^\nSwift.String:5:12: note: where\
    \ 'R.Bound' = 'String.Index'\n    public subscript<R>(bounds: R) -> String where\
    \ R : RangeExpression, R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpao82qb9g.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpao82qb9g.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpao82qb9g.swift:8:65:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpuqtr2r3q/tmpuqtr2r3q.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1a7251c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1a6f48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1a6f48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1a6f477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuqtr2r3q                        0x00005602d0fcab48 <unavailable> + 6984

    5    libc.so.6                          0x00002ae1a743d460 __libc_start_main +
    245

    6    tmpuqtr2r3q                        0x00005602d0fca5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmptm2dkdke/tmptm2dkdke.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb723fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb720f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb720f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb720f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptm2dkdke                        0x0000562478c4ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002abb725ea460 __libc_start_main +
    245

    6    tmptm2dkdke                        0x0000562478c4a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzlroudvd.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzlroudvd.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzlroudvd.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string[0..<i+1])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp6yvg9x8y.swift:8:23: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        result.append(string[0..<i+1])\n                      ^~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i + 1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmppz9zrf7k.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmppz9zrf7k.swift:8:30: error: value of type 'String' has no member\
    \ 'substring'\n        result.append(string.substring(to: string.index(string.startIndex,\
    \ offsetBy: i + 1)))\n                      ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzlroudvd.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzlroudvd.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzlroudvd.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpao82qb9g.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpao82qb9g.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpao82qb9g.swift:8:65:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzlroudvd.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzlroudvd.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzlroudvd.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    let chars = Array(string)\n\
    \    for i in 0..<chars.count {\n        prefixes.append(String(chars[0...i]))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3ympchp3.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3ympchp3.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp3ympchp3.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3ympchp3.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3ympchp3.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp3ympchp3.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_tr3y942.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_tr3y942.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp_tr3y942.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfgfsbcxj.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfgfsbcxj.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpfgfsbcxj.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmptm2dkdke/tmptm2dkdke.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb723fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb720f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb720f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb720f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptm2dkdke                        0x0000562478c4ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002abb725ea460 __libc_start_main +
    245

    6    tmptm2dkdke                        0x0000562478c4a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp0_b6s380/tmp0_b6s380.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b938a62ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b938a325b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b938a325988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b938a3247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_b6s380                        0x00005651e464ab48 <unavailable> + 6984

    5    libc.so.6                          0x00002b938a81a460 __libc_start_main +
    245

    6    tmp0_b6s380                        0x00005651e464a5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpao82qb9g.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpao82qb9g.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpao82qb9g.swift:8:65:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp_tr3y942.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp_tr3y942.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp_tr3y942.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0...string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpe1_uq3wz/tmpe1_uq3wz.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5128767c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b512845eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b512845e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b512845d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe1_uq3wz                        0x0000562e3ee979ae <unavailable> + 6574

    5    libc.so.6                          0x00002b5128953460 __libc_start_main +
    245

    6    tmpe1_uq3wz                        0x0000562e3ee975f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzlroudvd.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzlroudvd.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzlroudvd.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i+1))\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp9jh2gtrl.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i+1))\n               ^\n\
    Swift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmp9jh2gtrl.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i+1))\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i + 1))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpac9psjon.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i + 1))\n             \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpac9psjon.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i\
    \ + 1))\n               ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(string[0..<i])\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpwwwjj0n8.swift:8:23: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        result.append(string[0..<i])\n                      ^~~~~~~~~~~~~\nSwift.String:5:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript<R>(bounds: R) -> String where R : RangeExpression, R.Bound == Int\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(string[0..<i])\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv7zc37dv.swift:8:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        prefixes.append(string[0..<i])\n                        ^~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i + 1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 1...string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b7a92442c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7a92139561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b7a92139286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b7a9213913c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b7a92138bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmpltlet0ws                        0x00005612450bde45 <unavailable> + 7749

    6    tmpltlet0ws                        0x00005612450bd8a5 <unavailable> + 6309

    7    libc.so.6                          0x00002b7a9262e460 __libc_start_main +
    245

    8    tmpltlet0ws                        0x00005612450bd5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3ympchp3.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3ympchp3.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp3ympchp3.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpuqtr2r3q/tmpuqtr2r3q.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae1a7251c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae1a6f48b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae1a6f48988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae1a6f477b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuqtr2r3q                        0x00005602d0fcab48 <unavailable> + 6984

    5    libc.so.6                          0x00002ae1a743d460 __libc_start_main +
    245

    6    tmpuqtr2r3q                        0x00005602d0fca5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpr_s36im5/tmpr_s36im5.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b785c7b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b785c4adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b785c4ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b785c4ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_s36im5                        0x0000562af1a9fb98 <unavailable> + 7064

    5    libc.so.6                          0x00002b785c9a2460 __libc_start_main +
    245

    6    tmpr_s36im5                        0x0000562af1a9f5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i + 1))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpac9psjon.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i + 1))\n             \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpac9psjon.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i\
    \ + 1))\n               ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp0_b6s380/tmp0_b6s380.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b938a62ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b938a325b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b938a325988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b938a3247b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_b6s380                        0x00005651e464ab48 <unavailable> + 6984

    5    libc.so.6                          0x00002b938a81a460 __libc_start_main +
    245

    6    tmp0_b6s380                        0x00005651e464a5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmptm2dkdke/tmptm2dkdke.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb723fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb720f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb720f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb720f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptm2dkdke                        0x0000562478c4ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002abb725ea460 __libc_start_main +
    245

    6    tmptm2dkdke                        0x0000562478c4a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(string.prefix(i + 1))\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpac9psjon.swift:8:16: error: no exact matches in call to instance\
    \ method 'append'\n        result.append(string.prefix(i + 1))\n             \
    \  ^\nSwift.Array:6:37: note: candidate expects value of type 'String' for parameter\
    \ #1 (got 'PrefixSequence<String>')\n    @inlinable public mutating func append(_\
    \ newElement: __owned Element)\n                                    ^\nSwift.RangeReplaceableCollection:4:37:\
    \ note: candidate expects value of type 'String' for parameter #1 (got 'PrefixSequence<String>')\n\
    \    @inlinable public mutating func append(_ newElement: __owned Self.Element)\n\
    \                                    ^\n/tmp/tmpac9psjon.swift:8:16: note: found\
    \ candidate with type '(__owned PrefixSequence<String>) -> ()'\n        result.append(string.prefix(i\
    \ + 1))\n               ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzlroudvd.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzlroudvd.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzlroudvd.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfgfsbcxj.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfgfsbcxj.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpfgfsbcxj.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(string[0..<i+1])\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmppssirnmf.swift:8:23: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        result.append(string[0..<i+1])\n                      ^~~~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpzlroudvd.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpzlroudvd.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpzlroudvd.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(string[0..<i])\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv7zc37dv.swift:8:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        prefixes.append(string[0..<i])\n                        ^~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0...string.characters.count\
    \ {\n        let index = string.index(string.startIndex, offsetBy: i)\n      \
    \  prefixes.append(string.substring(to: index))\n    }\n    return prefixes\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpfdvtq81l.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0...string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpfdvtq81l.swift:9:32: error: value of type 'String' has no member\
    \ 'substring'\n        prefixes.append(string.substring(to: index))\n        \
    \                ~~~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(string[0..<i])\n    }\n    return prefixes\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(all_prefixes(string: \"\") == [] as [String])\n\
    assert(all_prefixes(string: \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\",\
    \ \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string: \"WWW\") == [\"W\", \"\
    WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpv7zc37dv.swift:8:25: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an integer range, use a String.Index range instead.\n\
    \        prefixes.append(string[0..<i])\n                        ^~~~~~~~~~~~~\n\
    Swift.String:5:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript<R>(bounds: R) -> String where R : RangeExpression,\
    \ R.Bound == Int { get }\n           ^\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp3ympchp3.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp3ympchp3.swift:8:32: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                        ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp3ympchp3.swift:8:67:\
    \ error: value of type 'String.Index' has no member 'advancedBy'\n        prefixes.append(string.substringToIndex(string.startIndex.advancedBy(i\
    \ + 1)))\n                                                ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0...string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmp0peya86h/tmp0peya86h.swift:26: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3ca59f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3ca56e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3ca56e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3ca56e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0peya86h                        0x000056003640395e <unavailable> + 6494

    5    libc.so.6                          0x00002b3ca5bdc460 __libc_start_main +
    245

    6    tmp0peya86h                        0x00005600364035a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result: [String] = []\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmp2dcuxbto.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp2dcuxbto.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmp2dcuxbto.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: 1
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.characters.count\
    \ {\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: SyntaxError
  stderr: "/tmp/tmpkui3hrwz.swift:7:25: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in 0..<string.characters.count {\n          \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpkui3hrwz.swift:8:30: error: value of type 'String' has no member\
    \ 'substringToIndex'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                      ~~~~~~ ^~~~~~~~~~~~~~~~\n/tmp/tmpkui3hrwz.swift:8:65: error:\
    \ value of type 'String.Index' has no member 'advancedBy'\n        result.append(string.substringToIndex(string.startIndex.advancedBy(i+1)))\n\
    \                                              ~~~~~~~~~~~~~~~~~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes = [String]()\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[..<string.index(string.startIndex,\
    \ offsetBy: i)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmpr_s36im5/tmpr_s36im5.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b785c7b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b785c4adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b785c4ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b785c4ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr_s36im5                        0x0000562af1a9fb98 <unavailable> + 7064

    5    libc.so.6                          0x00002b785c9a2460 __libc_start_main +
    245

    6    tmpr_s36im5                        0x0000562af1a9f5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
- exit_code: -4
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var result = [String]()\n    for i in 0..<string.count\
    \ {\n        result.append(String(string[..<string.index(string.startIndex, offsetBy:\
    \ i)]))\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(all_prefixes(string:\
    \ \"\") == [] as [String])\nassert(all_prefixes(string: \"asdfgh\") == [\"a\"\
    , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\nassert(all_prefixes(string:\
    \ \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: Exception
  stderr: 'tmptm2dkdke/tmptm2dkdke.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abb723fec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abb720f5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abb720f5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abb720f47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptm2dkdke                        0x0000562478c4ab98 <unavailable> + 7064

    5    libc.so.6                          0x00002abb725ea460 __libc_start_main +
    245

    6    tmptm2dkdke                        0x0000562478c4a5f9 <unavailable> + 5625

    '
  stdout: ''
  timestamp: 1660014044
- exit_code: 0
  program: "\n/// Return list of all prefixes from shortest to longest of the input\
    \ string\n/// >>> all_prefixes('abc')\n/// ['a', 'ab', 'abc']\nfunc all_prefixes(string:\
    \ String) -> [String] {\n    var prefixes: [String] = []\n    for i in 0..<string.count\
    \ {\n        prefixes.append(String(string[string.startIndex..<string.index(string.startIndex,\
    \ offsetBy: i+1)]))\n    }\n    return prefixes\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(all_prefixes(string: \"\") == [] as [String])\nassert(all_prefixes(string:\
    \ \"asdfgh\") == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\
    assert(all_prefixes(string: \"WWW\") == [\"W\", \"WW\", \"WWW\"])"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660014044
