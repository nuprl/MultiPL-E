language: swift
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let abs_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(abs_deviations)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmplajwptw0.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmplajwptw0.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let diffs = numbers.map { abs($0\
    \ - mean) }\n    return mean(diffs)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp51yvt78l.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp51yvt78l.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let diffs = numbers.map { abs($0\
    \ - mean) }\n    return average(diffs)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9l8qp2xq.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp9l8qp2xq.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(diffs)\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp79nc6w5y.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp79nc6w5y.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let abs_diff = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(abs_diff)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpjtia48fm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpjtia48fm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(abs_diff)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5xmcpio3.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp5xmcpio3.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let diffs = numbers.map { abs($0\
    \ - mean) }\n    return mean(diffs)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp51yvt78l.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmp51yvt78l.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    var sum = 0.0\n    for\
    \ number in numbers {\n        sum += abs(number - mean)\n    }\n    return sum\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpm3as3du7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let diffs = numbers.map { abs($0\
    \ - mean) }\n    return average(diffs)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9l8qp2xq.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp9l8qp2xq.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(diffs)\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    var sum = 0.0\n    for\
    \ number in numbers {\n        sum += abs(number - mean)\n    }\n    return sum\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpm3as3du7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_list(numbers)\n    var sum_of_abs_differences\
    \ = 0.0\n    for number in numbers {\n        sum_of_abs_differences += abs(number\
    \ - mean)\n    }\n    return sum_of_abs_differences / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpf07cwmke.swift:10:16: error: cannot find 'mean_of_list' in scope\n\
    \    let mean = mean_of_list(numbers)\n               ^~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \    return numbers.map { abs($0 - mean) }.reduce(0, combine: +) / Double(numbers.count)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp2dm7yezd.swift:10:30: error: extraneous argument label 'combine:'\
    \ in call\n    let mean = numbers.reduce(0, combine: +) / Double(numbers.count)\n\
    \                             ^   ~~~~~~~~~\n                                \
    \ \n/tmp/tmp2dm7yezd.swift:11:49: error: extraneous argument label 'combine:'\
    \ in call\n    return numbers.map { abs($0 - mean) }.reduce(0, combine: +) / Double(numbers.count)\n\
    \                                                ^   ~~~~~~~~~\n             \
    \                                       \n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5xmcpio3.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp5xmcpio3.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let diffs = numbers.map { abs($0\
    \ - mean) }\n    return average(diffs)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9l8qp2xq.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp9l8qp2xq.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(diffs)\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp79nc6w5y.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp79nc6w5y.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let abs_differences =\
    \ numbers.map { abs($0 - mean) }\n    return mean_of_numbers(abs_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp87bkkr_0.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp87bkkr_0.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(abs_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5xmcpio3.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp5xmcpio3.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map({ abs($0 - mean) })\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp58fo5syi.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp58fo5syi.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    var sum = 0.0\n    for\
    \ number in numbers {\n        sum += abs(number - mean)\n    }\n    return sum\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpm3as3du7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let abs_differences =\
    \ numbers.map { abs($0 - mean) }\n    return mean_of_numbers(abs_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp87bkkr_0.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp87bkkr_0.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(abs_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5xmcpio3.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp5xmcpio3.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp79nc6w5y.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp79nc6w5y.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    var sum = 0.0\n    for\
    \ number in numbers {\n        sum += abs(number - mean)\n    }\n    return sum\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpm3as3du7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    var absolute_differences\
    \ = [Double]()\n    for number in numbers {\n        absolute_differences.append(abs(number\
    \ - mean))\n    }\n    return mean_of_numbers(absolute_differences)\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp1qsyzvb8.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp1qsyzvb8.swift:15:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let abs_diffs = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(abs_diffs)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpscfmecab.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpscfmecab.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(abs_diffs)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let diffs = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(diffs)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpb7e91g1n.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpb7e91g1n.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(diffs)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let diffs = numbers.map { abs($0\
    \ - mean) }\n    return average(diffs)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9l8qp2xq.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp9l8qp2xq.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(diffs)\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp79nc6w5y.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp79nc6w5y.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    var sum = 0.0\n    for\
    \ number in numbers {\n        sum += abs(number - mean)\n    }\n    return sum\
    \ / Double(numbers.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0,\
    \ 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0,\
    \ 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpm3as3du7.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_differences\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_differences)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp5xmcpio3.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmp5xmcpio3.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_differences)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp4_7cpjsh.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp4_7cpjsh.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(absolute_deviations)\n\
    \           ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return average(deviations)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp79nc6w5y.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp79nc6w5y.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(deviations)\n    \
    \       ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let diffs = numbers.map { abs($0\
    \ - mean) }\n    return average(diffs)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9l8qp2xq.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp9l8qp2xq.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(diffs)\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let absolute_deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean(absolute_deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpq3amycay.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmpq3amycay.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean(numbers)\n    let abs_differences = numbers.map\
    \ { abs($0 - mean) }\n    return mean(abs_differences)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmprwcnescb.swift:10:16: error: use of local variable 'mean' before\
    \ its declaration\n    let mean = mean(numbers)\n               ^\n/tmp/tmprwcnescb.swift:10:9:\
    \ note: 'mean' declared here\n    let mean = mean(numbers)\n        ^\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let absolute_deviations\
    \ = numbers.map { abs($0 - mean) }\n    return mean_of_numbers(absolute_deviations)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) ==\
    \ 0.5)\nassert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpajitj7tm.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpajitj7tm.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(absolute_deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = average(numbers)\n    let diffs = numbers.map { abs($0\
    \ - mean) }\n    return average(diffs)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers: [1.0,\
    \ 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmp9l8qp2xq.swift:10:16: error: cannot find 'average' in scope\n \
    \   let mean = average(numbers)\n               ^~~~~~~\n/tmp/tmp9l8qp2xq.swift:12:12:\
    \ error: cannot find 'average' in scope\n    return average(diffs)\n         \
    \  ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
- exit_code: 1
  program: "\n/// For a given list of input numbers, calculate Mean Absolute Deviation\n\
    /// around the mean of this dataset.\n/// Mean Absolute Deviation is the average\
    \ absolute difference between each\n/// element and a centerpoint (mean in this\
    \ case):\n/// MAD = average | x - x_mean |\n/// >>> mean_absolute_deviation([1.0,\
    \ 2.0, 3.0, 4.0])\n/// 1.0\nfunc mean_absolute_deviation(numbers: [Double]) ->\
    \ Double {\n    let mean = mean_of_numbers(numbers)\n    let deviations = numbers.map\
    \ { abs($0 - mean) }\n    return mean_of_numbers(deviations)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(mean_absolute_deviation(numbers: [1.0, 2.0]) == 0.5)\n\
    assert(mean_absolute_deviation(numbers: [1.0, 2.0, 3.0, 4.0]) == 1.0)\nassert(mean_absolute_deviation(numbers:\
    \ [1.0, 2.0, 3.0, 4.0, 5.0]) == 1.2)"
  status: SyntaxError
  stderr: "/tmp/tmpaswdyz9c.swift:10:16: error: cannot find 'mean_of_numbers' in scope\n\
    \    let mean = mean_of_numbers(numbers)\n               ^~~~~~~~~~~~~~~\n/tmp/tmpaswdyz9c.swift:12:12:\
    \ error: cannot find 'mean_of_numbers' in scope\n    return mean_of_numbers(deviations)\n\
    \           ^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1659824777
