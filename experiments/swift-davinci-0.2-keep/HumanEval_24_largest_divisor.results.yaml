language: swift
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 0\n    for i in 1...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpmwc5dppp/tmpmwc5dppp.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7607a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7604a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7604a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae76049f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmwc5dppp                        0x000055ff50e78335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae760995460 __libc_start_main +
    245

    6    tmpmwc5dppp                        0x000055ff50e77fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n/2 {\n        if n % i\
    \ == 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002ac024d1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac024a15561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002ac024a15286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002ac024a1513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002ac024a14bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp0c1b5gjg                        0x00005646a11be6c9 <unavailable> + 5833

    6    tmp0c1b5gjg                        0x00005646a11be2c8 <unavailable> + 4808

    7    libc.so.6                          0x00002ac024f0a460 __libc_start_main +
    245

    8    tmp0c1b5gjg                        0x00005646a11bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reverse() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1x0sufbs.swift:6:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n/2 {\n        if n % i\
    \ == 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 0\n    for i in 1...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpmwc5dppp/tmpmwc5dppp.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7607a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7604a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7604a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae76049f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmwc5dppp                        0x000055ff50e78335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae760995460 __libc_start_main +
    245

    6    tmpmwc5dppp                        0x000055ff50e77fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 0\n    for i in 1...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpmwc5dppp/tmpmwc5dppp.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7607a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7604a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7604a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae76049f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmwc5dppp                        0x000055ff50e78335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae760995460 __libc_start_main +
    245

    6    tmpmwc5dppp                        0x000055ff50e77fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 0\n    for i in 1...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpmwc5dppp/tmpmwc5dppp.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7607a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7604a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7604a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae76049f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmwc5dppp                        0x000055ff50e78335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae760995460 __libc_start_main +
    245

    6    tmpmwc5dppp                        0x000055ff50e77fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpwoukbqny/tmpwoukbqny.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b6aac6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b6a7bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b6a7bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b6a7bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwoukbqny                        0x0000555b6f82d1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b8b6acb2460 __libc_start_main +
    245

    6    tmpwoukbqny                        0x0000555b6f82ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largestDivisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largestDivisor = i\n        }\n    }\n    return largestDivisor\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpvz5j2se8/tmpvz5j2se8.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afc40739c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afc40430b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afc40430988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afc4042f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvz5j2se8                        0x0000562d890fd335 <unavailable> + 4917

    5    libc.so.6                          0x00002afc40925460 __libc_start_main +
    245

    6    tmpvz5j2se8                        0x0000562d890fcfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n/2 {\n       \
    \ if n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b2aafb1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2aaf815561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2aaf815286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2aaf81513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2aaf814bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7w9na8v1                        0x000056298ba846c9 <unavailable> + 5833

    6    tmp7w9na8v1                        0x000056298ba842c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b2aafd0a460 __libc_start_main +
    245

    8    tmp7w9na8v1                        0x000056298ba83fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpwoukbqny/tmpwoukbqny.swift:22: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8b6aac6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8b6a7bdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8b6a7bd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b8b6a7bc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwoukbqny                        0x0000555b6f82d1b5 <unavailable> + 4533

    5    libc.so.6                          0x00002b8b6acb2460 __libc_start_main +
    245

    6    tmpwoukbqny                        0x0000555b6f82ce69 <unavailable> + 3689

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reverse() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1x0sufbs.swift:6:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n/2 {\n       \
    \ if n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b2aafb1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2aaf815561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2aaf815286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2aaf81513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2aaf814bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7w9na8v1                        0x000056298ba846c9 <unavailable> + 5833

    6    tmp7w9na8v1                        0x000056298ba842c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b2aafd0a460 __libc_start_main +
    245

    8    tmp7w9na8v1                        0x000056298ba83fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpeyf18nb2/tmpeyf18nb2.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba5e145cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba5e1153b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba5e1153988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba5e11527b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeyf18nb2                        0x000056138103a335 <unavailable> + 4917

    5    libc.so.6                          0x00002ba5e1648460 __libc_start_main +
    245

    6    tmpeyf18nb2                        0x0000561381039fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n-1 {\n       \
    \ if n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reverse() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1x0sufbs.swift:6:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reverse() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1x0sufbs.swift:6:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n/2 {\n       \
    \ if n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b2aafb1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2aaf815561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2aaf815286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2aaf81513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2aaf814bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7w9na8v1                        0x000056298ba846c9 <unavailable> + 5833

    6    tmp7w9na8v1                        0x000056298ba842c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b2aafd0a460 __libc_start_main +
    245

    8    tmp7w9na8v1                        0x000056298ba83fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var i = n - 1\n    while i > 0 {\n        if n % i == 0 {\n\
    \            return i\n        }\n        i -= 1\n    }\n    return 1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n/2 {\n       \
    \ if n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b2aafb1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2aaf815561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2aaf815286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2aaf81513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2aaf814bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7w9na8v1                        0x000056298ba846c9 <unavailable> + 5833

    6    tmp7w9na8v1                        0x000056298ba842c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b2aafd0a460 __libc_start_main +
    245

    8    tmp7w9na8v1                        0x000056298ba83fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reverse() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1x0sufbs.swift:6:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reverse() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1x0sufbs.swift:6:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n/2 {\n       \
    \ if n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'Swift/ClosedRange.swift:347: Fatal error: Range requires lowerBound <=
    upperBound

    Current stack trace:

    0    libswiftCore.so                    0x00002b2aafb1ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2aaf815561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b2aaf815286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b2aaf81513c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b2aaf814bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    tmp7w9na8v1                        0x000056298ba846c9 <unavailable> + 5833

    6    tmp7w9na8v1                        0x000056298ba842c8 <unavailable> + 4808

    7    libc.so.6                          0x00002b2aafd0a460 __libc_start_main +
    245

    8    tmp7w9na8v1                        0x000056298ba83fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 0\n    for i in 1...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpmwc5dppp/tmpmwc5dppp.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7607a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7604a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7604a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae76049f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmwc5dppp                        0x000055ff50e78335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae760995460 __libc_start_main +
    245

    6    tmpmwc5dppp                        0x000055ff50e77fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var i = n - 1\n    while i > 0 {\n        if n % i == 0 {\n\
    \            return i\n        }\n        i -= 1\n    }\n    return 0\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 0\n    for i in 1...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpmwc5dppp/tmpmwc5dppp.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae7607a9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae7604a0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae7604a0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae76049f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmwc5dppp                        0x000055ff50e78335 <unavailable> + 4917

    5    libc.so.6                          0x00002ae760995460 __libc_start_main +
    245

    6    tmpmwc5dppp                        0x000055ff50e77fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2...n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: Exception
  stderr: 'tmpe2b_bjab/tmpe2b_bjab.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cee835c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cee52cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cee52c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cee52b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe2b_bjab                        0x000055c468367335 <unavailable> + 4917

    5    libc.so.6                          0x00002b9ceea21460 __libc_start_main +
    245

    6    tmpe2b_bjab                        0x000055c468366fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var i = n - 1\n    while i > 0 {\n        if n % i == 0 {\n\
    \            return i\n        }\n        i -= 1\n    }\n    return 1\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmph345uwf0/tmph345uwf0.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab4536a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab453399b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab453399988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab4533987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph345uwf0                        0x0000558615ea3335 <unavailable> + 4917

    5    libc.so.6                          0x00002ab45388e460 __libc_start_main +
    245

    6    tmph345uwf0                        0x0000558615ea2fe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: -4
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1...n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: Exception
  stderr: 'tmpctk5m5en/tmpctk5m5en.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b30c6df2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b30c6ae9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b30c6ae9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b30c6ae87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpctk5m5en                        0x00005573218be335 <unavailable> + 4917

    5    libc.so.6                          0x00002b30c6fde460 __libc_start_main +
    245

    6    tmpctk5m5en                        0x00005573218bdfe9 <unavailable> + 4073

    '
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var divisor = n - 1\n    while n % divisor != 0 {\n     \
    \   divisor -= 1\n    }\n    return divisor\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7) == 1)\n\
    assert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n:\
    \ 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = 1\n    for i in 2..<n {\n        if\
    \ n % i == 0 {\n            largest_divisor = i\n        }\n    }\n    return\
    \ largest_divisor\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(largest_divisor(n:\
    \ 3) == 1)\nassert(largest_divisor(n: 7) == 1)\nassert(largest_divisor(n: 10)\
    \ == 5)\nassert(largest_divisor(n: 100) == 50)\nassert(largest_divisor(n: 49)\
    \ == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 1
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    for i in (1...n/2).reverse() {\n        if n % i == 0 {\n\
    \            return i\n        }\n    }\n    return 1\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n: 7)\
    \ == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100) ==\
    \ 50)\nassert(largest_divisor(n: 49) == 7)"
  status: SyntaxError
  stderr: "/tmp/tmp1x0sufbs.swift:6:24: error: value of type 'ClosedRange<Int>' has\
    \ no member 'reverse'\n    for i in (1...n/2).reverse() {\n             ~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 1\n    for i in 2..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest_divisor = n - 1\n    while n % largest_divisor\
    \ != 0 {\n        largest_divisor -= 1\n    }\n    return largest_divisor\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
- exit_code: 0
  program: "\n/// For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n/// >>> largest_divisor(15)\n/// 5\nfunc largest_divisor(n:\
    \ Int) -> Int {\n    var largest = 0\n    for i in 1..<n {\n        if n % i ==\
    \ 0 {\n            largest = i\n        }\n    }\n    return largest\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(largest_divisor(n: 3) == 1)\nassert(largest_divisor(n:\
    \ 7) == 1)\nassert(largest_divisor(n: 10) == 5)\nassert(largest_divisor(n: 100)\
    \ == 50)\nassert(largest_divisor(n: 49) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824385
