language: swift
name: HumanEval_44_change_base
results:
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var res = \"\"\n    while x > 0 {\n        res = String(x\
    \ % base) + res\n        x /= base\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013424
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        let remainder\
    \ = x % base\n        result = String(remainder) + result\n        x /= base\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(change_base(x:\
    \ 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3) == \"100\")\nassert(change_base(x:\
    \ 234, base: 2) == \"11101010\")\nassert(change_base(x: 16, base: 2) == \"10000\"\
    )\nassert(change_base(x: 8, base: 2) == \"1000\")\nassert(change_base(x: 7, base:\
    \ 2) == \"111\")\nassert(change_base(x: 2, base: 3) == \"2\")\nassert(change_base(x:\
    \ 3, base: 4) == \"3\")\nassert(change_base(x: 4, base: 5) == \"4\")\nassert(change_base(x:\
    \ 5, base: 6) == \"5\")\nassert(change_base(x: 6, base: 7) == \"6\")\nassert(change_base(x:\
    \ 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013424
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ \"\\(x % base)\" + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013424
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var res = \"\"\n    while x > 0 {\n        res = String(x\
    \ % base) + res\n        x /= base\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013424
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var res = \"\"\n    while x > 0 {\n        res = String(x\
    \ % base) + res\n        x /= base\n    }\n    return res\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013424
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    return String(x, radix: base)\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x: 9, base: 3)\
    \ == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\")\nassert(change_base(x:\
    \ 16, base: 2) == \"10000\")\nassert(change_base(x: 8, base: 2) == \"1000\")\n\
    assert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x: 2, base:\
    \ 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var result = \"\"\n    var x = x\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
- exit_code: 0
  program: "\n/// Change numerical base of input number x to base.\n/// return string\
    \ representation after the conversion.\n/// base numbers are less than 10.\n///\
    \ >>> change_base(8, 3)\n/// '22'\n/// >>> change_base(8, 2)\n/// '1000'\n///\
    \ >>> change_base(7, 2)\n/// '111'\nfunc change_base(x: Int, base: Int) -> String\
    \ {\n    var x = x\n    var result = \"\"\n    while x > 0 {\n        result =\
    \ String(x % base) + result\n        x /= base\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(change_base(x: 8, base: 3) == \"22\")\nassert(change_base(x:\
    \ 9, base: 3) == \"100\")\nassert(change_base(x: 234, base: 2) == \"11101010\"\
    )\nassert(change_base(x: 16, base: 2) == \"10000\")\nassert(change_base(x: 8,\
    \ base: 2) == \"1000\")\nassert(change_base(x: 7, base: 2) == \"111\")\nassert(change_base(x:\
    \ 2, base: 3) == \"2\")\nassert(change_base(x: 3, base: 4) == \"3\")\nassert(change_base(x:\
    \ 4, base: 5) == \"4\")\nassert(change_base(x: 5, base: 6) == \"5\")\nassert(change_base(x:\
    \ 6, base: 7) == \"6\")\nassert(change_base(x: 7, base: 8) == \"7\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013423
