language: swift
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = 0\n    for (index, char)\
    \ in word.characters.enumerated() {\n        if consonants.contains(char) {\n\
    \            for (i, vowel) in vowels.characters.enumerated() {\n            \
    \    if word.characters.contains(vowel) {\n                    if word.characters.index(of:\
    \ vowel)! > word.characters.index(of: char)! {\n                        if closestDistance\
    \ == 0 {\n                            closestDistance = word.characters.index(of:\
    \ vowel)! - word.characters.index(of: char)!\n                            closestVowel\
    \ = String(vowel)\n                        } else if word.characters.index(of:\
    \ vowel)! - word.characters.index(of: char)! < closestDistance {\n           \
    \                 closestDistance = word.characters.index(of: vowel)! - word.characters.index(of:\
    \ char)!\n                            closestVowel = String(vowel)\n         \
    \               }\n                    }\n                }\n            }\n \
    \       }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6zcdwdav.swift:17:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6zcdwdav.swift:19:38: error: 'characters' is unavailable:\
    \ Please use String directly\n            for (i, vowel) in vowels.characters.enumerated()\
    \ {\n                                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmp6zcdwdav.swift:20:25: error: 'characters'\
    \ is unavailable: Please use String directly\n                if word.characters.contains(vowel)\
    \ {\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp6zcdwdav.swift:21:29: error: 'characters' is unavailable:\
    \ Please use String directly\n                    if word.characters.index(of:\
    \ vowel)! > word.characters.index(of: char)! {\n                            ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp6zcdwdav.swift:21:40:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \            if word.characters.index(of: vowel)! > word.characters.index(of:\
    \ char)! {\n                                       ^\n/tmp/tmp6zcdwdav.swift:21:40:\
    \ note: use 'firstIndex(of:)' instead\n                    if word.characters.index(of:\
    \ vowel)! > word.characters.index(of: char)! {\n                             \
    \          ^~~~~\n                                       firstIndex\n/tmp/tmp6zcdwdav.swift:21:65:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \         if word.characters.index(of: vowel)! > word.characters.index(of: char)!\
    \ {\n                                                              "
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var prev = \"\"\n    for char in word.reversed() {\n        if vowels.contains(char)\
    \ {\n            if prev != \"\" && !vowels.contains(prev) {\n               \
    \ result = String(char)\n                break\n            }\n        }\n   \
    \     prev = String(char)\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_q42ygkv/tmp_q42ygkv.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3c8b3abc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3c8b0a2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3c8b0a2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3c8b0a17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_q42ygkv                        0x0000561c54251953 <unavailable> + 6483

    5    libc.so.6                          0x00002b3c8b597460 __libc_start_main +
    245

    6    tmp_q42ygkv                        0x0000561c54251389 <unavailable> + 5001

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var wordArray = Array(word)\n    for\
    \ i in 0..<wordArray.count {\n        if vowels.contains(String(wordArray[i]))\
    \ {\n            if i == 0 {\n                continue\n            }\n      \
    \      if i == wordArray.count - 1 {\n                continue\n            }\n\
    \            if consonants.contains(String(wordArray[i-1])) && consonants.contains(String(wordArray[i+1]))\
    \ {\n                result = String(wordArray[i])\n                break\n  \
    \          }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmph93qhsq9/tmph93qhsq9.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b47f8cbfc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b47f89b6b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b47f89b6988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b47f89b57b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmph93qhsq9                        0x000055884c9c6847 <unavailable> + 6215

    5    libc.so.6                          0x00002b47f8eab460 __libc_start_main +
    245

    6    tmph93qhsq9                        0x000055884c9c6489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var vowelIndex = -1\n    var consonantIndex = -1\n\
    \    for (index, char) in word.characters.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            vowelIndex = index\n        }\n        if consonants.contains(String(char))\
    \ {\n            consonantIndex = index\n        }\n        if vowelIndex != -1\
    \ && consonantIndex != -1 && vowelIndex > consonantIndex {\n            result\
    \ = String(char)\n            break\n        }\n    }\n    return result\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_bypspq2.swift:18:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var distance = word.count\n    for i in 0..<word.count {\n        let index\
    \ = word.index(word.startIndex, offsetBy: i)\n        let char = word[index]\n\
    \        if vowels.contains(char) {\n            if i > 0 {\n                let\
    \ index = word.index(word.startIndex, offsetBy: i - 1)\n                let prev\
    \ = word[index]\n                if !vowels.contains(prev) {\n               \
    \     if i < distance {\n                        distance = i\n              \
    \          result = String(char)\n                    }\n                }\n \
    \           }\n            if i < word.count - 1 {\n                let index\
    \ = word.index(word.startIndex, offsetBy: i + 1)\n                let next = word[index]\n\
    \                if !vowels.contains(next) {\n                    if i < distance\
    \ {\n                        distance = i\n                        result = String(char)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp24bp6qp8/tmp24bp6qp8.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b39b4e04c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b39b4afbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b39b4afb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39b4afa7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp24bp6qp8                        0x0000563a642fe757 <unavailable> + 5975

    5    libc.so.6                          0x00002b39b4ff0460 __libc_start_main +
    245

    6    tmp24bp6qp8                        0x0000563a642fe399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = word.count\n    for (index, letter) in word.enumerated()\
    \ {\n        if vowels.contains(letter) {\n            var distance = 0\n    \
    \        for i in index..<word.count {\n                if !vowels.contains(word[i])\
    \ {\n                    distance += 1\n                } else {\n           \
    \         break\n                }\n            }\n            if distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestVowel\
    \ = String(letter)\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpmasf9v5l.swift:20:37: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ !vowels.contains(word[i]) {\n                                    ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n\
    \    var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpevxks2ul/tmpevxks2ul.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a9cb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a99afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9a99af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9a99ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevxks2ul                        0x0000556e8462f7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002ab9a9ea4460 __libc_start_main +
    245

    6    tmpevxks2ul                        0x0000556e8462f219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       let nextIndex = word.index(word.startIndex, offsetBy: index + 1)\n   \
    \         let nextChar = word[nextIndex]\n            if vowels.contains(nextChar)\
    \ {\n                let distance = word.distance(from: word.startIndex, to: nextIndex)\n\
    \                if distance < closestDistance {\n                    closestDistance\
    \ = distance\n                    closestVowel = String(nextChar)\n          \
    \      }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b0feb2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0feaf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0feaf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0feaf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0feaf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b0feb0caec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b0feb083660 String.subscript.getter
    + 34

    7    tmpjn_hwqc7                        0x000056156367f91b <unavailable> + 10523

    8    tmpjn_hwqc7                        0x000056156367e786 <unavailable> + 6022

    9    libc.so.6                          0x00002b0feb48c460 __libc_start_main +
    245

    10   tmpjn_hwqc7                        0x000056156367e489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var\
    \ consonantIndex = 0\n    var vowelFound = false\n    var consonantFound = false\n\
    \    for i in stride(from: word.count - 1, through: 0, by: -1) {\n        let\
    \ char = word[word.index(word.startIndex, offsetBy: i)]\n        if !vowelFound\
    \ {\n            if vowels.contains(String(char)) {\n                vowelFound\
    \ = true\n                vowelIndex = i\n            }\n        }\n        if\
    \ !consonantFound {\n            if consonants.contains(String(char)) {\n    \
    \            consonantFound = true\n                consonantIndex = i\n     \
    \       }\n        }\n        if vowelFound && consonantFound {\n            break\n\
    \        }\n    }\n    if vowelFound && consonantFound {\n        if vowelIndex\
    \ > consonantIndex {\n            closestVowel = String(word[word.index(word.startIndex,\
    \ offsetBy: vowelIndex)])\n        }\n    }\n    return closestVowel\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5am7a48i/tmp5am7a48i.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b128a64ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b128a341b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b128a341988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b128a3407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5am7a48i                        0x000055bf6d3278c7 <unavailable> + 6343

    5    libc.so.6                          0x00002b128a836460 __libc_start_main +
    245

    6    tmp5am7a48i                        0x000055bf6d327509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var result = \"\"\n    var index\
    \ = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if consonants.contains(char) {\n            break\n\
    \        }\n        index -= 1\n    }\n    if index < 0 {\n        return result\n\
    \    }\n    index -= 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpbw_gabq6/tmpbw_gabq6.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af399e95c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af399b8cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af399b8c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af399b8b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbw_gabq6                        0x000055bc0b4977e3 <unavailable> + 6115

    5    libc.so.6                          0x00002af39a081460 __libc_start_main +
    245

    6    tmpbw_gabq6                        0x000055bc0b497219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            let distance = word.count\
    \ - index\n            if distance < closestDistance {\n                closestDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpungx8g2e/tmpungx8g2e.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9c26653c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9c2634ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9c2634a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9c263497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpungx8g2e                        0x00005584fe4c18d3 <unavailable> + 6355

    5    libc.so.6                          0x00002b9c2683f460 __libc_start_main +
    245

    6    tmpungx8g2e                        0x00005584fe4c1309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var closestVowel = \"\"\n  \
    \  var closestVowelIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if consonants.contains(char) {\n            for (i, vowel) in vowels.enumerated()\
    \ {\n                if word.contains(vowel) && word.index(of: vowel)! > word.index(of:\
    \ char)! && word.index(of: vowel)! < closestVowelIndex {\n                   \
    \ closestVowel = String(vowel)\n                    closestVowelIndex = word.index(of:\
    \ vowel)!\n                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6g0xvkex.swift:20:117: error: referencing operator function '<'\
    \ on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \                if word.contains(vowel) && word.index(of: vowel)! > word.index(of:\
    \ char)! && word.index(of: vowel)! < closestVowelIndex {\n                   \
    \                                                                            \
    \                     ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\n\
    extension BinaryInteger {\n          ^\n/tmp/tmp6g0xvkex.swift:22:62: error: cannot\
    \ assign value of type 'String.Index' to type 'Int'\n                    closestVowelIndex\
    \ = word.index(of: vowel)!\n                                        ~~~~~~~~~~~~~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel: Character?\n    var closestDistance = word.count\n   \
    \ for (index, char) in word.enumerated() {\n        if consonants.contains(char)\
    \ {\n            for (vowelIndex, vowel) in vowels.enumerated() {\n          \
    \      if word.contains(vowel) {\n                    let vowelDistance = abs(index\
    \ - word.index(of: vowel)!.encodedOffset)\n                    if vowelDistance\
    \ < closestDistance {\n                        closestDistance = vowelDistance\n\
    \                        closestVowel = vowel\n                    }\n       \
    \         }\n            }\n        }\n    }\n    return closestVowel != nil ?\
    \ String(closestVowel!) : \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpjuhn24wg/tmpjuhn24wg.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad1b2039c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad1b1d30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad1b1d30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad1b1d2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjuhn24wg                        0x000055bf25e0e957 <unavailable> + 6487

    5    libc.so.6                          0x00002ad1b2225460 __libc_start_main +
    245

    6    tmpjuhn24wg                        0x000055bf25e0e599 <unavailable> + 5529

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var closestVowel =\
    \ \"\"\n    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var distance = 0\n      \
    \      for i in index..<word.count {\n                if vowels.contains(word[i])\
    \ {\n                    break\n                }\n                distance +=\
    \ 1\n            }\n            if distance < closestDistance {\n            \
    \    closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp_skz2_ol.swift:20:36: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ vowels.contains(word[i]) {\n                                   ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013387
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var closestVowel = \"\"\n  \
    \  var closestVowelIndex = -1\n    var closestConsonantIndex = -1\n    for (index,\
    \ char) in word.characters.enumerated() {\n        if vowels.contains(char) {\n\
    \            if closestConsonantIndex != -1 {\n                if closestVowelIndex\
    \ == -1 || index - closestConsonantIndex < closestVowelIndex - closestConsonantIndex\
    \ {\n                    closestVowel = String(char)\n                    closestVowelIndex\
    \ = index\n                }\n            }\n        } else if consonants.contains(char)\
    \ {\n            closestConsonantIndex = index\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp847u4837.swift:18:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var vowelIndex = -1\n    var consonantIndex = -1\n    for\
    \ i in 0..<word.count {\n        let index = word.index(word.startIndex, offsetBy:\
    \ i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowelIndex = i\n        }\n        if consonants.contains(char)\
    \ {\n            consonantIndex = i\n        }\n        if vowelIndex != -1 &&\
    \ consonantIndex != -1 && vowelIndex < consonantIndex {\n            return char\n\
    \        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp9w_sired/tmp9w_sired.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b59d71c8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b59d6ebfb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b59d6ebf988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b59d6ebe7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9w_sired                        0x0000564476df4827 <unavailable> + 6183

    5    libc.so.6                          0x00002b59d73b4460 __libc_start_main +
    245

    6    tmp9w_sired                        0x0000564476df4469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if consonants.contains(char) {\n            let nextIndex = word.index(word.startIndex,\
    \ offsetBy: index + 1)\n            let nextChar = word[nextIndex]\n         \
    \   if vowels.contains(nextChar) {\n                result = String(nextChar)\n\
    \                break\n            }\n        }\n        index -= 1\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b5ad1da3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5ad1a9a561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b5ad1a9a286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b5ad1a9a13c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b5ad1a99bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b5ad1bcdec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b5ad1b86660 String.subscript.getter
    + 34

    7    tmplzzj48ve                        0x0000558ae7bc158e <unavailable> + 9614

    8    tmplzzj48ve                        0x0000558ae7bc0516 <unavailable> + 5398

    9    libc.so.6                          0x00002b5ad1f8f460 __libc_start_main +
    245

    10   tmplzzj48ve                        0x0000558ae7bc0219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var distance = word.count\n    for (index, char) in\
    \ word.enumerated() {\n        if vowels.contains(String(char)) {\n          \
    \  if index > 0 && index < word.count - 1 {\n                if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    if index < distance {\n     \
    \                   distance = index\n                        result = String(char)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp2kfwzl8_/tmp2kfwzl8_.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7f78298c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7f77f8fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7f77f8f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7f77f8e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2kfwzl8_                        0x000055a4ca19b8f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b7f78484460 __libc_start_main +
    245

    6    tmp2kfwzl8_                        0x000055a4ca19b539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ for (index, letter) in word.reversed().enumerated() {\n        if vowels.contains(letter)\
    \ {\n            if index == 0 {\n                return String(letter)\n    \
    \        } else if !vowels.contains(word[word.index(word.endIndex, offsetBy: -index\
    \ - 1)]) {\n                return String(letter)\n            }\n        }\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpitk8j65i/tmpitk8j65i.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b00f4439c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b00f4130b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b00f4130988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b00f412f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpitk8j65i                        0x0000561246cdf8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b00f4625460 __libc_start_main +
    245

    6    tmpitk8j65i                        0x0000561246cdf519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var isVowel = false\n\
    \    var isConsonant = false\n    var isFirst = true\n    var isLast = false\n\
    \    var isFound = false\n    var isFirstVowel = false\n    var isLastVowel =\
    \ false\n    var isFirstConsonant = false\n    var isLastConsonant = false\n \
    \   var isFirstConsonantFound = false\n    var isLastConsonantFound = false\n\
    \    var firstConsonantIndex = 0\n    var lastConsonantIndex = 0\n    var firstVowelIndex\
    \ = 0\n    var lastVowelIndex = 0\n    var firstConsonant = \"\"\n    var lastConsonant\
    \ = \"\"\n    var firstVowel = \"\"\n    var lastVowel = \"\"\n    var temp =\
    \ \"\"\n    var tempIndex = 0\n    var tempIndex2 = 0\n    var tempIndex3 = 0\n\
    \    var tempIndex4 = 0\n    var tempIndex5 = 0\n    var tempIndex6 = 0\n    var\
    \ tempIndex7 = 0\n    var tempIndex8 = 0\n    var tempIndex9 = 0\n    var tempIndex10\
    \ = 0\n    var tempIndex11 = 0\n    var tempIndex12 = 0\n    var tempIndex13 =\
    \ 0\n    var tempIndex14 = 0\n    var tempIndex15 = 0\n    var tempIndex16 = 0\n\
    \    var tempIndex17 = 0\n    var tempIndex18 = 0\n    var tempIndex19 = 0\n \
    \   var tempIndex20 = 0\n    var tempIndex21 = 0\n    var tempIndex22 = 0\n  \
    \  var tempIndex23 = 0\n    var tempIndex24 = 0\n    var tempIndex25 = 0\n   \
    \ var tempIndex26 = 0\n    var tempIndex27 = 0\n    var tempIndex28 = 0\n    var\
    \ temp\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmplph4_o0y.swift:65:9: error: type annotation missing in pattern\n\
    \    var temp\n        ^\n"
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestDistance = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if consonants.contains(String(char).lowercased())\
    \ {\n            for (index2, char2) in word.enumerated() {\n                if\
    \ vowels.contains(String(char2).lowercased()) {\n                    if index2\
    \ > index && index2 - index < closestDistance {\n                        closestDistance\
    \ = index2 - index\n                        closestVowel = String(char2)\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpofaezaw5/tmpofaezaw5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54ed09bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54ecd92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54ecd92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54ecd917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofaezaw5                        0x0000561584304827 <unavailable> + 6183

    5    libc.so.6                          0x00002b54ed287460 __libc_start_main +
    245

    6    tmpofaezaw5                        0x0000561584304469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var vowel = \"\"\n    var index = 0\n    for i in word.characters.indices\
    \ {\n        if vowels.contains(String(word[i])) {\n            vowel = String(word[i])\n\
    \            index = word.characters.distance(from: word.startIndex, to: i)\n\
    \        }\n    }\n    if vowel == \"\" {\n        return \"\"\n    }\n    var\
    \ left = \"\"\n    var right = \"\"\n    for i in 0..<index {\n        if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)])) {\n            left = String(word[word.index(word.startIndex,\
    \ offsetBy: i)])\n        }\n    }\n    for i in index..<word.characters.count\
    \ {\n        if consonants.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ i)])) {\n            right = String(word[word.index(word.startIndex, offsetBy:\
    \ i)])\n        }\n    }\n    if left == \"\" || right == \"\" {\n        return\
    \ \"\"\n    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6uhqhyui.swift:17:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in word.characters.indices {\n              \
    \    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6uhqhyui.swift:20:26:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ index = word.characters.distance(from: word.startIndex, to: i)\n           \
    \              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp6uhqhyui.swift:33:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in index..<word.characters.count {\n        \
    \                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestDistance = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            var distance = 0\n            for i in index..<word.count {\n\
    \                let char = String(word[word.index(word.startIndex, offsetBy:\
    \ i)])\n                if consonants.contains(char) {\n                    distance\
    \ += 1\n                } else {\n                    break\n                }\n\
    \            }\n            if distance < closestDistance {\n                closestDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp2vemhdng/tmp2vemhdng.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2e1105dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2e10d54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2e10d54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2e10d537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2vemhdng                        0x000055ffcefcea77 <unavailable> + 6775

    5    libc.so.6                          0x00002b2e11249460 __libc_start_main +
    245

    6    tmp2vemhdng                        0x000055ffcefce6b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index > 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3xhk3c3y/tmp3xhk3c3y.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b532d95ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b532d651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b532d651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b532d6507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xhk3c3y                        0x000055abe8d778a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b532db46460 __libc_start_main +
    245

    6    tmp3xhk3c3y                        0x000055abe8d772d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index > 0 {\n\
    \        let index1 = word.index(word.startIndex, offsetBy: index)\n        let\
    \ index2 = word.index(word.startIndex, offsetBy: index - 1)\n        let char1\
    \ = String(word[index1])\n        let char2 = String(word[index2])\n        if\
    \ vowels.contains(char1) && !vowels.contains(char2) {\n            result = char1\n\
    \            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp2gi0_5ef/tmp2gi0_5ef.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5b615dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5b5e54b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5b5e54988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5b5e537b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp2gi0_5ef                        0x000055783095cadb <unavailable> + 6875

    5    libc.so.6                          0x00002ab5b6349460 __libc_start_main +
    245

    6    tmp2gi0_5ef                        0x000055783095c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(char) {\n            result = String(char)\n \
    \           break\n        }\n        if consonants.contains(char) {\n       \
    \     if index > 0 {\n                result = \"\"\n                break\n \
    \           }\n            index += 1\n        }\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpttpm5u8z.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestIndex = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   if index > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy:\
    \ index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestIndex {\n  \
    \                      closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_uf6axnq/tmp_uf6axnq.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af0384b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af0381aeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af0381ae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af0381ad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_uf6axnq                        0x000055ba077277e7 <unavailable> + 6119

    5    libc.so.6                          0x00002af0386a3460 __libc_start_main +
    245

    6    tmp_uf6axnq                        0x000055ba07727429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var lastConsonant = \"\"\n    var\
    \ lastVowel = \"\"\n    for char in word.characters {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            lastVowel = String(char)\n        } else if consonants.contains(String(char).lowercased())\
    \ {\n            lastConsonant = String(char)\n        }\n        if lastConsonant\
    \ != \"\" && lastVowel != \"\" {\n            result = lastVowel\n           \
    \ break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpp6m5ygpw.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var vowel = \"\"\n    for i in stride(from: word.count - 1, through: 0,\
    \ by: -1) {\n        let index = word.index(word.startIndex, offsetBy: i)\n  \
    \      let letter = String(word[index])\n        if consonants.contains(letter)\
    \ {\n            for j in stride(from: i - 1, through: 0, by: -1) {\n        \
    \        let index = word.index(word.startIndex, offsetBy: j)\n              \
    \  let letter = String(word[index])\n                if vowels.contains(letter)\
    \ {\n                    vowel = letter\n                    break\n         \
    \       }\n            }\n            break\n        }\n    }\n    return vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnxdyry9b/tmpnxdyry9b.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3a46129c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3a45e20b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3a45e20988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3a45e1f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnxdyry9b                        0x000055d17cbe19d3 <unavailable> + 6611

    5    libc.so.6                          0x00002b3a46315460 __libc_start_main +
    245

    6    tmpnxdyry9b                        0x000055d17cbe1409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            result = String(char)\n\
    \            break\n        }\n        if consonants.contains(String(char)) {\n\
    \            if index == 0 {\n                return \"\"\n            }\n   \
    \         return result\n        }\n        index += 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpyup36fzb.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013387
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n    for\
    \ (index, char) in word.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            if index > 0 && index < word.count - 1 {\n                if\
    \ !vowels.contains(String(word[word.index(word.startIndex, offsetBy: index - 1)]))\
    \ && !vowels.contains(String(word[word.index(word.startIndex, offsetBy: index\
    \ + 1)])) {\n                    if index < closestVowelIndex {\n            \
    \            closestVowelIndex = index\n                        closestVowel =\
    \ String(char)\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpzxgesqx9/tmpzxgesqx9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4d9e41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4d9b38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4d9b38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4d9b377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxgesqx9                        0x000055f3234c68f7 <unavailable> + 6391

    5    libc.so.6                          0x00002ba4da02d460 __libc_start_main +
    245

    6    tmpzxgesqx9                        0x000055f3234c6539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if index == 0 || index == word.characters.count - 1 {\n         \
    \   continue\n        }\n        if consonants.contains(String(char)) {\n    \
    \        if let index = word.characters.index(of: char) {\n                let\
    \ left = word.substring(to: index)\n                let right = word.substring(from:\
    \ index)\n                let leftVowel = left.characters.filter { vowels.contains(String($0))\
    \ }\n                let rightVowel = right.characters.filter { vowels.contains(String($0))\
    \ }\n                if leftVowel.count > 0 && rightVowel.count > 0 {\n      \
    \              result = String(leftVowel.last!)\n                    break\n \
    \               }\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpw0s1e173.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpw0s1e173.swift:17:40: error: 'characters' is unavailable:\
    \ Please use String directly\n        if index == 0 || index == word.characters.count\
    \ - 1 {\n                                       ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpw0s1e173.swift:21:33: error: 'characters'\
    \ is unavailable: Please use String directly\n            if let index = word.characters.index(of:\
    \ char) {\n                                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpw0s1e173.swift:21:44: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n            if let index = word.characters.index(of:\
    \ char) {\n                                           ^\n/tmp/tmpw0s1e173.swift:21:44:\
    \ note: use 'firstIndex(of:)' instead\n            if let index = word.characters.index(of:\
    \ char) {\n                                           ^~~~~\n                \
    \                           firstIndex\n/tmp/tmpw0s1e173.swift:22:33: error: value\
    \ of type 'String' has no member 'substring'\n                let left = word.substring(to:\
    \ index)\n                           ~~~~ ^~~~~~~~~\n/tmp/tmpw0s1e173.swift:23:34:\
    \ error: value of type 'String' has no member 'substring'\n                let\
    \ right = word.substring(from: index)\n                            ~~~~ ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel: Character?\n\
    \    var closestVowelIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            if index < closestVowelIndex\
    \ {\n                closestVowel = char\n                closestVowelIndex =\
    \ index\n            }\n        }\n    }\n    return closestVowel != nil ? String(closestVowel!)\
    \ : \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpe96cbhfc/tmpe96cbhfc.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b2b90474c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b2b9016bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b2b9016b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b2b9016a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpe96cbhfc                        0x000055775809a767 <unavailable> + 5991

    5    libc.so.6                          0x00002b2b90660460 __libc_start_main +
    245

    6    tmpe96cbhfc                        0x000055775809a3a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpexx5vpix/tmpexx5vpix.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35a060bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35a0302b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35a0302988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35a03017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexx5vpix                        0x00005640f04967e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b35a07f7460 __libc_start_main +
    245

    6    tmpexx5vpix                        0x00005640f0496219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    for char in word.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && consonants.contains(String(word[word.index(word.endIndex,\
    \ offsetBy: -(index + 1))])) {\n                result = String(char)\n      \
    \          break\n            }\n        }\n        index += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpba8pq2uq/tmpba8pq2uq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6e84f7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6e81eeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6e81ee988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6e81ed7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpba8pq2uq                        0x00005606f5bc9887 <unavailable> + 6279

    5    libc.so.6                          0x00002ae6e86e3460 __libc_start_main +
    245

    6    tmpba8pq2uq                        0x00005606f5bc94c9 <unavailable> + 5321

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    for (index, char) in word.enumerated() {\n       \
    \ if vowels.contains(String(char)) {\n            if index > 0 && index < word.count\
    \ - 1 {\n                if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    result = String(char)\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp4vl0kuj4/tmp4vl0kuj4.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac35ba7dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac35b774b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac35b774988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac35b7737b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4vl0kuj4                        0x00005591888e78f7 <unavailable> + 6391

    5    libc.so.6                          0x00002ac35bc69460 __libc_start_main +
    245

    6    tmp4vl0kuj4                        0x00005591888e7539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n\
    \    var closestConsonantIndex = 0\n    var closestConsonant = \"\"\n    var wordArray\
    \ = Array(word)\n    for i in 0..<wordArray.count {\n        if vowels.contains(String(wordArray[i]).lowercased())\
    \ {\n            closestVowel = String(wordArray[i])\n            closestVowelIndex\
    \ = i\n            break\n        }\n    }\n    for i in (0..<wordArray.count).reversed()\
    \ {\n        if consonants.contains(String(wordArray[i]).lowercased()) {\n   \
    \         closestConsonant = String(wordArray[i])\n            closestConsonantIndex\
    \ = i\n            break\n        }\n    }\n    if closestVowelIndex < closestConsonantIndex\
    \ {\n        return closestVowel\n    } else {\n        return \"\"\n    }\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp4iftpecc/tmp4iftpecc.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b918ef7fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b918ec76b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b918ec76988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b918ec757b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp4iftpecc                        0x00005607aa616b67 <unavailable> + 7015

    5    libc.so.6                          0x00002b918f16b460 __libc_start_main +
    245

    6    tmp4iftpecc                        0x00005607aa6167a9 <unavailable> + 6057

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n    for\
    \ (index, char) in word.enumerated() {\n        if vowels.contains(char) {\n \
    \           if index > 0 && index < word.count - 1 {\n                if consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestVowelIndex {\n\
    \                        closestVowelIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpuon69s65/tmpuon69s65.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35308cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35305c4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35305c4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35305c37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpuon69s65                        0x00005625c6fa27e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b3530ab9460 __libc_start_main +
    245

    6    tmpuon69s65                        0x00005625c6fa2429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    var vowelFound = false\n    var consonantFound = false\n    for char\
    \ in word.characters.reversed() {\n        if !vowelFound && vowels.contains(char)\
    \ {\n            vowelFound = true\n            vowelIndex = index\n        }\n\
    \        if !consonantFound && consonants.contains(char) {\n            consonantFound\
    \ = true\n            consonantIndex = index\n        }\n        if vowelFound\
    \ && consonantFound {\n            if vowelIndex < consonantIndex {\n        \
    \        result = String(char)\n            }\n            break\n        }\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpbdy59lo9.swift:21:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var closestVowel = \"\"\n  \
    \  var closestIndex = 0\n    var index = word.count - 1\n    var foundVowel =\
    \ false\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if consonants.contains(char) {\n            if foundVowel\
    \ {\n                return closestVowel\n            }\n        } else if vowels.contains(char)\
    \ {\n            foundVowel = true\n            if index > closestIndex {\n  \
    \              closestVowel = String(char)\n                closestIndex = index\n\
    \            }\n        }\n        index -= 1\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpu704_c9i/tmpu704_c9i.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b444f40dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b444f104b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b444f104988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b444f1037b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpu704_c9i                        0x000055e62b1587e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b444f5f9460 __libc_start_main +
    245

    6    tmpu704_c9i                        0x000055e62b158219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closest = \"\"\n    var closestIndex = word.count\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            if index\
    \ > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy: index\
    \ - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestIndex {\n  \
    \                      closest = String(char)\n                        closestIndex\
    \ = index\n                    }\n                }\n            }\n        }\n\
    \    }\n    return closest\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpeycaxz2s/tmpeycaxz2s.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab62ecbbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab62e9b2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab62e9b2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab62e9b17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeycaxz2s                        0x0000560084f3e7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002ab62eea7460 __libc_start_main +
    245

    6    tmpeycaxz2s                        0x0000560084f3e429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        if vowels.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ index)])) {\n            result = String(word[word.index(word.startIndex, offsetBy:\
    \ index)])\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpkwgkgtr_/tmpkwgkgtr_.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6963796c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b696348db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b696348d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b696348c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpkwgkgtr_                        0x000055d38d98c8a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b6963982460 __libc_start_main +
    245

    6    tmpkwgkgtr_                        0x000055d38d98c2d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    for char in word.reversed()\
    \ {\n        if consonants.contains(String(char)) {\n            for char2 in\
    \ word.reversed() {\n                if vowels.contains(String(char2)) {\n   \
    \                 if index > 0 {\n                        result = String(char2)\n\
    \                        break\n                    }\n                }\n   \
    \             index += 1\n            }\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmptr9ccs1o/tmptr9ccs1o.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92e670fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92e6406b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92e6406988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92e64057b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptr9ccs1o                        0x0000555ce210f983 <unavailable> + 6531

    5    libc.so.6                          0x00002b92e68fb460 __libc_start_main +
    245

    6    tmptr9ccs1o                        0x0000555ce210f3b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var closestVowel = \"\"\n  \
    \  var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if consonants.contains(char) {\n            for (index2, char2) in\
    \ word.enumerated() {\n                if vowels.contains(char2) {\n         \
    \           if index2 > index && index2 - index < closestDistance {\n        \
    \                closestDistance = index2 - index\n                        closestVowel\
    \ = String(char2)\n                    }\n                }\n            }\n \
    \       }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpsz2vl5lg/tmpsz2vl5lg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cceb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ccba8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ccba8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ccba77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsz2vl5lg                        0x00005645b47c86c7 <unavailable> + 5831

    5    libc.so.6                          0x00002ba6cd09d460 __libc_start_main +
    245

    6    tmpsz2vl5lg                        0x00005645b47c8309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = Int.max\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       for (vowelIndex, vowel) in vowels.enumerated() {\n                if word.contains(vowel)\
    \ {\n                    let vowelIndex = word.index(of: vowel)!\n           \
    \         let distance = word.distance(from: vowelIndex, to: index)\n        \
    \            if distance < closestDistance {\n                        closestDistance\
    \ = distance\n                        closestVowel = String(vowel)\n         \
    \           }\n                }\n            }\n        }\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpl9h4lqbh.swift:21:43: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                    let vowelIndex = word.index(of: vowel)!\n\
    \                                          ^\n/tmp/tmpl9h4lqbh.swift:21:43: note:\
    \ use 'firstIndex(of:)' instead\n                    let vowelIndex = word.index(of:\
    \ vowel)!\n                                          ^~~~~\n                 \
    \                         firstIndex\n/tmp/tmpl9h4lqbh.swift:22:72: error: cannot\
    \ convert value of type 'Int' to expected argument type 'String.Index'\n     \
    \               let distance = word.distance(from: vowelIndex, to: index)\n  \
    \                                                                     ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       for (index2, char2) in word.enumerated() {\n                if vowels.contains(char2)\
    \ {\n                    if index2 > index && index2 - index < closestDistance\
    \ {\n                        closestDistance = index2 - index\n              \
    \          closestVowel = String(char2)\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp87creb45/tmp87creb45.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67b6928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67b661fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67b661f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67b661e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87creb45                        0x0000560b3e4166c7 <unavailable> + 5831

    5    libc.so.6                          0x00002b67b6b14460 __libc_start_main +
    245

    6    tmp87creb45                        0x0000560b3e416309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var vowel = \"\"\n    for (index,\
    \ char) in word.characters.enumerated() {\n        if vowels.contains(char) {\n\
    \            if index > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) {\n                if index < word.characters.count -\
    \ 1 && consonants.contains(word[word.index(word.startIndex, offsetBy: index +\
    \ 1)]) {\n                    vowel = String(char)\n                }\n      \
    \      }\n        }\n    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp8hjv3fb7.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp8hjv3fb7.swift:19:33: error: 'characters' is unavailable:\
    \ Please use String directly\n                if index < word.characters.count\
    \ - 1 && consonants.contains(word[word.index(word.startIndex, offsetBy: index\
    \ + 1)]) {\n                                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ for i in (0..<word.count).reversed() {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = word[index]\n        if vowels.contains(char)\
    \ {\n            result = String(char)\n            break\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3ajw95_o/tmp3ajw95_o.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af5e0696c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af5e038db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af5e038d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af5e038c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3ajw95_o                        0x000055ec1d4e0b33 <unavailable> + 6963

    5    libc.so.6                          0x00002af5e0882460 __libc_start_main +
    245

    6    tmp3ajw95_o                        0x000055ec1d4e0569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestDistance = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if consonants.contains(String(char).lowercased())\
    \ {\n            for (i, vowel) in vowels.enumerated() {\n                if word.contains(vowel)\
    \ {\n                    let distance = word.distance(from: word.index(of: vowel)!,\
    \ to: word.index(of: char)!)\n                    if distance < closestDistance\
    \ {\n                        closestDistance = distance\n                    \
    \    closestVowel = vowel\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp1xr_02l2.swift:21:71: error: cannot convert value of type 'String'\
    \ to expected argument type 'String.Element' (aka 'Character')\n             \
    \       let distance = word.distance(from: word.index(of: vowel)!, to: word.index(of:\
    \ char)!)\n                                                                  \
    \    ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if consonants.contains(char) {\n            index -= 1\n            continue\n\
    \        }\n        if vowels.contains(char) {\n            result = String(char)\n\
    \            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnlnej91h/tmpnlnej91h.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad31295bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad312652b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad312652988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3126517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnlnej91h                        0x0000562efc2b17e3 <unavailable> + 6115

    5    libc.so.6                          0x00002ad312b47460 __libc_start_main +
    245

    6    tmpnlnej91h                        0x0000562efc2b1219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var vowel = \"\"\n    var index = 0\n    for i in word.characters.reversed()\
    \ {\n        if vowels.contains(String(i)) {\n            vowel = String(i)\n\
    \            break\n        }\n        index += 1\n    }\n    if vowel == \"\"\
    \ {\n        return \"\"\n    }\n    for i in word.characters.reversed() {\n \
    \       if consonants.contains(String(i)) {\n            break\n        }\n  \
    \      index += 1\n    }\n    if index == word.characters.count {\n        return\
    \ \"\"\n    }\n    return vowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmphqnqt5hl.swift:17:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for i in word.characters.reversed() {\n           \
    \       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmphqnqt5hl.swift:27:19:\
    \ error: 'characters' is unavailable: Please use String directly\n    for i in\
    \ word.characters.reversed() {\n                  ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmphqnqt5hl.swift:33:22: error: 'characters'\
    \ is unavailable: Please use String directly\n    if index == word.characters.count\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpexx5vpix/tmpexx5vpix.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35a060bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35a0302b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35a0302988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35a03017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexx5vpix                        0x00005640f04967e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b35a07f7460 __libc_start_main +
    245

    6    tmpexx5vpix                        0x00005640f0496219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var\
    \ consonantIndex = 0\n    for i in (0..<word.count).reversed() {\n        let\
    \ index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            vowelIndex = i\n        }\n \
    \       if consonants.contains(char) {\n            consonantIndex = i\n     \
    \       break\n        }\n    }\n    if vowelIndex > consonantIndex {\n      \
    \  closestVowel = String(word[word.index(word.startIndex, offsetBy: vowelIndex)])\n\
    \    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmplww5o7m_/tmplww5o7m_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af79eedec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af79ebd5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af79ebd5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af79ebd47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplww5o7m_                        0x0000562a6fece9f7 <unavailable> + 6647

    5    libc.so.6                          0x00002af79f0ca460 __libc_start_main +
    245

    6    tmplww5o7m_                        0x0000562a6fece639 <unavailable> + 5689

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var distance = word.count\
    \ - index\n            if distance < closestDistance {\n                closestDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpjutm57jj/tmpjutm57jj.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab8f5134c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab8f4e2bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab8f4e2b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab8f4e2a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjutm57jj                        0x0000564901cd08d3 <unavailable> + 6355

    5    libc.so.6                          0x00002ab8f5320460 __libc_start_main +
    245

    6    tmpjutm57jj                        0x0000564901cd0309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var distance = 0\n      \
    \      for i in index..<word.count {\n                let char = word[word.index(word.startIndex,\
    \ offsetBy: i)]\n                if vowels.contains(char) {\n                \
    \    break\n                }\n                distance += 1\n            }\n\
    \            if distance < closestDistance {\n                closestDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpp2rdw38_/tmpp2rdw38_.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75831cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7582ec4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7582ec4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7582ec37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpp2rdw38_                        0x0000556bbb908977 <unavailable> + 6519

    5    libc.so.6                          0x00002b75833b9460 __libc_start_main +
    245

    6    tmpp2rdw38_                        0x0000556bbb9085b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if consonants.contains(char) {\n            index -= 1\n            continue\n\
    \        }\n        if vowels.contains(char) {\n            result = String(char)\n\
    \            break\n        }\n        index -= 1\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnlnej91h/tmpnlnej91h.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad31295bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad312652b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad312652988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad3126517b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnlnej91h                        0x0000562efc2b17e3 <unavailable> + 6115

    5    libc.so.6                          0x00002ad312b47460 __libc_start_main +
    245

    6    tmpnlnej91h                        0x0000562efc2b1219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var prev = \"\"\n    var curr = \"\
    \"\n    for char in word.reversed() {\n        if vowels.contains(String(char))\
    \ {\n            if consonants.contains(prev) && consonants.contains(curr) {\n\
    \                result = String(char)\n                break\n            }\n\
    \        }\n        curr = prev\n        prev = String(char)\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmplwsyuuv1/tmplwsyuuv1.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002aca36900c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002aca365f7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002aca365f7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002aca365f67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplwsyuuv1                        0x000055b857a47983 <unavailable> + 6531

    5    libc.so.6                          0x00002aca36aec460 __libc_start_main +
    245

    6    tmplwsyuuv1                        0x000055b857a473b9 <unavailable> + 5049

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var distance = word.count\n    for (index, char)\
    \ in word.enumerated() {\n        if consonants.contains(char) {\n           \
    \ for vowel in vowels {\n                if word.contains(vowel) {\n         \
    \           let indexOfVowel = word.index(of: vowel)\n                    if indexOfVowel!\
    \ > index {\n                        if indexOfVowel!.encodedOffset - index <\
    \ distance {\n                            distance = indexOfVowel!.encodedOffset\
    \ - index\n                            result = String(vowel)\n              \
    \          }\n                    }\n                }\n            }\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp4vwrhfgn.swift:21:45: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                    let indexOfVowel = word.index(of:\
    \ vowel)\n                                            ^\n/tmp/tmp4vwrhfgn.swift:21:45:\
    \ note: use 'firstIndex(of:)' instead\n                    let indexOfVowel =\
    \ word.index(of: vowel)\n                                            ^~~~~\n \
    \                                           firstIndex\n/tmp/tmp4vwrhfgn.swift:22:38:\
    \ error: referencing operator function '>' on 'BinaryInteger' requires that 'String.Index'\
    \ conform to 'BinaryInteger'\n                    if indexOfVowel! > index {\n\
    \                                     ^\nSwift.BinaryInteger:1:11: note: where\
    \ 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n/tmp/tmp4vwrhfgn.swift:23:42:\
    \ warning: 'encodedOffset' is deprecated: encodedOffset has been deprecated as\
    \ most common usage is incorrect. Use utf16Offset(in:) to achieve the same behavior.\n\
    \                        if indexOfVowel!.encodedOffset - index < distance {\n\
    \                                         ^\n/tmp/tmp4vwrhfgn.swift:24:54: warning:\
    \ 'encodedOffset' is deprecated: encodedOffset has been deprecated as most common\
    \ usage is incorrect. Use utf16Offset(in:) to achieve the same behavior.\n   \
    \                         distance = indexOfVowel!.encodedOffset - index\n   \
    \                                                  ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var result = \"\"\n    var index\
    \ = 0\n    for char in word.reversed() {\n        if vowels.contains(char) {\n\
    \            result = String(char)\n            break\n        }\n        if consonants.contains(char)\
    \ {\n            result = \"\"\n            break\n        }\n        index +=\
    \ 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpq21rxfn4/tmpq21rxfn4.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adba48a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adba4599b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adba4599988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adba45987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq21rxfn4                        0x0000562680ed56a7 <unavailable> + 5799

    5    libc.so.6                          0x00002adba4a8e460 __libc_start_main +
    245

    6    tmpq21rxfn4                        0x0000562680ed52e9 <unavailable> + 4841

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var closestVowel = \"\"\n    var closestVowelIndex = -1\n    var currentVowelIndex\
    \ = -1\n    var currentConsonantIndex = -1\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            currentVowelIndex\
    \ = index\n            if currentConsonantIndex != -1 && currentVowelIndex - currentConsonantIndex\
    \ < closestVowelIndex - currentConsonantIndex {\n                closestVowel\
    \ = String(char)\n                closestVowelIndex = currentVowelIndex\n    \
    \        }\n        } else {\n            currentConsonantIndex = index\n    \
    \    }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp8_1y8nyx.swift:18:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestVowelDistance = 0\n    for (i, char)\
    \ in word.characters.enumerated() {\n        if consonants.contains(char) {\n\
    \            for (j, vowel) in vowels.characters.enumerated() {\n            \
    \    if word.characters.contains(vowel) {\n                    let vowelIndex\
    \ = word.characters.index(of: vowel)!\n                    let distance = word.distance(from:\
    \ vowelIndex, to: word.endIndex) - 1\n                    if distance > closestVowelDistance\
    \ {\n                        closestVowelDistance = distance\n               \
    \         closestVowel = String(vowel)\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpi3lf0zh4.swift:17:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (i, char) in word.characters.enumerated() {\n \
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpi3lf0zh4.swift:19:38: error: 'characters' is unavailable:\
    \ Please use String directly\n            for (j, vowel) in vowels.characters.enumerated()\
    \ {\n                                     ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n/tmp/tmpi3lf0zh4.swift:20:25: error: 'characters'\
    \ is unavailable: Please use String directly\n                if word.characters.contains(vowel)\
    \ {\n                        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpi3lf0zh4.swift:21:43: error: 'characters' is unavailable:\
    \ Please use String directly\n                    let vowelIndex = word.characters.index(of:\
    \ vowel)!\n                                          ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpi3lf0zh4.swift:21:54: warning: 'index(of:)'\
    \ is deprecated: renamed to 'firstIndex(of:)'\n                    let vowelIndex\
    \ = word.characters.index(of: vowel)!\n                                      \
    \               ^\n/tmp/tmpi3lf0zh4.swift:21:54: note: use 'firstIndex(of:)' instead\n\
    \                    let vowelIndex = word.characters.index(of: vowel)!\n    \
    \                                                 ^~~~~\n                    \
    \                                 firstIndex\n/tmp/tmpi3lf0zh4.swift:17:10: warning:\
    \ immutable value 'i' was never used; consider replacing with '_' or removing\
    \ it\n    for (i, char) in word.characters.enumerated() {\n         ^\n      \
    \   _\n/tmp/tmpi3lf0zh4.swift:19:18: warning: immutable value 'j' was never used;\
    \ con"
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestDistance = 0\n  \
    \  for (index, char) in word.characters.enumerated() {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            var distance = 0\n            for i in index+1..<word.characters.count\
    \ {\n                if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)]).lowercased()) {\n                    distance = i - index\n \
    \                   break\n                }\n            }\n            if distance\
    \ > 0 && (closestDistance == 0 || distance < closestDistance) {\n            \
    \    closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpr4gtl2rg.swift:17:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpr4gtl2rg.swift:20:37: error: 'characters' is unavailable:\
    \ Please use String directly\n            for i in index+1..<word.characters.count\
    \ {\n                                    ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = 0\n    for char in word.reversed() {\n        if vowels.contains(char)\
    \ {\n            result = String(char)\n            break\n        }\n       \
    \ index += 1\n    }\n    if index > 0 {\n        let next = word.index(word.endIndex,\
    \ offsetBy: -index - 1)\n        if vowels.contains(word[next]) {\n          \
    \  result = \"\"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6nkjsgeg/tmp6nkjsgeg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab6a5023c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab6a4d1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab6a4d1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab6a4d197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6nkjsgeg                        0x00005582b078a7b7 <unavailable> + 6071

    5    libc.so.6                          0x00002ab6a520f460 __libc_start_main +
    245

    6    tmp6nkjsgeg                        0x00005582b078a3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            result = String(char)\n\
    \            break\n        }\n        index += 1\n    }\n    if index == word.characters.count\
    \ {\n        return \"\"\n    }\n    for char in word.characters.reversed() {\n\
    \        if !vowels.contains(String(char)) {\n            break\n        }\n \
    \       index += 1\n    }\n    if index == word.characters.count {\n        return\
    \ \"\"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmprgyxuync.swift:16:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmprgyxuync.swift:23:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    if index == word.characters.count {\n             \
    \        ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmprgyxuync.swift:26:22:\
    \ error: 'characters' is unavailable: Please use String directly\n    for char\
    \ in word.characters.reversed() {\n                     ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmprgyxuync.swift:32:22: error: 'characters'\
    \ is unavailable: Please use String directly\n    if index == word.characters.count\
    \ {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmprgyxuync.swift:13:9: warning: variable 'vowels' was never\
    \ mutated; consider changing to 'let' constant\n    var vowels = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestDistance = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if consonants.contains(String(char).lowercased())\
    \ {\n            for (index2, char2) in word.enumerated() {\n                if\
    \ vowels.contains(String(char2).lowercased()) {\n                    if index2\
    \ > index && index2 - index < closestDistance {\n                        closestDistance\
    \ = index2 - index\n                        closestVowel = String(char2)\n   \
    \                 }\n                }\n            }\n        }\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpofaezaw5/tmpofaezaw5.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b54ed09bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b54ecd92b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b54ecd92988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b54ecd917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpofaezaw5                        0x0000561584304827 <unavailable> + 6183

    5    libc.so.6                          0x00002b54ed287460 __libc_start_main +
    245

    6    tmpofaezaw5                        0x0000561584304469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var isConsonant = false\n    var isVowel = false\n\
    \    for char in word.characters.reversed() {\n        if vowels.contains(char)\
    \ {\n            if isConsonant {\n                result = String(char)\n   \
    \             break\n            }\n            isVowel = true\n        } else\
    \ if consonants.contains(char) {\n            if isVowel {\n                result\
    \ = String(char)\n                break\n            }\n            isConsonant\
    \ = true\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpgpe01678.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            if index > 0 && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) {\n                if index < word.count - 1 && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    if index < closestVowelIndex\
    \ {\n                        closestVowel = String(char)\n                   \
    \     closestVowelIndex = index\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp0kl72lhj/tmp0kl72lhj.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b20e25cbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b20e22c2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b20e22c2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b20e22c17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0kl72lhj                        0x0000564e85c298f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b20e27b7460 __libc_start_main +
    245

    6    tmp0kl72lhj                        0x0000564e85c29539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    for (index, char) in word.reversed().enumerated()\
    \ {\n        if vowels.contains(char) {\n            if index == 0 {\n       \
    \         break\n            }\n            if consonants.contains(word[word.index(word.endIndex,\
    \ offsetBy: -index - 1)]) {\n                result = String(char)\n         \
    \       break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpo_5ololv/tmpo_5ololv.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b1e4a689c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1e4a380b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1e4a380988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b1e4a37f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpo_5ololv                        0x0000560fba75a8d7 <unavailable> + 6359

    5    libc.so.6                          0x00002b1e4a875460 __libc_start_main +
    245

    6    tmpo_5ololv                        0x0000560fba75a519 <unavailable> + 5401

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpexx5vpix/tmpexx5vpix.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35a060bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35a0302b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35a0302988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35a03017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexx5vpix                        0x00005640f04967e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b35a07f7460 __libc_start_main +
    245

    6    tmpexx5vpix                        0x00005640f0496219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index > 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3xhk3c3y/tmp3xhk3c3y.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b532d95ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b532d651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b532d651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b532d6507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xhk3c3y                        0x000055abe8d778a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b532db46460 __libc_start_main +
    245

    6    tmp3xhk3c3y                        0x000055abe8d772d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = Int.max\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       for (index2, char2) in word.enumerated() {\n                if vowels.contains(char2)\
    \ {\n                    if index2 > index && index2 - index < closestDistance\
    \ {\n                        closestDistance = index2 - index\n              \
    \          closestVowel = String(char2)\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpavc3uv12/tmpavc3uv12.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b64e2ad6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b64e27cdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b64e27cd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b64e27cc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpavc3uv12                        0x0000564f4556a677 <unavailable> + 5751

    5    libc.so.6                          0x00002b64e2cc2460 __libc_start_main +
    245

    6    tmpavc3uv12                        0x0000564f4556a2b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[index]\n        if consonants.contains(char) {\n\
    \            if index == word.count - 1 {\n                return \"\"\n     \
    \       }\n            let nextChar = word[index + 1]\n            if vowels.contains(nextChar)\
    \ {\n                result = String(nextChar)\n                break\n      \
    \      }\n        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpjrpfcp81.swift:18:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = word[index]\n                   ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjrpfcp81.swift:23:28: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \            let nextChar = word[index + 1]\n                           ^~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var distance = 0\n      \
    \      for i in index..<word.count {\n                if vowels.contains(word[i])\
    \ {\n                    break\n                }\n                distance +=\
    \ 1\n            }\n            if distance < closestDistance {\n            \
    \    closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpchl16one.swift:20:36: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ vowels.contains(word[i]) {\n                                   ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var\
    \ consonantIndex = 0\n    var wordArray = Array(word)\n    var wordArrayReversed\
    \ = Array(word.reversed())\n    for i in 0..<wordArray.count {\n        if vowels.contains(String(wordArray[i]).lowercased())\
    \ {\n            vowelIndex = i\n        }\n        if consonants.contains(String(wordArray[i]).lowercased())\
    \ {\n            consonantIndex = i\n        }\n        if vowelIndex > consonantIndex\
    \ {\n            closestVowel = String(wordArray[vowelIndex])\n            break\n\
    \        }\n    }\n    for i in 0..<wordArrayReversed.count {\n        if vowels.contains(String(wordArrayReversed[i]).lowercased())\
    \ {\n            vowelIndex = i\n        }\n        if consonants.contains(String(wordArrayReversed[i]).lowercased())\
    \ {\n            consonantIndex = i\n        }\n        if vowelIndex > consonantIndex\
    \ {\n            closestVowel = String(wordArrayReversed[vowelIndex])\n      \
    \      break\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp8nv7va6_/tmp8nv7va6_.swift:60: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b315386bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3153562b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3153562988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b31535617b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp8nv7va6_                        0x0000558a8c0559e7 <unavailable> + 6631

    5    libc.so.6                          0x00002b3153a57460 __libc_start_main +
    245

    6    tmp8nv7va6_                        0x0000558a8c055629 <unavailable> + 5673

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestDistance = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if consonants.contains(String(char).lowercased())\
    \ {\n            for i in index..<word.count {\n                if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)]).lowercased()) {\n                    if i - index < closestDistance\
    \ {\n                        closestDistance = i - index\n                   \
    \     closestVowel = String(word[word.index(word.startIndex, offsetBy: i)])\n\
    \                    }\n                    break\n                }\n       \
    \     }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpsp5ezmip/tmpsp5ezmip.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab5faa4dc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab5fa744b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab5fa744988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab5fa7437b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsp5ezmip                        0x00005627d3896ad7 <unavailable> + 6871

    5    libc.so.6                          0x00002ab5fac39460 __libc_start_main +
    245

    6    tmpsp5ezmip                        0x00005627d3896719 <unavailable> + 5913

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var vowelIndex\
    \ = 0\n    var consonantIndex = 0\n    var vowelCount = 0\n    var consonantCount\
    \ = 0\n    for letter in word.characters {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            vowelCount += 1\n            vowelIndex = index\n        }\n\
    \        if consonants.contains(String(letter).lowercased()) {\n            consonantCount\
    \ += 1\n            consonantIndex = index\n        }\n        index += 1\n  \
    \  }\n    if vowelCount == 0 || consonantCount == 0 {\n        return \"\"\n \
    \   }\n    if vowelCount == 1 && consonantCount == 1 {\n        return \"\"\n\
    \    }\n    if vowelCount == 1 && consonantCount > 1 {\n        return String(word.characters.suffix(from:\
    \ word.index(word.startIndex, offsetBy: vowelIndex)))\n    }\n    if vowelCount\
    \ > 1 && consonantCount == 1 {\n        return String(word.characters.prefix(upTo:\
    \ word.index(word.startIndex, offsetBy: vowelIndex)))\n    }\n    if vowelCount\
    \ > 1 && consonantCount > 1 {\n        if vowelIndex > consonantIndex {\n    \
    \        return String(word.characters.prefix(upTo: word.index(word.startIndex,\
    \ offsetBy: vowelIndex)))\n        } else {\n            return String(word.characters.suffix(from:\
    \ word.index(word.startIndex, offsetBy: vowelIndex)))\n        }\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp88kw3arv.swift:21:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in word.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp88kw3arv.swift:39:28:\
    \ error: 'characters' is unavailable: Please use String directly\n        return\
    \ String(word.characters.suffix(from: word.index(word.startIndex, offsetBy: vowelIndex)))\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp88kw3arv.swift:42:28: error: 'characters' is unavailable:\
    \ Please use String directly\n        return String(word.characters.prefix(upTo:\
    \ word.index(word.startIndex, offsetBy: vowelIndex)))\n                      \
    \     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp88kw3arv.swift:46:32:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ return String(word.characters.prefix(upTo: word.index(word.startIndex, offsetBy:\
    \ vowelIndex)))\n                               ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmp88kw3arv.swift:48:32: error: 'characters'\
    \ is unavailable: Please use String directly\n            return String(word.characters.suffix(from:\
    \ word.index(word.startIndex, offsetBy: vowelIndex)))\n                      \
    \         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp88kw3arv.swift:15:9:\
    \ warning: variable 'result' was never mutated; consider changing to 'let' constant\n\
    \    var result = \"\"\n    ~~~ ^\n    let\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var vowelIndex = 0\n    var consonantIndex\
    \ = 0\n    for i in stride(from: word.count - 1, through: 0, by: -1) {\n     \
    \   let char = word[word.index(word.startIndex, offsetBy: i)]\n        if consonants.contains(char)\
    \ {\n            consonantIndex = i\n            break\n        }\n    }\n   \
    \ for i in stride(from: consonantIndex - 1, through: 0, by: -1) {\n        let\
    \ char = word[word.index(word.startIndex, offsetBy: i)]\n        if vowels.contains(char)\
    \ {\n            vowelIndex = i\n            break\n        }\n    }\n    if vowelIndex\
    \ > 0 {\n        closestVowel = String(word[word.index(word.startIndex, offsetBy:\
    \ vowelIndex)])\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpiv6bi0wi/tmpiv6bi0wi.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abc6e16ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abc6de65b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abc6de65988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abc6de647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiv6bi0wi                        0x0000557173470a03 <unavailable> + 6659

    5    libc.so.6                          0x00002abc6e35a460 __libc_start_main +
    245

    6    tmpiv6bi0wi                        0x0000557173470439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index > 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3xhk3c3y/tmp3xhk3c3y.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b532d95ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b532d651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b532d651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b532d6507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xhk3c3y                        0x000055abe8d778a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b532db46460 __libc_start_main +
    245

    6    tmp3xhk3c3y                        0x000055abe8d772d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if consonants.contains(char) {\n            if index == word.count - 1\
    \ {\n                return \"\"\n            }\n            let nextChar = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n            if vowels.contains(nextChar) {\n        \
    \        return String(nextChar)\n            }\n        }\n        index -= 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpjkkg4nga/tmpjkkg4nga.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53a6a55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53a674cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53a674c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53a674b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjkkg4nga                        0x0000558a5e7515d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b53a6c41460 __libc_start_main +
    245

    6    tmpjkkg4nga                        0x0000558a5e751219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelIndex = -1\n\
    \    var lastConsonantIndex = -1\n    for (index, char) in word.lowercased().characters.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if lastConsonantIndex\
    \ != -1 && index - lastConsonantIndex < closestVowelIndex {\n                closestVowel\
    \ = String(char)\n                closestVowelIndex = index - lastConsonantIndex\n\
    \            }\n        } else if consonants.contains(String(char)) {\n      \
    \      lastConsonantIndex = index\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpfp3wui8j.swift:18:44: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.lowercased().characters.enumerated()\
    \ {\n                                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n    for\
    \ (index, char) in word.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            if index < closestVowelIndex {\n                closestVowelIndex\
    \ = index\n                closestVowel = String(char)\n            }\n      \
    \  }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp9o75bk0d/tmp9o75bk0d.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002affeed82c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002affeea79b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002affeea79988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002affeea787b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9o75bk0d                        0x000055e8370197d7 <unavailable> + 6103

    5    libc.so.6                          0x00002affeef6e460 __libc_start_main +
    245

    6    tmp9o75bk0d                        0x000055e837019419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       for (i, vowel) in vowels.enumerated() {\n                if word.contains(vowel)\
    \ {\n                    let distance = abs(index - word.index(of: vowel)!)\n\
    \                    if distance < closestDistance {\n                       \
    \ closestDistance = distance\n                        closestVowel = String(vowel)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp5rq6mj69.swift:21:69: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n                    let distance = abs(index\
    \ - word.index(of: vowel)!)\n                                                \
    \                    ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestDistance = 0\n  \
    \  for (index, letter) in word.enumerated() {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            var distance = 0\n            for i in index..<word.count {\n\
    \                if consonants.contains(String(word[i]).lowercased()) {\n    \
    \                distance += 1\n                } else {\n                   \
    \ break\n                }\n            }\n            if distance > closestDistance\
    \ {\n                closestDistance = distance\n                closestVowel\
    \ = String(letter)\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpuzidylpz.swift:21:47: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ consonants.contains(String(word[i]).lowercased()) {\n                      \
    \                        ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has\
    \ been explicitly marked unavailable here\n    public subscript(i: Int) -> Character\
    \ { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var lastConsonant = \"\"\n    var\
    \ lastVowel = \"\"\n    for letter in word.lowercased() {\n        if vowels.contains(String(letter))\
    \ {\n            lastVowel = String(letter)\n        } else if consonants.contains(String(letter))\
    \ {\n            if lastVowel != \"\" {\n                result = lastVowel\n\
    \            }\n            lastConsonant = String(letter)\n        }\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpckti9ed7/tmpckti9ed7.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad6d6c44c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad6d693bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad6d693b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad6d693a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpckti9ed7                        0x000055743cd2f853 <unavailable> + 6227

    5    libc.so.6                          0x00002ad6d6e30460 __libc_start_main +
    245

    6    tmpckti9ed7                        0x000055743cd2f289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index > 0 {\n\
    \        let char = word[word.index(word.startIndex, offsetBy: index)]\n     \
    \   if vowels.contains(String(char)) {\n            result = String(char)\n  \
    \          break\n        }\n        index -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpxo2vs534/tmpxo2vs534.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af69586ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af695565b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af695565988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6955647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxo2vs534                        0x0000559b7f2108a3 <unavailable> + 6307

    5    libc.so.6                          0x00002af695a5a460 __libc_start_main +
    245

    6    tmpxo2vs534                        0x0000559b7f2102d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var index = word.count - 1\n    while index > 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(String(char)) {\n            let\
    \ prevChar = word[word.index(word.startIndex, offsetBy: index - 1)]\n        \
    \    if !vowels.contains(String(prevChar)) {\n                return String(char)\n\
    \            }\n        }\n        index -= 1\n    }\n    return \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpukoqoxce/tmpukoqoxce.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b01a3947c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b01a363eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b01a363e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b01a363d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpukoqoxce                        0x000055851e499adb <unavailable> + 6875

    5    libc.so.6                          0x00002b01a3b33460 __libc_start_main +
    245

    6    tmpukoqoxce                        0x000055851e4992d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    var lastConsonant\
    \ = \"\"\n    var firstVowel = \"\"\n    var firstVowelIndex = 0\n    var lastConsonantIndex\
    \ = 0\n    for letter in word.lowercased() {\n        if vowels.contains(String(letter))\
    \ {\n            firstVowel = String(letter)\n            firstVowelIndex = index\n\
    \        }\n        if consonants.contains(String(letter)) {\n            lastConsonant\
    \ = String(letter)\n            lastConsonantIndex = index\n        }\n      \
    \  index += 1\n    }\n    if firstVowelIndex > lastConsonantIndex {\n        result\
    \ = firstVowel\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpsxwigbx5/tmpsxwigbx5.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afec339ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afec3095b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afec3095988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afec30947b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsxwigbx5                        0x000056417b115647 <unavailable> + 5703

    5    libc.so.6                          0x00002afec358a460 __libc_start_main +
    245

    6    tmpsxwigbx5                        0x000056417b115289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    for i in (0..<word.count).reversed() {\n        let\
    \ index = word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        if consonants.contains(char) {\n            break\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp79gex5bw/tmp79gex5bw.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25abe8ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25abb85b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25abb85988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25abb847b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp79gex5bw                        0x000055c6160888f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b25ac07a460 __libc_start_main +
    245

    6    tmp79gex5bw                        0x000055c616088539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index > 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3xhk3c3y/tmp3xhk3c3y.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b532d95ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b532d651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b532d651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b532d6507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xhk3c3y                        0x000055abe8d778a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b532db46460 __libc_start_main +
    245

    6    tmp3xhk3c3y                        0x000055abe8d772d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            result = String(char)\n\
    \            break\n        }\n        if consonants.contains(String(char)) {\n\
    \            if index > 0 {\n                break\n            }\n          \
    \  index += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpz2uk0hq3.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if vowels.contains(char) {\n            result = String(char)\n      \
    \      break\n        }\n        index -= 1\n    }\n    if result.isEmpty {\n\
    \        return result\n    }\n    index -= 1\n    while index >= 0 {\n      \
    \  let char = word[word.index(word.startIndex, offsetBy: index)]\n        if consonants.contains(char)\
    \ {\n            break\n        }\n        index -= 1\n    }\n    if index < 0\
    \ {\n        return \"\"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp9mlhilqi/tmp9mlhilqi.swift:59: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b95fa5ecc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b95fa2e3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b95fa2e3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b95fa2e27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9mlhilqi                        0x0000560013eaea6b <unavailable> + 6763

    5    libc.so.6                          0x00002b95fa7d8460 __libc_start_main +
    245

    6    tmp9mlhilqi                        0x0000560013eae269 <unavailable> + 4713

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       let nextIndex = word.index(word.startIndex, offsetBy: index + 1)\n   \
    \         let nextChar = word[nextIndex]\n            if vowels.contains(nextChar)\
    \ {\n                let distance = word.distance(from: word.startIndex, to: nextIndex)\n\
    \                if distance < closestDistance {\n                    closestDistance\
    \ = distance\n                    closestVowel = String(nextChar)\n          \
    \      }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'Swift/StringIndexValidation.swift:120: Fatal error: String index is out
    of bounds

    Current stack trace:

    0    libswiftCore.so                    0x00002b0feb2a0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0feaf97561 <unavailable> + 1434977

    2    libswiftCore.so                    0x00002b0feaf97286 <unavailable> + 1434246

    3    libswiftCore.so                    0x00002b0feaf9713c <unavailable> + 1433916

    4    libswiftCore.so                    0x00002b0feaf96bb0 _assertionFailure(_:_:file:line:flags:)
    + 251

    5    libswiftCore.so                    0x00002b0feb0caec2 <unavailable> + 2694850

    6    libswiftCore.so                    0x00002b0feb083660 String.subscript.getter
    + 34

    7    tmpjn_hwqc7                        0x000056156367f91b <unavailable> + 10523

    8    tmpjn_hwqc7                        0x000056156367e786 <unavailable> + 6022

    9    libc.so.6                          0x00002b0feb48c460 __libc_start_main +
    245

    10   tmpjn_hwqc7                        0x000056156367e489 <unavailable> + 5257

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var vowel = \"\"\n    var consonant\
    \ = \"\"\n    var closestVowel = \"\"\n    var closestDistance = 0\n    for char\
    \ in word.characters {\n        if vowels.containsString(String(char)) {\n   \
    \         vowel = String(char)\n        } else if consonants.containsString(String(char))\
    \ {\n            consonant = String(char)\n        }\n        if vowel != \"\"\
    \ && consonant != \"\" {\n            let distance = word.characters.distanceOf(vowel,\
    \ from: word.characters.indexOf(consonant)!)\n            if closestDistance ==\
    \ 0 || distance < closestDistance {\n                closestDistance = distance\n\
    \                closestVowel = vowel\n            }\n            vowel = \"\"\
    \n            consonant = \"\"\n        }\n    }\n    return closestVowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpv9gmj1y1.swift:19:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpv9gmj1y1.swift:20:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpv9gmj1y1.swift:22:30: error: value\
    \ of type 'String' has no member 'containsString'\n        } else if consonants.containsString(String(char))\
    \ {\n                  ~~~~~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpv9gmj1y1.swift:26:44:\
    \ error: value of type 'String' has no member 'distanceOf'\n            let distance\
    \ = word.characters.distanceOf(vowel, from: word.characters.indexOf(consonant)!)\n\
    \                           ~~~~~~~~~~~~~~~ ^~~~~~~~~~\n/tmp/tmpv9gmj1y1.swift:26:84:\
    \ error: value of type 'String' has no member 'indexOf'\n            let distance\
    \ = word.characters.distanceOf(vowel, from: word.characters.indexOf(consonant)!)\n\
    \                                                                   ~~~~~~~~~~~~~~~\
    \ ^~~~~~~\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var closest = Int.max\n    for (index, char) in word.lowercased().enumerated()\
    \ {\n        if consonants.contains(char) {\n            for (i, vowel) in vowels.enumerated()\
    \ {\n                if word.lowercased().contains(vowel) {\n                \
    \    if index - word.lowercased().firstIndex(of: vowel)! < closest {\n       \
    \                 closest = index - word.lowercased().firstIndex(of: vowel)!\n\
    \                        result = String(vowel)\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6e5x_0pe.swift:21:71: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n                    if index - word.lowercased().firstIndex(of:\
    \ vowel)! < closest {\n                                                      \
    \                ^\n/tmp/tmp6e5x_0pe.swift:22:82: error: cannot convert value\
    \ of type 'String.Index' to expected argument type 'Int'\n                   \
    \     closest = index - word.lowercased().firstIndex(of: vowel)!\n           \
    \                                                                      ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var lastVowel = \"\"\n\
    \    for (i, c) in word.characters.enumerated() {\n        if vowels.contains(String(c))\
    \ {\n            lastVowel = String(c)\n        } else if lastVowel != \"\" {\n\
    \            if i == word.characters.count - 1 {\n                return lastVowel\n\
    \            } else if vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i + 1)])) {\n                return lastVowel\n            }\n   \
    \     }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpf0zw8yqk.swift:15:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (i, c) in word.characters.enumerated() {\n    \
    \                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpf0zw8yqk.swift:19:26: error: 'characters' is unavailable: Please\
    \ use String directly\n            if i == word.characters.count - 1 {\n     \
    \                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestVowelDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var distance = word.count\
    \ - index\n            if distance < closestVowelDistance {\n                closestVowelDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6g8rcbtf/tmp6g8rcbtf.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af42de54c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af42db4bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af42db4b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af42db4a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6g8rcbtf                        0x00005605444538d3 <unavailable> + 6355

    5    libc.so.6                          0x00002af42e040460 __libc_start_main +
    245

    6    tmp6g8rcbtf                        0x0000560544453309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index > 0 {\n\
    \        let char = word[word.index(word.startIndex, offsetBy: index)]\n     \
    \   if vowels.contains(String(char)) {\n            result = String(char)\n  \
    \          break\n        }\n        index -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpxo2vs534/tmpxo2vs534.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af69586ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af695565b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af695565988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6955647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxo2vs534                        0x0000559b7f2108a3 <unavailable> + 6307

    5    libc.so.6                          0x00002af695a5a460 __libc_start_main +
    245

    6    tmpxo2vs534                        0x0000559b7f2102d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = 0\n    for (index, letter) in word.reversed().enumerated()\
    \ {\n        if vowels.contains(letter) {\n            closestVowel = String(letter)\n\
    \            closestDistance = index\n            break\n        }\n    }\n  \
    \  for (index, letter) in word.reversed().enumerated() {\n        if vowels.contains(letter)\
    \ && index < closestDistance {\n            closestVowel = String(letter)\n  \
    \          closestDistance = index\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmptl958625/tmptl958625.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af14e24fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af14df46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af14df46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af14df457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptl958625                        0x000056040d3559d3 <unavailable> + 6611

    5    libc.so.6                          0x00002af14e43b460 __libc_start_main +
    245

    6    tmptl958625                        0x000056040d355409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var distance = 0\n      \
    \      for i in index..<word.count {\n                if !vowels.contains(word[i])\
    \ {\n                    distance += 1\n                } else {\n           \
    \         break\n                }\n            }\n            if distance < closestDistance\
    \ {\n                closestDistance = distance\n                closestVowel\
    \ = String(char)\n            }\n        }\n    }\n    return closestVowel\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpkgdrzr3o.swift:20:37: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ !vowels.contains(word[i]) {\n                                    ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index > 0 {\n\
    \        let char = word[word.index(word.startIndex, offsetBy: index)]\n     \
    \   if vowels.contains(String(char)) {\n            result = String(char)\n  \
    \          break\n        }\n        index -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpxo2vs534/tmpxo2vs534.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af69586ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af695565b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af695565988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af6955647b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpxo2vs534                        0x0000559b7f2108a3 <unavailable> + 6307

    5    libc.so.6                          0x00002af695a5a460 __libc_start_main +
    245

    6    tmpxo2vs534                        0x0000559b7f2102d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var closestVowel = \"\"\n  \
    \  var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if consonants.contains(char) {\n            for (index2, char2) in\
    \ word.enumerated() {\n                if vowels.contains(char2) {\n         \
    \           if index2 > index && index2 - index < closestDistance {\n        \
    \                closestDistance = index2 - index\n                        closestVowel\
    \ = String(char2)\n                    }\n                }\n            }\n \
    \       }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpsz2vl5lg/tmpsz2vl5lg.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6cceb1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6ccba8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6ccba8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6ccba77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsz2vl5lg                        0x00005645b47c86c7 <unavailable> + 5831

    5    libc.so.6                          0x00002ba6cd09d460 __libc_start_main +
    245

    6    tmpsz2vl5lg                        0x00005645b47c8309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestDistance = 0\n  \
    \  for (index, char) in word.characters.enumerated() {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            var distance = 0\n            for i in index..<word.characters.count\
    \ {\n                if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: i)]).lowercased()) {\n                    distance += 1\n        \
    \        } else {\n                    break\n                }\n            }\n\
    \            if distance > closestDistance {\n                closestDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpu80msr3h.swift:17:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpu80msr3h.swift:20:35: error: 'characters' is unavailable:\
    \ Please use String directly\n            for i in index..<word.characters.count\
    \ {\n                                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (i,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       for (j, vowel) in vowels.enumerated() {\n                if word.contains(vowel)\
    \ {\n                    if abs(i - word.firstIndex(of: vowel)!) < closestDistance\
    \ {\n                        closestDistance = abs(i - word.firstIndex(of: vowel)!)\n\
    \                        closestVowel = String(vowel)\n                    }\n\
    \                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp7dv3nnaw.swift:21:58: error: cannot convert value of type 'String.Index'\
    \ to expected argument type 'Int'\n                    if abs(i - word.firstIndex(of:\
    \ vowel)!) < closestDistance {\n                                             \
    \            ^\n/tmp/tmp7dv3nnaw.swift:22:77: error: cannot convert value of type\
    \ 'String.Index' to expected argument type 'Int'\n                        closestDistance\
    \ = abs(i - word.firstIndex(of: vowel)!)\n                                   \
    \                                         ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var closest = word.count\n    for\
    \ (index, char) in word.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            let left = word.index(word.startIndex, offsetBy: index)\n   \
    \         let right = word.index(word.startIndex, offsetBy: index + 1)\n     \
    \       if consonants.contains(String(word[left])) && consonants.contains(String(word[right]))\
    \ {\n                if index < closest {\n                    closest = index\n\
    \                    result = String(char)\n                }\n            }\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmphvxx_g3g/tmphvxx_g3g.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b553562ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5535321b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5535321988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b55353207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphvxx_g3g                        0x000055731eab88f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b5535816460 __libc_start_main +
    245

    6    tmphvxx_g3g                        0x000055731eab8539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel: String = \"\"\n    var closestVowelDistance: Int = 0\n\
    \    for (index, char) in word.characters.enumerated() {\n        if consonants.contains(char)\
    \ {\n            for (index2, char2) in word.characters.enumerated() {\n     \
    \           if vowels.contains(char2) {\n                    if index2 > index\
    \ {\n                        if closestVowelDistance == 0 {\n                \
    \            closestVowelDistance = index2 - index\n                         \
    \   closestVowel = String(char2)\n                        } else if index2 - index\
    \ < closestVowelDistance {\n                            closestVowelDistance =\
    \ index2 - index\n                            closestVowel = String(char2)\n \
    \                       }\n                    }\n                }\n        \
    \    }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpoovmymic.swift:17:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpoovmymic.swift:19:41: error: 'characters' is unavailable:\
    \ Please use String directly\n            for (index2, char2) in word.characters.enumerated()\
    \ {\n                                        ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(char) {\n            if index > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) {\n                if index < word.characters.count -\
    \ 1 && consonants.contains(word[word.index(word.startIndex, offsetBy: index +\
    \ 1)]) {\n                    result = String(char)\n                }\n     \
    \       }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpoi8g5x8p.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpoi8g5x8p.swift:19:33: error: 'characters' is unavailable:\
    \ Please use String directly\n                if index < word.characters.count\
    \ - 1 && consonants.contains(word[word.index(word.startIndex, offsetBy: index\
    \ + 1)]) {\n                                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if consonants.contains(char) {\n            for char2 in word.characters.reversed()\
    \ {\n                if vowels.contains(char2) {\n                    result =\
    \ String(char2)\n                    break\n                }\n              \
    \  index += 1\n            }\n            break\n        }\n        index += 1\n\
    \    }\n    if index == word.characters.count {\n        return \"\"\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpvy3tzdsu.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpvy3tzdsu.swift:19:31: error: 'characters' is unavailable: Please\
    \ use String directly\n            for char2 in word.characters.reversed() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpvy3tzdsu.swift:30:22: error: 'characters' is unavailable:\
    \ Please use String directly\n    if index == word.characters.count {\n      \
    \               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n    for\
    \ (index, char) in word.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            if index > 0 && index < word.count - 1 {\n                if\
    \ !vowels.contains(String(word[word.index(word.startIndex, offsetBy: index - 1)]))\
    \ && !vowels.contains(String(word[word.index(word.startIndex, offsetBy: index\
    \ + 1)])) {\n                    if index < closestVowelIndex {\n            \
    \            closestVowelIndex = index\n                        closestVowel =\
    \ String(char)\n                    }\n                }\n            }\n    \
    \    }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpzxgesqx9/tmpzxgesqx9.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4d9e41c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba4d9b38b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba4d9b38988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4d9b377b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzxgesqx9                        0x000055f3234c68f7 <unavailable> + 6391

    5    libc.so.6                          0x00002ba4da02d460 __libc_start_main +
    245

    6    tmpzxgesqx9                        0x000055f3234c6539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            if index > 0 && index < word.count\
    \ - 1 {\n                if !vowels.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) && !vowels.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestIndex {\n  \
    \                      closestIndex = index\n                        closestVowel\
    \ = String(char)\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpeiks_47u/tmpeiks_47u.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b238cbd0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b238c8c7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b238c8c7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b238c8c67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpeiks_47u                        0x0000563d067db7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b238cdbc460 __libc_start_main +
    245

    6    tmpeiks_47u                        0x0000563d067db429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var vowelIndex = 0\n    var consonantIndex = 0\n    var vowel = \"\"\n  \
    \  var consonant = \"\"\n    var closestVowel = \"\"\n    for (index, letter)\
    \ in word.enumerated() {\n        if vowels.contains(String(letter)) {\n     \
    \       vowelIndex = index\n            vowel = String(letter)\n        }\n  \
    \      if !vowels.contains(String(letter)) && vowel != \"\" {\n            consonantIndex\
    \ = index\n            consonant = String(letter)\n            if consonantIndex\
    \ - vowelIndex > 1 {\n                closestVowel = vowel\n            }\n  \
    \          vowel = \"\"\n        }\n    }\n    return closestVowel\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp1ukx8ckd/tmp1ukx8ckd.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4afb82ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4afb521b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4afb521988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4afb5207b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp1ukx8ckd                        0x0000556c81dbe787 <unavailable> + 6023

    5    libc.so.6                          0x00002b4afba16460 __libc_start_main +
    245

    6    tmp1ukx8ckd                        0x0000556c81dbe3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"AEIOUaeiou\"\n    let consonants = \"\
    BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\"\n    var closestVowel = \"\"\n  \
    \  var closestVowelIndex = 0\n    var lastConsonantIndex = 0\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   if index > lastConsonantIndex {\n                closestVowel = String(char)\n\
    \                closestVowelIndex = index\n            }\n        } else if consonants.contains(char)\
    \ {\n            lastConsonantIndex = index\n        }\n    }\n    if closestVowelIndex\
    \ > lastConsonantIndex {\n        return closestVowel\n    }\n    return \"\"\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpq8hj2tw7/tmpq8hj2tw7.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b48636e1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b48633d8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b48633d8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b48633d77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq8hj2tw7                        0x0000555da8d60677 <unavailable> + 5751

    5    libc.so.6                          0x00002b48638cd460 __libc_start_main +
    245

    6    tmpq8hj2tw7                        0x0000555da8d602b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    for i in stride(from: word.count - 1, through: 0,\
    \ by: -1) {\n        let index = word.index(word.startIndex, offsetBy: i)\n  \
    \      let char = String(word[index])\n        if vowels.contains(char) {\n  \
    \          result = char\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpf3etmyl6/tmpf3etmyl6.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b567e18cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b567de83b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b567de83988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b567de827b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpf3etmyl6                        0x000055c32a986ad3 <unavailable> + 6867

    5    libc.so.6                          0x00002b567e378460 __libc_start_main +
    245

    6    tmpf3etmyl6                        0x000055c32a986509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(char) {\n            result = String(char)\n \
    \           break\n        }\n        if consonants.contains(char) {\n       \
    \     result = String(word[word.index(word.startIndex, offsetBy: index)])\n  \
    \          break\n        }\n        index += 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpcxfjrmnr.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    for char in word.reversed() {\n\
    \        if vowels.contains(char) {\n            if index > 0 && consonants.contains(word[word.index(word.endIndex,\
    \ offsetBy: -index-1)]) {\n                result = String(char)\n           \
    \     break\n            }\n        } else if consonants.contains(char) {\n  \
    \          if index > 0 && vowels.contains(word[word.index(word.endIndex, offsetBy:\
    \ -index-1)]) {\n                result = String(word[word.index(word.endIndex,\
    \ offsetBy: -index)])\n                break\n            }\n        }\n     \
    \   index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpyc8j1n9s/tmpyc8j1n9s.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abdd8ddec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abdd8ad5b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abdd8ad5988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abdd8ad47b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyc8j1n9s                        0x00005560914de7b7 <unavailable> + 6071

    5    libc.so.6                          0x00002abdd8fca460 __libc_start_main +
    245

    6    tmpyc8j1n9s                        0x00005560914de3f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(String(char)) {\n \
    \           var distance = 0\n            for i in index..<word.count {\n    \
    \            if vowels.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ i)])) {\n                    break\n                }\n                distance\
    \ += 1\n            }\n            if distance < closestDistance {\n         \
    \       closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp0_nw5nz5/tmp0_nw5nz5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abca3896c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abca358db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abca358d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abca358c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_nw5nz5                        0x00005585f3d29a77 <unavailable> + 6775

    5    libc.so.6                          0x00002abca3a82460 __libc_start_main +
    245

    6    tmp0_nw5nz5                        0x00005585f3d296b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestDistance = word.count\n\
    \    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            var distance = 0\n            var foundConsonant = false\n  \
    \          for j in (0..<i).reversed() {\n                let index = word.index(word.startIndex,\
    \ offsetBy: j)\n                let char = String(word[index])\n             \
    \   if consonants.contains(char) {\n                    foundConsonant = true\n\
    \                    break\n                }\n                distance += 1\n\
    \            }\n            if foundConsonant {\n                if distance <\
    \ closestDistance {\n                    closestDistance = distance\n        \
    \            closestVowel = char\n                }\n            }\n        }\n\
    \    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpup5mv1dw/tmpup5mv1dw.swift:56: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7451273c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7450f6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7450f6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7450f697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpup5mv1dw                        0x0000557b17153ae7 <unavailable> + 6887

    5    libc.so.6                          0x00002b745145f460 __libc_start_main +
    245

    6    tmpup5mv1dw                        0x0000557b17153729 <unavailable> + 5929

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ letter) in word.enumerated() {\n        if consonants.contains(letter) {\n \
    \           for (vowelIndex, vowel) in vowels.enumerated() {\n               \
    \ if word.contains(vowel) {\n                    let distance = abs(word.distance(from:\
    \ word.index(of: vowel)!, to: word.index(of: letter)!))\n                    if\
    \ distance < closestDistance {\n                        closestDistance = distance\n\
    \                        closestVowel = String(vowel)\n                    }\n\
    \                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpsnclvnx9/tmpsnclvnx9.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b75394b2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b75391a9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b75391a9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b75391a87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpsnclvnx9                        0x000055fb601ae967 <unavailable> + 6503

    5    libc.so.6                          0x00002b753969e460 __libc_start_main +
    245

    6    tmpsnclvnx9                        0x000055fb601ae5a9 <unavailable> + 5545

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestDistance = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            var distance = 0\n            var isConsonant = false\n     \
    \       for i in index..<word.count {\n                let char = word[word.index(word.startIndex,\
    \ offsetBy: i)]\n                if consonants.contains(String(char)) {\n    \
    \                isConsonant = true\n                    distance += 1\n     \
    \           } else if isConsonant {\n                    break\n             \
    \   }\n            }\n            if distance < closestDistance {\n          \
    \      closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpth8bmmao/tmpth8bmmao.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba6f9d0cc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba6f9a03b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba6f9a03988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba6f9a027b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpth8bmmao                        0x000055c572620a77 <unavailable> + 6775

    5    libc.so.6                          0x00002ba6f9ef8460 __libc_start_main +
    245

    6    tmpth8bmmao                        0x000055c5726206b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = Int.max\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            let distance = word.distance(from:\
    \ word.startIndex, to: word.index(word.startIndex, offsetBy: index))\n       \
    \     if distance < closestDistance {\n                closestDistance = distance\n\
    \                closestVowel = String(char)\n            }\n        }\n    }\n\
    \    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpj1mczkv1/tmpj1mczkv1.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae922e17c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae922b0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae922b0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae922b0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpj1mczkv1                        0x000055b0d10767a7 <unavailable> + 6055

    5    libc.so.6                          0x00002ae923003460 __libc_start_main +
    245

    6    tmpj1mczkv1                        0x000055b0d10763e9 <unavailable> + 5097

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var closestVowel = \"\"\n  \
    \  var closestDistance = 0\n    var distance = 0\n    for (index, char) in word.enumerated()\
    \ {\n        if consonants.contains(char) {\n            distance = 0\n      \
    \      for (index2, char2) in word.enumerated() {\n                if vowels.contains(char2)\
    \ {\n                    distance = index2 - index\n                    if distance\
    \ > 0 && (distance < closestDistance || closestDistance == 0) {\n            \
    \            closestDistance = distance\n                        closestVowel\
    \ = String(char2)\n                    }\n                }\n            }\n \
    \       }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpisdbuu3u/tmpisdbuu3u.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b92d5a60c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b92d5757b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b92d5757988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b92d57567b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpisdbuu3u                        0x0000562ac3989677 <unavailable> + 5751

    5    libc.so.6                          0x00002b92d5c4c460 __libc_start_main +
    245

    6    tmpisdbuu3u                        0x0000562ac39892b9 <unavailable> + 4793

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestIndex = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       if index + 1 < word.count {\n                let nextChar = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n                if vowels.contains(nextChar) {\n    \
    \                if index + 2 < word.count {\n                        let nextNextChar\
    \ = word[word.index(word.startIndex, offsetBy: index + 2)]\n                 \
    \       if consonants.contains(nextNextChar) {\n                            if\
    \ index + 2 < closestIndex {\n                                closestIndex = index\
    \ + 2\n                                closestVowel = String(nextChar)\n     \
    \                       }\n                        }\n                    }\n\
    \                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpcwormtzh/tmpcwormtzh.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5e08235c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5e07f2cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5e07f2c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5e07f2b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpcwormtzh                        0x0000558f5b79a7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b5e08421460 __libc_start_main +
    245

    6    tmpcwormtzh                        0x0000558f5b79a429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var vowel = \"\"\n    var consonant = \"\"\n    var closestVowel\
    \ = \"\"\n    var closestConsonant = \"\"\n    var distance = 0\n    var closestDistance\
    \ = 0\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let letter = String(word[index])\n        if vowels.contains(letter)\
    \ {\n            vowel = letter\n            if consonant != \"\" {\n        \
    \        distance = word.count - i\n                if closestDistance == 0 {\n\
    \                    closestDistance = distance\n                    closestVowel\
    \ = vowel\n                    closestConsonant = consonant\n                }\
    \ else if distance < closestDistance {\n                    closestDistance =\
    \ distance\n                    closestVowel = vowel\n                    closestConsonant\
    \ = consonant\n                }\n            }\n        } else if consonants.contains(letter)\
    \ {\n            consonant = letter\n        }\n    }\n    if closestVowel ==\
    \ \"\" {\n        return \"\"\n    } else {\n        return closestVowel\n   \
    \ }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
    \ left.count != right.count {\n        return false\n    }\n    for (l, r) in\
    \ zip(left, right) {\n        if l != r {\n            return false\n        }\n\
    \    }\n    return true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\"\
    ) == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpidliglma/tmpidliglma.swift:66: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b45fe645c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b45fe33cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b45fe33c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b45fe33b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpidliglma                        0x00005644b9ff7c6b <unavailable> + 7275

    5    libc.so.6                          0x00002b45fe831460 __libc_start_main +
    245

    6    tmpidliglma                        0x00005644b9ff7469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ letter) in word.enumerated() {\n        if consonants.contains(letter) {\n \
    \           for vowel in vowels {\n                if word.contains(vowel) {\n\
    \                    let vowelIndex = word.firstIndex(of: vowel)!\n          \
    \          if vowelIndex > index && vowelIndex - index < closestDistance {\n \
    \                       closestDistance = vowelIndex - index\n               \
    \         closestVowel = String(vowel)\n                    }\n              \
    \  }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpug76z7w1.swift:22:35: error: referencing operator function '>'\
    \ on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \                    if vowelIndex > index && vowelIndex - index < closestDistance\
    \ {\n                                  ^\nSwift.BinaryInteger:1:11: note: where\
    \ 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n/tmp/tmpug76z7w1.swift:22:46:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n                    if vowelIndex > index && vowelIndex - index < closestDistance\
    \ {\n                                             ^\n/tmp/tmpug76z7w1.swift:23:43:\
    \ error: cannot convert value of type 'String.Index' to expected argument type\
    \ 'Int'\n                        closestDistance = vowelIndex - index\n      \
    \                                    ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var distance = 0\n      \
    \      for i in index..<word.count {\n                if vowels.contains(word[i])\
    \ {\n                    break\n                }\n                distance +=\
    \ 1\n            }\n            if distance < closestDistance {\n            \
    \    closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpchl16one.swift:20:36: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ vowels.contains(word[i]) {\n                                   ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = word.count - 1\n    var\
    \ found = false\n    while index >= 0 && !found {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(String(char)) {\n            result\
    \ = String(char)\n            found = true\n        } else if consonants.contains(String(char))\
    \ {\n            index -= 1\n        } else {\n            index -= 1\n      \
    \  }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmphga7l0k7/tmphga7l0k7.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b184d60bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b184d302b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b184d302988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b184d3017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphga7l0k7                        0x000055e1e07c88a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b184d7f7460 __libc_start_main +
    245

    6    tmphga7l0k7                        0x000055e1e07c82d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var vowelIndex = 0\n    var consonantIndex = 0\n\
    \    for i in stride(from: word.count - 1, through: 0, by: -1) {\n        let\
    \ c = word[word.index(word.startIndex, offsetBy: i)]\n        if vowels.contains(c)\
    \ {\n            vowelIndex = i\n            break\n        }\n    }\n    for\
    \ i in stride(from: vowelIndex - 1, through: 0, by: -1) {\n        let c = word[word.index(word.startIndex,\
    \ offsetBy: i)]\n        if consonants.contains(c) {\n            consonantIndex\
    \ = i\n            break\n        }\n    }\n    if vowelIndex > consonantIndex\
    \ {\n        result = String(word[word.index(word.startIndex, offsetBy: vowelIndex)])\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp7wpsgeka/tmp7wpsgeka.swift:53: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae9ae49bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae9ae192b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae9ae192988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae9ae1917b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7wpsgeka                        0x000056250327da03 <unavailable> + 6659

    5    libc.so.6                          0x00002ae9ae687460 __libc_start_main +
    245

    6    tmp7wpsgeka                        0x000056250327d439 <unavailable> + 5177

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = 0\n    for (i, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            var\
    \ distance = 0\n            for (j, char2) in word.enumerated() {\n          \
    \      if consonants.contains(char2) {\n                    distance = abs(i -\
    \ j)\n                    if distance > closestDistance {\n                  \
    \      closestDistance = distance\n                        closestVowel = String(char)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpz3mrywyj/tmpz3mrywyj.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b23936dcc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b23933d3b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b23933d3988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b23933d27b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpz3mrywyj                        0x00005637078d5767 <unavailable> + 5991

    5    libc.so.6                          0x00002b23938c8460 __libc_start_main +
    245

    6    tmpz3mrywyj                        0x00005637078d53a9 <unavailable> + 5033

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelDistance = word.count\n\
    \    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            for j in (0..<word.count).reversed() {\n                let index2\
    \ = word.index(word.startIndex, offsetBy: j)\n                let char2 = String(word[index2])\n\
    \                if consonants.contains(char2) {\n                    if j - i\
    \ < closestVowelDistance && j - i > 0 {\n                        closestVowel\
    \ = char\n                        closestVowelDistance = j - i\n             \
    \       }\n                    break\n                }\n            }\n     \
    \   }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpwpcpwyf7/tmpwpcpwyf7.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9d615c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9d612b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9d612b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9d612b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwpcpwyf7                        0x00005626bd3dbcf3 <unavailable> + 7411

    5    libc.so.6                          0x00002b9d617ac460 __libc_start_main +
    245

    6    tmpwpcpwyf7                        0x00005626bd3db729 <unavailable> + 5929

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n    for\
    \ (index, char) in word.enumerated() {\n        if consonants.contains(char) {\n\
    \            for (i, vowel) in vowels.enumerated() {\n                if word.contains(vowel)\
    \ && word.index(of: vowel)! > word.index(of: char)! {\n                    if\
    \ word.index(of: vowel)! < closestVowelIndex {\n                        closestVowelIndex\
    \ = word.index(of: vowel)!\n                        closestVowel = String(vowel)\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmppikku9yr.swift:20:49: warning: 'index(of:)' is deprecated: renamed\
    \ to 'firstIndex(of:)'\n                if word.contains(vowel) && word.index(of:\
    \ vowel)! > word.index(of: char)! {\n                                        \
    \        ^\n/tmp/tmppikku9yr.swift:20:49: note: use 'firstIndex(of:)' instead\n\
    \                if word.contains(vowel) && word.index(of: vowel)! > word.index(of:\
    \ char)! {\n                                                ^~~~~\n          \
    \                                      firstIndex\n/tmp/tmppikku9yr.swift:20:74:\
    \ warning: 'index(of:)' is deprecated: renamed to 'firstIndex(of:)'\n        \
    \        if word.contains(vowel) && word.index(of: vowel)! > word.index(of: char)!\
    \ {\n                                                                        \
    \ ^\n/tmp/tmppikku9yr.swift:20:74: note: use 'firstIndex(of:)' instead\n     \
    \           if word.contains(vowel) && word.index(of: vowel)! > word.index(of:\
    \ char)! {\n                                                                 \
    \        ^~~~~\n                                                             \
    \            firstIndex\n/tmp/tmppikku9yr.swift:21:47: error: referencing operator\
    \ function '<' on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \                    if word.index(of: vowel)! < closestVowelIndex {\n       \
    \                                       ^\nSwift.BinaryInteger:1:11: note: where\
    \ 'Self' = 'String.Index'\nextension BinaryInteger {\n          ^\n/tmp/tmppikku9yr.swift:22:66:\
    \ error: cannot assign value of type 'String.Index' to type 'Int'\n          \
    \              closestVowelIndex = word.index(of: vowel)!\n                  \
    \                          ~~~~~~~~~~~~~~~~~~~~~^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index == 0 {\n\
    \                continue\n            }\n            if index == word.characters.count\
    \ - 1 {\n                continue\n            }\n            if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                result = String(char)\n         \
    \       break\n            }\n        }\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpiykjiwlr.swift:15:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpiykjiwlr.swift:20:30: error: 'characters' is unavailable:\
    \ Please use String directly\n            if index == word.characters.count -\
    \ 1 {\n                             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if consonants.contains(char) {\n            if index == word.count - 1\
    \ {\n                break\n            }\n            let nextChar = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n            if vowels.contains(nextChar) {\n        \
    \        result = String(nextChar)\n                break\n            }\n   \
    \     }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpyfmdef0e/tmpyfmdef0e.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3d40a37c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3d4072eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3d4072e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3d4072d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyfmdef0e                        0x0000564ce72355d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b3d40c23460 __libc_start_main +
    245

    6    tmpyfmdef0e                        0x0000564ce7235219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestDistance = word.count\n\
    \    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            for j in (0..<word.count).reversed() {\n                let index\
    \ = word.index(word.startIndex, offsetBy: j)\n                let char = String(word[index])\n\
    \                if consonants.contains(char) {\n                    if j - i\
    \ < closestDistance {\n                        closestDistance = j - i\n     \
    \                   closestVowel = char\n                    }\n             \
    \       break\n                }\n            }\n        }\n    }\n    return\
    \ closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpzlfp9bav/tmpzlfp9bav.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b401570ec80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4015405b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4015405988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b40154047b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpzlfp9bav                        0x00005614a9be7ae7 <unavailable> + 6887

    5    libc.so.6                          0x00002b40158fa460 __libc_start_main +
    245

    6    tmpzlfp9bav                        0x00005614a9be7729 <unavailable> + 5929

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n\
    \    var closestConsonantIndex = 0\n    var closestConsonant = \"\"\n    var wordArray\
    \ = Array(word)\n    for i in 0..<wordArray.count {\n        if vowels.contains(String(wordArray[i]).lowercased())\
    \ {\n            closestVowel = String(wordArray[i])\n            closestVowelIndex\
    \ = i\n            for j in i..<wordArray.count {\n                if consonants.contains(String(wordArray[j]).lowercased())\
    \ {\n                    closestConsonant = String(wordArray[j])\n           \
    \         closestConsonantIndex = j\n                    break\n             \
    \   }\n            }\n            if closestConsonantIndex > closestVowelIndex\
    \ {\n                return closestVowel\n            }\n        }\n    }\n  \
    \  return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6ttrb4om/tmp6ttrb4om.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b25f00b7c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b25efdaeb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b25efdae988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b25efdad7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6ttrb4om                        0x00005602f2aff8a7 <unavailable> + 6311

    5    libc.so.6                          0x00002b25f02a3460 __libc_start_main +
    245

    6    tmp6ttrb4om                        0x00005602f2aff4e9 <unavailable> + 5353

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = Int.max\n    for (i, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var distance = 0\n      \
    \      for j in i+1..<word.characters.count {\n                let nextChar =\
    \ word[word.index(word.startIndex, offsetBy: j)]\n                if vowels.contains(nextChar)\
    \ {\n                    break\n                }\n                distance +=\
    \ 1\n            }\n            if distance < closestDistance {\n            \
    \    closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpoeunjetw.swift:16:27: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (i, char) in word.characters.enumerated() {\n \
    \                         ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was\
    \ obsoleted in Swift 5.0\n    public var characters: String { get set }\n    \
    \           ^\n/tmp/tmpoeunjetw.swift:19:33: error: 'characters' is unavailable:\
    \ Please use String directly\n            for j in i+1..<word.characters.count\
    \ {\n                                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n\
    \    var closestConsonantIndex = 0\n    var closestConsonant = \"\"\n    var wordArray\
    \ = Array(word)\n    var wordArrayReverse = wordArray.reversed()\n    var wordArrayReverseString\
    \ = \"\"\n    for i in wordArrayReverse {\n        wordArrayReverseString += String(i)\n\
    \    }\n    for i in 0..<wordArrayReverseString.count {\n        if vowels.contains(String(wordArrayReverseString[i]))\
    \ {\n            closestVowel = String(wordArrayReverseString[i])\n          \
    \  closestVowelIndex = i\n            break\n        }\n    }\n    for i in 0..<wordArrayReverseString.count\
    \ {\n        if consonants.contains(String(wordArrayReverseString[i])) && i >\
    \ closestVowelIndex {\n            closestConsonant = String(wordArrayReverseString[i])\n\
    \            closestConsonantIndex = i\n            break\n        }\n    }\n\
    \    if closestVowel == \"\" || closestConsonant == \"\" {\n        return \"\"\
    \n    } else {\n        return closestVowel\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp5gd7e854.swift:26:35: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        if vowels.contains(String(wordArrayReverseString[i]))\
    \ {\n                                  ^~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp5gd7e854.swift:27:35:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            closestVowel = String(wordArrayReverseString[i])\n\
    \                                  ^~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp5gd7e854.swift:33:39:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n        if consonants.contains(String(wordArrayReverseString[i]))\
    \ && i > closestVowelIndex {\n                                      ^~~~~~~~~~~~~~~~~~~~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp5gd7e854.swift:34:39:\
    \ error: 'subscript(_:)' is unavailable: cannot subscript String with an Int,\
    \ use a String.Index instead.\n            closestConsonant = String(wordArrayReverseString[i])\n\
    \                                      ^~~~~~~~~~~~~~~~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp5gd7e854.swift:13:9:\
    \ warning: variable 'vowels' was never mutated; consider changing to 'let' constant\n\
    \    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    ~~~ ^\n    let\n/tmp/tmp5gd7e854.swift:14:9:\
    \ warning: variable 'consonants' was never mutated; consider changing to 'let'\
    \ constant\n    var consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"\
    j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", "
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var distance = word.count\n    for (i, char)\
    \ in word.enumerated() {\n        if consonants.contains(char) {\n           \
    \ for (j, vowel) in vowels.enumerated() {\n                if word.contains(vowel)\
    \ && word.index(of: vowel)! > word.index(of: char)! && word.distance(from: word.index(of:\
    \ vowel)!, to: word.index(of: char)!) < distance {\n                    distance\
    \ = word.distance(from: word.index(of: vowel)!, to: word.index(of: char)!)\n \
    \                   closestVowel = String(vowel)\n                }\n        \
    \    }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp9s7xcs_q/tmp9s7xcs_q.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad65f768c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad65f45fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad65f45f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad65f45e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp9s7xcs_q                        0x000055fc341e7d8b <unavailable> + 7563

    5    libc.so.6                          0x00002ad65f954460 __libc_start_main +
    245

    6    tmp9s7xcs_q                        0x000055fc341e7589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var distance = word.count\n    for (index, char) in word.enumerated() {\n\
    \        if vowels.contains(char) {\n            if index > 0 && index < word.count\
    \ - 1 {\n                let leftChar = word[word.index(word.startIndex, offsetBy:\
    \ index - 1)]\n                let rightChar = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n                if !vowels.contains(leftChar) && !vowels.contains(rightChar)\
    \ {\n                    if index < distance {\n                        distance\
    \ = index\n                        closestVowel = String(char)\n             \
    \       }\n                }\n            }\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpmsor51hu/tmpmsor51hu.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b7e4e21ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b7e4df11b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b7e4df11988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b7e4df107b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpmsor51hu                        0x000055f033ca67e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b7e4e406460 __libc_start_main +
    245

    6    tmpmsor51hu                        0x000055f033ca6429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    let word = word.lowercased()\n    var result = \"\"\n   \
    \ var index = 0\n    for char in word.reversed() {\n        if vowels.contains(String(char))\
    \ {\n            result = String(char)\n            break\n        }\n       \
    \ if consonants.contains(String(char)) {\n            if index == 0 {\n      \
    \          return \"\"\n            }\n            return result\n        }\n\
    \        index += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpbphi_ciw/tmpbphi_ciw.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4c0de4fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4c0db46b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4c0db46988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4c0db457b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbphi_ciw                        0x0000559c813e27c7 <unavailable> + 6087

    5    libc.so.6                          0x00002b4c0e03b460 __libc_start_main +
    245

    6    tmpbphi_ciw                        0x0000559c813e2409 <unavailable> + 5129

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var closestVowel: String = \"\"\n    var closestVowelIndex: Int = 0\n   \
    \ var vowelIndex: Int = 0\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            vowelIndex = index\n\
    \            if vowelIndex > closestVowelIndex {\n                closestVowel\
    \ = String(char)\n                closestVowelIndex = vowelIndex\n           \
    \ }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp6p0exq9x.swift:17:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpexx5vpix/tmpexx5vpix.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35a060bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35a0302b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35a0302988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35a03017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexx5vpix                        0x00005640f04967e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b35a07f7460 __libc_start_main +
    245

    6    tmpexx5vpix                        0x00005640f0496219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            if index < closestVowelIndex {\n                closestVowel\
    \ = String(char)\n                closestVowelIndex = index\n            }\n \
    \       }\n    }\n    if closestVowelIndex == word.count {\n        return \"\"\
    \n    }\n    for (index, char) in word.enumerated() {\n        if consonants.contains(String(char))\
    \ {\n            if index > closestVowelIndex {\n                return closestVowel\n\
    \            }\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpfegwc4b_/tmpfegwc4b_.swift:51: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b44f1ee2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b44f1bd9b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b44f1bd9988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b44f1bd87b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpfegwc4b_                        0x00005589599487d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b44f20ce460 __libc_start_main +
    245

    6    tmpfegwc4b_                        0x0000558959948419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index > 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3xhk3c3y/tmp3xhk3c3y.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b532d95ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b532d651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b532d651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b532d6507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xhk3c3y                        0x000055abe8d778a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b532db46460 __libc_start_main +
    245

    6    tmp3xhk3c3y                        0x000055abe8d772d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index > 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3xhk3c3y/tmp3xhk3c3y.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b532d95ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b532d651b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b532d651988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b532d6507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3xhk3c3y                        0x000055abe8d778a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b532db46460 __libc_start_main +
    245

    6    tmp3xhk3c3y                        0x000055abe8d772d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestIndex = word.count\n    for (index,\
    \ letter) in word.enumerated() {\n        if vowels.contains(letter) {\n     \
    \       if index > 0 && consonants.contains(word[word.index(word.startIndex, offsetBy:\
    \ index - 1)]) {\n                if index < word.count - 1 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestIndex {\n  \
    \                      closestIndex = index\n                        closestVowel\
    \ = String(letter)\n                    }\n                }\n            }\n\
    \        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpbjsg_ki9/tmpbjsg_ki9.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4733d53c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4733a4ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4733a4a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4733a497b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpbjsg_ki9                        0x000056048e6ad7e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b4733f3f460 __libc_start_main +
    245

    6    tmpbjsg_ki9                        0x000056048e6ad429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var result = \"\"\n    for i\
    \ in (0..<word.count).reversed() {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            result = char\n            break\n        }\n        if consonants.contains(char)\
    \ {\n            break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpc_pgh6ss/tmpc_pgh6ss.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b4d11d23c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b4d11a1ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b4d11a1a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b4d11a197b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpc_pgh6ss                        0x000055ead67b58f7 <unavailable> + 6391

    5    libc.so.6                          0x00002b4d11f0f460 __libc_start_main +
    245

    6    tmpc_pgh6ss                        0x000055ead67b5539 <unavailable> + 5433

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var result = \"\"\n    var i\
    \ = word.count - 1\n    while i >= 0 {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if consonants.contains(char)\
    \ {\n            if i == word.count - 1 {\n                return \"\"\n     \
    \       }\n            let nextIndex = word.index(word.startIndex, offsetBy: i\
    \ + 1)\n            let nextChar = String(word[nextIndex])\n            if vowels.contains(nextChar)\
    \ {\n                return nextChar\n            }\n        }\n        i -= 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp5n71y4g2/tmp5n71y4g2.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b619cd7ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b619ca71b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b619ca71988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b619ca707b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5n71y4g2                        0x00005620657d6597 <unavailable> + 5527

    5    libc.so.6                          0x00002b619cf66460 __libc_start_main +
    245

    6    tmp5n71y4g2                        0x00005620657d61d9 <unavailable> + 4569

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if consonants.contains(char) {\n            if index == word.count - 1\
    \ {\n                return \"\"\n            }\n            let nextChar = word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]\n            if vowels.contains(nextChar) {\n        \
    \        return String(nextChar)\n            }\n        }\n        index -= 1\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpjkkg4nga/tmpjkkg4nga.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b53a6a55c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b53a674cb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b53a674c988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b53a674b7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpjkkg4nga                        0x0000558a5e7515d7 <unavailable> + 5591

    5    libc.so.6                          0x00002b53a6c41460 __libc_start_main +
    245

    6    tmpjkkg4nga                        0x0000558a5e751219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(char) {\n            result = String(char)\n \
    \           break\n        }\n        if consonants.contains(char) {\n       \
    \     if index > 0 {\n                break\n            }\n            index\
    \ += 1\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpszz_d79r.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(String(char)) {\n \
    \           var distance = 0\n            for i in index..<word.count {\n    \
    \            if vowels.contains(String(word[word.index(word.startIndex, offsetBy:\
    \ i)])) {\n                    break\n                }\n                distance\
    \ += 1\n            }\n            if distance < closestDistance {\n         \
    \       closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp0_nw5nz5/tmp0_nw5nz5.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002abca3896c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002abca358db6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002abca358d988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002abca358c7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp0_nw5nz5                        0x00005585f3d29a77 <unavailable> + 6775

    5    libc.so.6                          0x00002abca3a82460 __libc_start_main +
    245

    6    tmp0_nw5nz5                        0x00005585f3d296b9 <unavailable> + 5817

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var vowel = \"\"\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        let char = String(word[index])\n        if vowels.contains(char)\
    \ {\n            vowel = char\n        }\n        if consonants.contains(char)\
    \ {\n            if vowel != \"\" {\n                return vowel\n          \
    \  }\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpgzm9m2_x/tmpgzm9m2_x.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b8948b2bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b8948822b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b8948822988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b89488217b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgzm9m2_x                        0x000056079e249717 <unavailable> + 5911

    5    libc.so.6                          0x00002b8948d17460 __libc_start_main +
    245

    6    tmpgzm9m2_x                        0x000056079e249359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[index]\n        if consonants.contains(char) {\n\
    \            break\n        }\n        index -= 1\n    }\n    if index < 0 {\n\
    \        return result\n    }\n    index -= 1\n    while index >= 0 {\n      \
    \  let char = word[index]\n        if vowels.contains(char) {\n            result\
    \ = String(char)\n            break\n        }\n        index -= 1\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpjb2gppnd.swift:18:20: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n        let char\
    \ = word[index]\n                   ^~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n/tmp/tmpjb2gppnd.swift:29:20: error: 'subscript(_:)'\
    \ is unavailable: cannot subscript String with an Int, use a String.Index instead.\n\
    \        let char = word[index]\n                   ^~~~~~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    var prevConsonant\
    \ = false\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            if prevConsonant\
    \ {\n                result = String(char)\n                break\n          \
    \  }\n        } else if consonants.contains(char) {\n            prevConsonant\
    \ = true\n        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmptz6zpeoh/tmptz6zpeoh.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae94d273c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae94cf6ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae94cf6a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae94cf697b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptz6zpeoh                        0x000055fa6310a7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002ae94d45f460 __libc_start_main +
    245

    6    tmptz6zpeoh                        0x000055fa6310a219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = 0\n    var indexOfVowel = 0\n    var\
    \ indexOfConsonant = 0\n    var distance = 0\n    var minDistance = 0\n    for\
    \ char in word.characters {\n        if vowels.containsString(String(char)) {\n\
    \            indexOfVowel = index\n        }\n        if consonants.containsString(String(char))\
    \ {\n            indexOfConsonant = index\n            distance = indexOfConsonant\
    \ - indexOfVowel\n            if distance > 0 && (minDistance == 0 || distance\
    \ < minDistance) {\n                minDistance = distance\n                result\
    \ = String(char)\n            }\n        }\n        index += 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpmr8_pmsd.swift:21:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmpmr8_pmsd.swift:22:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpmr8_pmsd.swift:25:23: error: value\
    \ of type 'String' has no member 'containsString'\n        if consonants.containsString(String(char))\
    \ {\n           ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = 0\n    for (index, char)\
    \ in word.enumerated() {\n        if vowels.contains(char) {\n            var\
    \ distance = 0\n            for i in index..<word.count {\n                if\
    \ consonants.contains(word[i]) {\n                    distance += 1\n        \
    \        } else {\n                    break\n                }\n            }\n\
    \            if distance > closestDistance {\n                closestDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp5_qbmi9y.swift:21:40: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ consonants.contains(word[i]) {\n                                       ^~~~~~~\n\
    Swift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable\
    \ here\n    public subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       for vowel in vowels {\n                if word.contains(vowel) {\n   \
    \                 let vowelIndex = word.firstIndex(of: vowel)!\n             \
    \       if vowelIndex > index {\n                        let distance = vowelIndex.encodedOffset\
    \ - index\n                        if distance < closestDistance {\n         \
    \                   closestDistance = distance\n                            closestVowel\
    \ = String(vowel)\n                        }\n                    }\n        \
    \        }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpkevpjz_3.swift:22:35: error: referencing operator function '>'\
    \ on 'BinaryInteger' requires that 'String.Index' conform to 'BinaryInteger'\n\
    \                    if vowelIndex > index {\n                               \
    \   ^\nSwift.BinaryInteger:1:11: note: where 'Self' = 'String.Index'\nextension\
    \ BinaryInteger {\n          ^\n/tmp/tmpkevpjz_3.swift:23:51: warning: 'encodedOffset'\
    \ is deprecated: encodedOffset has been deprecated as most common usage is incorrect.\
    \ Use utf16Offset(in:) to achieve the same behavior.\n                       \
    \ let distance = vowelIndex.encodedOffset - index\n                          \
    \                        ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var distance = 0\n      \
    \      var isConsonant = false\n            for i in (0..<index).reversed() {\n\
    \                if vowels.contains(word[word.index(word.startIndex, offsetBy:\
    \ i)]) {\n                    break\n                }\n                distance\
    \ += 1\n                isConsonant = true\n            }\n            if isConsonant\
    \ {\n                for i in (index+1)..<word.count {\n                    if\
    \ vowels.contains(word[word.index(word.startIndex, offsetBy: i)]) {\n        \
    \                break\n                    }\n                    distance +=\
    \ 1\n                    isConsonant = true\n                }\n            }\n\
    \            if isConsonant && distance < closestDistance {\n                closestDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpqqf0mobx/tmpqqf0mobx.swift:58: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002af1e5f59c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002af1e5c50b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002af1e5c50988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002af1e5c4f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpqqf0mobx                        0x0000557db173bc37 <unavailable> + 7223

    5    libc.so.6                          0x00002af1e6145460 __libc_start_main +
    245

    6    tmpqqf0mobx                        0x0000557db173b879 <unavailable> + 6265

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let word = word.lowercased()\n\
    \    var result = \"\"\n    for i in (0..<word.count).reversed() {\n        let\
    \ index = word.index(word.startIndex, offsetBy: i)\n        let char = word[index]\n\
    \        if vowels.contains(char) {\n            result = String(char)\n     \
    \       break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp_aiei2rq/tmp_aiei2rq.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b9cdf69ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b9cdf391b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b9cdf391988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b9cdf3907b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp_aiei2rq                        0x000055b7b5669b93 <unavailable> + 7059

    5    libc.so.6                          0x00002b9cdf886460 __libc_start_main +
    245

    6    tmp_aiei2rq                        0x000055b7b56695c9 <unavailable> + 5577

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpexx5vpix/tmpexx5vpix.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35a060bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35a0302b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35a0302988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35a03017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexx5vpix                        0x00005640f04967e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b35a07f7460 __libc_start_main +
    245

    6    tmpexx5vpix                        0x00005640f0496219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = word[word.index(word.startIndex, offsetBy: index)]\n     \
    \   if vowels.contains(String(char)) {\n            result = String(char)\n  \
    \          break\n        }\n        index -= 1\n    }\n    return result\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpd7ycsjq5/tmpd7ycsjq5.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b79249eac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b79246e1b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b79246e1988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b79246e07b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpd7ycsjq5                        0x000055910ccd78a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b7924bd6460 __libc_start_main +
    245

    6    tmpd7ycsjq5                        0x000055910ccd72d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n\
    \    var closestConsonantIndex = 0\n    var closestConsonant = \"\"\n    for (index,\
    \ char) in word.lowercased().characters.enumerated() {\n        if vowels.contains(String(char))\
    \ {\n            closestVowel = String(char)\n            closestVowelIndex =\
    \ index\n        }\n        if consonants.contains(String(char)) {\n         \
    \   closestConsonant = String(char)\n            closestConsonantIndex = index\n\
    \        }\n        if closestVowelIndex > closestConsonantIndex {\n         \
    \   return closestVowel\n        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpj5hn2rpg.swift:19:44: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.lowercased().characters.enumerated()\
    \ {\n                                           ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n/tmp/tmpj5hn2rpg.swift:18:9: warning: variable\
    \ 'closestConsonant' was written to, but never read\n    var closestConsonant\
    \ = \"\"\n        ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if consonants.contains(char) {\n            break\n        }\n       \
    \ index -= 1\n    }\n    if index == 0 {\n        return \"\"\n    }\n    index\
    \ -= 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpg0862fzs/tmpg0862fzs.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b24aab99c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b24aa890b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b24aa890988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b24aa88f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpg0862fzs                        0x000055a7901b27e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b24aad85460 __libc_start_main +
    245

    6    tmpg0862fzs                        0x000055a7901b2219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       let start = word.index(word.startIndex, offsetBy: index)\n           \
    \ let end = word.index(word.endIndex, offsetBy: -1)\n            let substring\
    \ = word[start..<end]\n            for (index, char) in substring.enumerated()\
    \ {\n                if vowels.contains(char) {\n                    if index\
    \ < closestDistance {\n                        closestDistance = index\n     \
    \                   closestVowel = String(char)\n                    }\n     \
    \           }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp7x9egzl2/tmp7x9egzl2.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002afa652d4c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002afa64fcbb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002afa64fcb988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002afa64fca7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp7x9egzl2                        0x0000560da7b7a947 <unavailable> + 6471

    5    libc.so.6                          0x00002afa654c0460 __libc_start_main +
    245

    6    tmp7x9egzl2                        0x0000560da7b7a589 <unavailable> + 5513

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var vowelIndex = 0\n    var consonantIndex = 0\n\
    \    for char in word.reversed() {\n        if vowels.contains(char) {\n     \
    \       vowelIndex = word.index(of: char)!\n        }\n        if consonants.contains(char)\
    \ {\n            consonantIndex = word.index(of: char)!\n            if vowelIndex\
    \ > consonantIndex {\n                result = String(word[vowelIndex])\n    \
    \            break\n            }\n        }\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpiwrjkxsg.swift:20:46: error: cannot assign value of type 'String.Index'\
    \ to type 'Int'\n            vowelIndex = word.index(of: char)!\n            \
    \             ~~~~~~~~~~~~~~~~~~~~^\n/tmp/tmpiwrjkxsg.swift:23:50: error: cannot\
    \ assign value of type 'String.Index' to type 'Int'\n            consonantIndex\
    \ = word.index(of: char)!\n                             ~~~~~~~~~~~~~~~~~~~~^\n\
    /tmp/tmpiwrjkxsg.swift:25:33: error: 'subscript(_:)' is unavailable: cannot subscript\
    \ String with an Int, use a String.Index instead.\n                result = String(word[vowelIndex])\n\
    \                                ^~~~~~~~~~~~~~~~\nSwift.String:3:12: note: 'subscript(_:)'\
    \ has been explicitly marked unavailable here\n    public subscript(i: Int) ->\
    \ Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var distance = 0\n      \
    \      for i in index..<word.count {\n                if vowels.contains(word[i])\
    \ {\n                    break\n                }\n                distance +=\
    \ 1\n            }\n            if distance < closestDistance {\n            \
    \    closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpchl16one.swift:20:36: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ vowels.contains(word[i]) {\n                                   ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelIndex = 0\n\
    \    var closestConsonantIndex = 0\n    var closestConsonant = \"\"\n    var word\
    \ = word.lowercased()\n    for i in 0..<word.count {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        if vowels.contains(String(word[index])) {\n          \
    \  closestVowel = String(word[index])\n            closestVowelIndex = i\n   \
    \     }\n        if consonants.contains(String(word[index])) {\n            closestConsonant\
    \ = String(word[index])\n            closestConsonantIndex = i\n        }\n  \
    \      if closestVowelIndex > closestConsonantIndex {\n            return closestVowel\n\
    \        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmprg610m7e/tmprg610m7e.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b388fc84c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b388f97bb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b388f97b988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b388f97a7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmprg610m7e                        0x0000555903e57877 <unavailable> + 6263

    5    libc.so.6                          0x00002b388fe70460 __libc_start_main +
    245

    6    tmprg610m7e                        0x0000555903e574b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = word.count - 1\n    var\
    \ lastConsonant = \"\"\n    var firstVowel = \"\"\n    while index >= 0 {\n  \
    \      let char = word[word.index(word.startIndex, offsetBy: index)]\n       \
    \ if vowels.contains(String(char)) {\n            firstVowel = String(char)\n\
    \            break\n        }\n        index -= 1\n    }\n    index = word.count\
    \ - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if consonants.contains(String(char)) {\n        \
    \    lastConsonant = String(char)\n            break\n        }\n        index\
    \ -= 1\n    }\n    if firstVowel != \"\" && lastConsonant != \"\" {\n        result\
    \ = firstVowel\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpwbss43ks/tmpwbss43ks.swift:57: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba850ee1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba850bd8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba850bd8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba850bd77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwbss43ks                        0x000055b8ae6228a3 <unavailable> + 6307

    5    libc.so.6                          0x00002ba8510cd460 __libc_start_main +
    245

    6    tmpwbss43ks                        0x000055b8ae6222d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpexx5vpix/tmpexx5vpix.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35a060bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35a0302b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35a0302988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35a03017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexx5vpix                        0x00005640f04967e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b35a07f7460 __libc_start_main +
    245

    6    tmpexx5vpix                        0x00005640f0496219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var index = word.count - 1\n    var\
    \ vowelIndex = -1\n    var consonantIndex = -1\n    while index >= 0 {\n     \
    \   let char = String(word[word.index(word.startIndex, offsetBy: index)])\n  \
    \      if vowels.contains(char) {\n            vowelIndex = index\n        } else\
    \ if consonants.contains(char) {\n            consonantIndex = index\n       \
    \ }\n        if vowelIndex != -1 && consonantIndex != -1 {\n            result\
    \ = String(word[word.index(word.startIndex, offsetBy: vowelIndex)])\n        \
    \    break\n        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmppoccvnka/tmppoccvnka.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae2f24b6c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae2f21adb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae2f21ad988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae2f21ac7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmppoccvnka                        0x0000563e478108a3 <unavailable> + 6307

    5    libc.so.6                          0x00002ae2f26a2460 __libc_start_main +
    245

    6    tmppoccvnka                        0x0000563e478102d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelDistance = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if consonants.contains(String(char).lowercased())\
    \ {\n            for (index2, char2) in word.enumerated() {\n                if\
    \ vowels.contains(String(char2).lowercased()) {\n                    if index2\
    \ > index && index2 - index < closestVowelDistance {\n                       \
    \ closestVowel = String(char2)\n                        closestVowelDistance =\
    \ index2 - index\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmplz88l5h7/tmplz88l5h7.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab2941cdc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab293ec4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab293ec4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab293ec37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmplz88l5h7                        0x0000564052822827 <unavailable> + 6183

    5    libc.so.6                          0x00002ab2943b9460 __libc_start_main +
    245

    6    tmplz88l5h7                        0x0000564052822469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var result = \"\"\n    for (index,\
    \ char) in word.characters.enumerated() {\n        if vowels.contains(char) {\n\
    \            if index > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) {\n                if index < word.characters.count -\
    \ 1 && consonants.contains(word[word.index(word.startIndex, offsetBy: index +\
    \ 1)]) {\n                    result = String(char)\n                }\n     \
    \       }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpkl6d7_9b.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpkl6d7_9b.swift:19:33: error: 'characters' is unavailable:\
    \ Please use String directly\n                if index < word.characters.count\
    \ - 1 && consonants.contains(word[word.index(word.startIndex, offsetBy: index\
    \ + 1)]) {\n                                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if consonants.contains(char) {\n            for i in index + 1..<word.count\
    \ {\n                let char = word[word.index(word.startIndex, offsetBy: i)]\n\
    \                if vowels.contains(char) {\n                    result = String(char)\n\
    \                    break\n                }\n            }\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmptfaauz_7/tmptfaauz_7.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b14cb7c0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b14cb4b7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b14cb4b7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b14cb4b67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmptfaauz_7                        0x000055d5a9aaa757 <unavailable> + 5975

    5    libc.so.6                          0x00002b14cb9ac460 __libc_start_main +
    245

    6    tmptfaauz_7                        0x000055d5a9aaa399 <unavailable> + 5017

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelIndex = word.count\n\
    \    for (index, char) in word.enumerated() {\n        if consonants.contains(String(char).lowercased())\
    \ {\n            for (vowelIndex, vowel) in word.enumerated() {\n            \
    \    if vowels.contains(String(vowel).lowercased()) && vowelIndex > index && vowelIndex\
    \ < closestVowelIndex {\n                    closestVowel = String(vowel)\n  \
    \                  closestVowelIndex = vowelIndex\n                }\n       \
    \     }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpv3q4a3gm/tmpv3q4a3gm.swift:43: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b057b0c1c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b057adb8b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b057adb8988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b057adb77b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpv3q4a3gm                        0x000055828c97b827 <unavailable> + 6183

    5    libc.so.6                          0x00002b057b2ad460 __libc_start_main +
    245

    6    tmpv3q4a3gm                        0x000055828c97b469 <unavailable> + 5225

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestDistance = 0\n  \
    \  for (index, char) in word.enumerated() {\n        if consonants.contains(String(char).lowercased())\
    \ {\n            for (index2, char2) in word.enumerated() {\n                if\
    \ vowels.contains(String(char2).lowercased()) {\n                    if index2\
    \ > index {\n                        if closestDistance == 0 {\n             \
    \               closestDistance = index2 - index\n                           \
    \ closestVowel = String(char2)\n                        } else if index2 - index\
    \ < closestDistance {\n                            closestDistance = index2 -\
    \ index\n                            closestVowel = String(char2)\n          \
    \              }\n                    }\n                }\n            }\n  \
    \      }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpn35fsqah/tmpn35fsqah.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b21e3cb3c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b21e39aab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b21e39aa988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b21e39a97b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpn35fsqah                        0x000055c695bde7d7 <unavailable> + 6103

    5    libc.so.6                          0x00002b21e3e9f460 __libc_start_main +
    245

    6    tmpn35fsqah                        0x000055c695bde419 <unavailable> + 5145

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var vowel = \"\"\n    for i\
    \ in (0..<word.count).reversed() {\n        let index = word.index(word.startIndex,\
    \ offsetBy: i)\n        if vowels.contains(word[index]) {\n            vowel =\
    \ String(word[index])\n            break\n        }\n    }\n    for i in (0..<word.count).reversed()\
    \ {\n        let index = word.index(word.startIndex, offsetBy: i)\n        if\
    \ consonants.contains(word[index]) {\n            if i == word.count - 1 {\n \
    \               return \"\"\n            }\n            let nextIndex = word.index(word.startIndex,\
    \ offsetBy: i + 1)\n            if vowels.contains(word[nextIndex]) {\n      \
    \          return String(word[nextIndex])\n            }\n            return vowel\n\
    \        }\n    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpiw25dnxl/tmpiw25dnxl.swift:52: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ae6b341fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ae6b3116b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ae6b3116988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ae6b31157b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpiw25dnxl                        0x000055986798b927 <unavailable> + 6439

    5    libc.so.6                          0x00002ae6b360b460 __libc_start_main +
    245

    6    tmpiw25dnxl                        0x000055986798b569 <unavailable> + 5481

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   var distance = 0\n            for i in index..<word.count {\n            \
    \    let char = word[word.index(word.startIndex, offsetBy: i)]\n             \
    \   if consonants.contains(char) {\n                    distance += 1\n      \
    \          } else {\n                    break\n                }\n          \
    \  }\n            if distance < closestDistance {\n                closestDistance\
    \ = distance\n                closestVowel = String(char)\n            }\n   \
    \     }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmphdwjb5mc/tmphdwjb5mc.swift:50: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad765532c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad765229b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad765229988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad7652287b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmphdwjb5mc                        0x000055724b54d977 <unavailable> + 6519

    5    libc.so.6                          0x00002ad76571e460 __libc_start_main +
    245

    6    tmphdwjb5mc                        0x000055724b54d5b9 <unavailable> + 5561

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var lastConsonant = \"\"\n    var lastVowel = \"\"\
    \n    for char in word.characters {\n        if vowels.containsString(String(char))\
    \ {\n            lastVowel = String(char)\n        } else if consonants.containsString(String(char))\
    \ {\n            if lastVowel != \"\" {\n                result = lastVowel\n\
    \            }\n            lastConsonant = String(char)\n        }\n    }\n \
    \   return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp4rn3mlna.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n/tmp/tmp4rn3mlna.swift:19:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(char))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmp4rn3mlna.swift:21:30: error: value\
    \ of type 'String' has no member 'containsString'\n        } else if consonants.containsString(String(char))\
    \ {\n                  ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    for i in stride(from: word.count - 1, through: 0,\
    \ by: -1) {\n        let index = word.index(word.startIndex, offsetBy: i)\n  \
    \      let char = String(word[index])\n        if vowels.contains(char) {\n  \
    \          result = char\n            break\n        }\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpk4t8z5ks/tmpk4t8z5ks.swift:41: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b28aad39c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b28aaa30b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b28aaa30988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b28aaa2f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpk4t8z5ks                        0x0000557ae30cdad3 <unavailable> + 6867

    5    libc.so.6                          0x00002b28aaf25460 __libc_start_main +
    245

    6    tmpk4t8z5ks                        0x0000557ae30cd509 <unavailable> + 5385

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel: Character?\n\
    \    var closestVowelIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            if index > 0 && index < word.count\
    \ - 1 {\n                if !vowels.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) && !vowels.contains(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]) {\n                    if index < closestVowelIndex {\n\
    \                        closestVowel = char\n                        closestVowelIndex\
    \ = index\n                    }\n                }\n            }\n        }\n\
    \    }\n    return closestVowel != nil ? String(closestVowel!) : \"\"\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpovs8oj1k/tmpovs8oj1k.swift:44: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3938993c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b393868ab6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b393868a988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b39386897b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpovs8oj1k                        0x000055b705b13877 <unavailable> + 6263

    5    libc.so.6                          0x00002b3938b7f460 __libc_start_main +
    245

    6    tmpovs8oj1k                        0x000055b705b134b9 <unavailable> + 5305

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       for (index2, char2) in word.enumerated() {\n                if vowels.contains(char2)\
    \ && index2 > index {\n                    if index2 - index < closestDistance\
    \ {\n                        closestDistance = index2 - index\n              \
    \          closestVowel = String(char2)\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpvk2yyzyx/tmpvk2yyzyx.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ba4014a2c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ba401199b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ba401199988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ba4011987b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpvk2yyzyx                        0x000056313bc366c7 <unavailable> + 5831

    5    libc.so.6                          0x00002ba40168e460 __libc_start_main +
    245

    6    tmpvk2yyzyx                        0x000056313bc36309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestVowelIndex = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            if index < closestVowelIndex\
    \ {\n                closestVowel = String(char)\n                closestVowelIndex\
    \ = index\n            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnwd4v6rd/tmpnwd4v6rd.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b73dc8f0c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b73dc5e7b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b73dc5e7988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b73dc5e67b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnwd4v6rd                        0x000055e8b18526c7 <unavailable> + 5831

    5    libc.so.6                          0x00002b73dcadc460 __libc_start_main +
    245

    6    tmpnwd4v6rd                        0x000055e8b1852309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel = \"\"\n    var closestVowelIndex = -1\n\
    \    var closestConsonantIndex = -1\n    for (index, char) in word.lowercased().reversed().enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            closestVowel = String(char)\n\
    \            closestVowelIndex = index\n        }\n        if consonants.contains(String(char))\
    \ && closestVowelIndex > -1 {\n            closestConsonantIndex = index\n   \
    \         break\n        }\n    }\n    if closestVowelIndex > -1 && closestConsonantIndex\
    \ > -1 && closestVowelIndex > closestConsonantIndex {\n        return closestVowel\n\
    \    }\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3x4xvt5e/tmp3x4xvt5e.swift:47: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ad2f07dbc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ad2f04d2b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ad2f04d2988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ad2f04d17b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3x4xvt5e                        0x00005623d4d3f8e7 <unavailable> + 6375

    5    libc.so.6                          0x00002ad2f09c7460 __libc_start_main +
    245

    6    tmp3x4xvt5e                        0x00005623d4d3f529 <unavailable> + 5417

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(String(char)) {\n            if index > 0 && index\
    \ < word.characters.count - 1 {\n                if !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)])) && !vowels.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)])) {\n                    result = String(char)\n     \
    \               break\n                }\n            }\n        }\n    }\n  \
    \  return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp3jh5mxwg.swift:15:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp3jh5mxwg.swift:17:42: error: 'characters' is unavailable:\
    \ Please use String directly\n            if index > 0 && index < word.characters.count\
    \ - 1 {\n                                         ^~~~~~~~~~\nSwift.String:5:16:\
    \ note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String\
    \ { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var closestVowel: String = \"\"\n    var closestIndex: Int\
    \ = 0\n    var index = 0\n    for letter in word.characters {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            if consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]).lowercased()) && consonants.contains(String(word[word.index(word.startIndex,\
    \ offsetBy: index + 1)]).lowercased()) {\n                if index > closestIndex\
    \ {\n                    closestVowel = String(letter)\n                    closestIndex\
    \ = index\n                }\n            }\n        }\n        index += 1\n \
    \   }\n    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmptuv24u0h.swift:18:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in word.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var vowel = \"\"\n    var index = 0\n    for char in word.characters.reversed()\
    \ {\n        if vowels.contains(String(char)) {\n            vowel = String(char)\n\
    \            break\n        }\n        index += 1\n    }\n    if vowel == \"\"\
    \ {\n        return \"\"\n    }\n    var consonant = \"\"\n    for char in word.characters.reversed()\
    \ {\n        if consonants.contains(String(char)) {\n            consonant = String(char)\n\
    \            break\n        }\n    }\n    if consonant == \"\" {\n        return\
    \ \"\"\n    }\n    if index == 0 {\n        return \"\"\n    }\n    return vowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpjbdr7u7l.swift:17:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpjbdr7u7l.swift:28:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters.reversed() {\n        \
    \             ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if vowels.contains(char) {\n         \
    \   var distance = 0\n            for (i, c) in word.enumerated() {\n        \
    \        if consonants.contains(c) {\n                    distance = abs(index\
    \ - i)\n                    break\n                }\n            }\n        \
    \    if distance < closestDistance {\n                closestDistance = distance\n\
    \                closestVowel = String(char)\n            }\n        }\n    }\n\
    \    return closestVowel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpq2_r9_m7/tmpq2_r9_m7.swift:48: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b5498189c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b5497e80b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b5497e80988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b5497e7f7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpq2_r9_m7                        0x000055cb08fb87b7 <unavailable> + 6071

    5    libc.so.6                          0x00002b5498375460 __libc_start_main +
    245

    6    tmpq2_r9_m7                        0x000055cb08fb83f9 <unavailable> + 5113

    '
  stdout: ''
  timestamp: 1660013390
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestVowelDistance = word.count\n    for (index, letter) in word.enumerated()\
    \ {\n        if vowels.contains(letter) {\n            var distance = 0\n    \
    \        for i in index..<word.count {\n                if vowels.contains(word[i])\
    \ {\n                    break\n                }\n                distance +=\
    \ 1\n            }\n            if distance < closestVowelDistance {\n       \
    \         closestVowelDistance = distance\n                closestVowel = String(letter)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmp0s3fr555.swift:20:36: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ vowels.contains(word[i]) {\n                                   ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var closestVowel = \"\"\
    \n    var closestDistance = word.count\n    for (index, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var distance = 0\n      \
    \      for i in index..<word.count {\n                if vowels.contains(word[i])\
    \ {\n                    break\n                }\n                distance +=\
    \ 1\n            }\n            if distance < closestDistance {\n            \
    \    closestDistance = distance\n                closestVowel = String(char)\n\
    \            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpchl16one.swift:20:36: error: 'subscript(_:)' is unavailable: cannot\
    \ subscript String with an Int, use a String.Index instead.\n                if\
    \ vowels.contains(word[i]) {\n                                   ^~~~~~~\nSwift.String:3:12:\
    \ note: 'subscript(_:)' has been explicitly marked unavailable here\n    public\
    \ subscript(i: Int) -> Character { get }\n           ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel: String = \"\"\n    var closestVowelIndex: Int = 0\n  \
    \  var closestConsonantIndex: Int = 0\n    var currentConsonantIndex: Int = 0\n\
    \    var currentVowelIndex: Int = 0\n    var currentVowel: String = \"\"\n   \
    \ var currentConsonant: String = \"\"\n    var currentDistance: Int = 0\n    var\
    \ closestDistance: Int = 0\n    for i in 0..<word.count {\n        let index =\
    \ word.index(word.startIndex, offsetBy: i)\n        let char = String(word[index])\n\
    \        if vowels.contains(char) {\n            currentVowel = char\n       \
    \     currentVowelIndex = i\n            if currentConsonantIndex != 0 {\n   \
    \             currentDistance = currentVowelIndex - currentConsonantIndex\n  \
    \              if closestVowelIndex == 0 {\n                    closestVowelIndex\
    \ = currentVowelIndex\n                    closestConsonantIndex = currentConsonantIndex\n\
    \                    closestVowel = currentVowel\n                    closestDistance\
    \ = currentDistance\n                } else {\n                    if currentDistance\
    \ < closestDistance {\n                        closestVowelIndex = currentVowelIndex\n\
    \                        closestConsonantIndex = currentConsonantIndex\n     \
    \                   closestVowel = currentVowel\n                        closestDistance\
    \ = currentDistance\n                    }\n                }\n            }\n\
    \        } else if consonants.contains(char) {\n            currentConsonant =\
    \ char\n            currentConsonantIndex = i\n        }\n    }\n    return closestVowel\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\n\
    assert(get_closest_vowel(word: \"full\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"easy\") == \"\")\nassert(get_closest_vowel(word: \"eAsy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ali\") == \"\")\nassert(get_closest_vowel(word: \"bad\") == \"a\")\nassert(get_closest_vowel(word:\
    \ \"most\") == \"o\")\nassert(get_closest_vowel(word: \"ab\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"ba\") == \"\")\nassert(get_closest_vowel(word: \"quick\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"anime\") == \"i\")\nassert(get_closest_vowel(word: \"Asia\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpyp4lcutd/tmpyp4lcutd.swift:68: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b128386fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b1283566b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b1283566988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b12835657b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpyp4lcutd                        0x0000555aef80a807 <unavailable> + 6151

    5    libc.so.6                          0x00002b1283a5b460 __libc_start_main +
    245

    6    tmpyp4lcutd                        0x0000555aef80a359 <unavailable> + 4953

    '
  stdout: ''
  timestamp: 1660013390
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var closest = Int.max\n    for (i, char) in word.enumerated()\
    \ {\n        if vowels.contains(char) {\n            var left = i - 1\n      \
    \      while left >= 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: left)]) {\n                left -= 1\n            }\n            var\
    \ right = i + 1\n            while right < word.count && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: right)]) {\n                right += 1\n            }\n          \
    \  if left >= 0 && right < word.count && right - left < closest {\n          \
    \      closest = right - left\n                result = String(char)\n       \
    \     }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpx_odwie0/tmpx_odwie0.swift:49: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b0dbb03fc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b0dbad36b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b0dbad36988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b0dbad357b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpx_odwie0                        0x00005645d46a77e7 <unavailable> + 6119

    5    libc.so.6                          0x00002b0dbb22b460 __libc_start_main +
    245

    6    tmpx_odwie0                        0x00005645d46a7429 <unavailable> + 5161

    '
  stdout: ''
  timestamp: 1660013390
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var lastVowel = \"\"\n    var lastConsonant\
    \ = \"\"\n    for char in word.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            lastVowel = String(char)\n        } else if consonants.contains(String(char))\
    \ {\n            lastConsonant = String(char)\n            if lastVowel != \"\"\
    \ {\n                result = lastVowel\n            }\n        }\n    }\n   \
    \ return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp3g8jrr21/tmp3g8jrr21.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002baa34417c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002baa3410eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002baa3410e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002baa3410d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp3g8jrr21                        0x0000561bdba55853 <unavailable> + 6227

    5    libc.so.6                          0x00002baa34603460 __libc_start_main +
    245

    6    tmp3g8jrr21                        0x0000561bdba55289 <unavailable> + 4745

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    var result = \"\"\n    var index = word.count - 1\n    while index >= 0 {\n\
    \        let char = String(word[word.index(word.startIndex, offsetBy: index)])\n\
    \        if vowels.contains(char) {\n            result = char\n            break\n\
    \        }\n        index -= 1\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp6c8wcxfw/tmp6c8wcxfw.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3da3f0ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3da3c01b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3da3c01988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3da3c007b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp6c8wcxfw                        0x0000556189d358a3 <unavailable> + 6307

    5    libc.so.6                          0x00002b3da40f6460 __libc_start_main +
    245

    6    tmp6c8wcxfw                        0x0000556189d352d9 <unavailable> + 4825

    '
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    var result = \"\"\n\
    \    var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpevxks2ul/tmpevxks2ul.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ab9a9cb8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ab9a99afb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ab9a99af988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ab9a99ae7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpevxks2ul                        0x0000556e8462f7e3 <unavailable> + 6115

    5    libc.so.6                          0x00002ab9a9ea4460 __libc_start_main +
    245

    6    tmpevxks2ul                        0x0000556e8462f219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013387
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    for (index, char) in word.characters.enumerated()\
    \ {\n        if vowels.contains(char) {\n            if index > 0 && consonants.contains(word[word.index(word.startIndex,\
    \ offsetBy: index - 1)]) {\n                if index < word.characters.count -\
    \ 1 && consonants.contains(word[word.index(word.startIndex, offsetBy: index +\
    \ 1)]) {\n                    result = String(char)\n                }\n     \
    \       }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpoi8g5x8p.swift:16:31: error: 'characters' is unavailable: Please\
    \ use String directly\n    for (index, char) in word.characters.enumerated() {\n\
    \                              ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpoi8g5x8p.swift:19:33: error: 'characters' is unavailable:\
    \ Please use String directly\n                if index < word.characters.count\
    \ - 1 && consonants.contains(word[word.index(word.startIndex, offsetBy: index\
    \ + 1)]) {\n                                ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var result = \"\"\n    var vowelIndex\
    \ = 0\n    var consonantIndex = 0\n    for i in word.indices {\n        if vowels.contains(word[i])\
    \ {\n            vowelIndex = word.distance(from: word.startIndex, to: i)\n  \
    \      }\n        if consonants.contains(word[i]) {\n            consonantIndex\
    \ = word.distance(from: word.startIndex, to: i)\n        }\n        if vowelIndex\
    \ > consonantIndex {\n            result = String(word[i])\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpdcjt78k7/tmpdcjt78k7.swift:46: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adbfb3f9c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adbfb0f0b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adbfb0f0988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adbfb0ef7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpdcjt78k7                        0x000056354f67d787 <unavailable> + 6023

    5    libc.so.6                          0x00002adbfb5e5460 __libc_start_main +
    245

    6    tmpdcjt78k7                        0x000056354f67d3c9 <unavailable> + 5065

    '
  stdout: ''
  timestamp: 1660013390
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    let consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var result = \"\"\n    var lastConsonant = \"\"\n    var\
    \ lastVowel = \"\"\n    for char in word.characters {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            lastVowel = String(char)\n        } else if consonants.contains(String(char).lowercased())\
    \ {\n            lastConsonant = String(char)\n        }\n        if lastConsonant\
    \ != \"\" && lastVowel != \"\" {\n            result = lastVowel\n           \
    \ break\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpp6m5ygpw.swift:18:22: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in word.characters {\n                   \
    \  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n\
    \    public var characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013387
- exit_code: 1
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiouAEIOU\"\n    let consonants = \"\
    bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    var result = \"\"\n    var lastVowel\
    \ = \"\"\n    for letter in word.characters {\n        if vowels.containsString(String(letter))\
    \ {\n            lastVowel = String(letter)\n        } else if consonants.containsString(String(letter))\
    \ && lastVowel != \"\" {\n            result = lastVowel\n            break\n\
    \        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: SyntaxError
  stderr: "/tmp/tmpn4oy7upv.swift:17:24: error: 'characters' is unavailable: Please\
    \ use String directly\n    for letter in word.characters {\n                 \
    \      ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift\
    \ 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpn4oy7upv.swift:18:19:\
    \ error: value of type 'String' has no member 'containsString'\n        if vowels.containsString(String(letter))\
    \ {\n           ~~~~~~ ^~~~~~~~~~~~~~\n/tmp/tmpn4oy7upv.swift:20:30: error: value\
    \ of type 'String' has no member 'containsString'\n        } else if consonants.containsString(String(letter))\
    \ && lastVowel != \"\" {\n                  ~~~~~~~~~~ ^~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013389
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpexx5vpix/tmpexx5vpix.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35a060bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35a0302b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35a0302988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35a03017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexx5vpix                        0x00005640f04967e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b35a07f7460 __libc_start_main +
    245

    6    tmpexx5vpix                        0x00005640f0496219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    var result = \"\"\n   \
    \ var index = word.count - 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpexx5vpix/tmpexx5vpix.swift:42: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b35a060bc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b35a0302b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b35a0302988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b35a03017b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpexx5vpix                        0x00005640f04967e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b35a07f7460 __libc_start_main +
    245

    6    tmpexx5vpix                        0x00005640f0496219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var closestVowel = \"\"\n    var closestDistance = word.count\n    for (index,\
    \ char) in word.enumerated() {\n        if consonants.contains(char) {\n     \
    \       for (index2, char2) in word.enumerated() {\n                if vowels.contains(char2)\
    \ {\n                    if index2 > index && index2 - index < closestDistance\
    \ {\n                        closestDistance = index2 - index\n              \
    \          closestVowel = String(char2)\n                    }\n             \
    \   }\n            }\n        }\n    }\n    return closestVowel\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(get_closest_vowel(word: \"yogurt\") == \"u\")\nassert(get_closest_vowel(word:\
    \ \"full\") == \"u\")\nassert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmp87creb45/tmp87creb45.swift:45: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b67b6928c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b67b661fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b67b661f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b67b661e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp87creb45                        0x0000560b3e4166c7 <unavailable> + 5831

    5    libc.so.6                          0x00002b67b6b14460 __libc_start_main +
    245

    6    tmp87creb45                        0x0000560b3e416309 <unavailable> + 4873

    '
  stdout: ''
  timestamp: 1660013388
- exit_code: -4
  program: "\n/// You are given a word. Your task is to find the closest vowel that\
    \ stands between \n/// two consonants from the right side of the word (case sensitive).\n\
    /// Vowels in the beginning and ending doesn't count. Return empty string if you\
    \ didn't\n/// find any vowel met the above condition. \n/// You may assume that\
    \ the given string contains English letter only.\n/// Example:\n/// get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n/// get_closest_vowel(\"FULL\") ==> \"U\"\n/// get_closest_vowel(\"\
    quick\") ==> \"\"\n/// get_closest_vowel(\"ab\") ==> \"\"\nfunc get_closest_vowel(word:\
    \ String) -> String {\n    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var result = \"\"\n    var index = word.count - 1\n    while index >= 0\
    \ {\n        let char = word[word.index(word.startIndex, offsetBy: index)]\n \
    \       if consonants.contains(char) {\n            break\n        }\n       \
    \ index -= 1\n    }\n    if index < 0 {\n        return result\n    }\n    index\
    \ -= 1\n    while index >= 0 {\n        let char = word[word.index(word.startIndex,\
    \ offsetBy: index)]\n        if vowels.contains(char) {\n            result =\
    \ String(char)\n            break\n        }\n        index -= 1\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(get_closest_vowel(word:\
    \ \"yogurt\") == \"u\")\nassert(get_closest_vowel(word: \"full\") == \"u\")\n\
    assert(get_closest_vowel(word: \"easy\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"eAsy\") == \"\")\nassert(get_closest_vowel(word: \"ali\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"bad\") == \"a\")\nassert(get_closest_vowel(word: \"most\") == \"o\")\nassert(get_closest_vowel(word:\
    \ \"ab\") == \"\")\nassert(get_closest_vowel(word: \"ba\") == \"\")\nassert(get_closest_vowel(word:\
    \ \"quick\") == \"\")\nassert(get_closest_vowel(word: \"anime\") == \"i\")\nassert(get_closest_vowel(word:\
    \ \"Asia\") == \"\")\nassert(get_closest_vowel(word: \"Above\") == \"o\")"
  status: Exception
  stderr: 'tmpnaeczxl0/tmpnaeczxl0.swift:54: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b6e9cc4ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b6e9c941b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b6e9c941988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b6e9c9407b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpnaeczxl0                        0x000055893ffd57e3 <unavailable> + 6115

    5    libc.so.6                          0x00002b6e9ce36460 __libc_start_main +
    245

    6    tmpnaeczxl0                        0x000055893ffd5219 <unavailable> + 4633

    '
  stdout: ''
  timestamp: 1660013390
