language: swift
name: HumanEval_47_median
results:
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        let mid = count / 2\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let n = sorted.count\n\
    \    if n % 2 == 0 {\n        return Double(sorted[n / 2] + sorted[n / 2 - 1])\
    \ / 2\n    } else {\n        return Double(sorted[n / 2])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let n = sorted.count\n\
    \    if n % 2 == 0 {\n        return Double(sorted[n / 2] + sorted[n / 2 - 1])\
    \ / 2\n    } else {\n        return Double(sorted[n / 2])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    let mid =\
    \ sortedList.count / 2\n    if sortedList.count % 2 == 0 {\n        return Double(sortedList[mid]\
    \ + sortedList[mid - 1]) / 2\n    } else {\n        return Double(sortedList[mid])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[sorted.count / 2] + sorted[sorted.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        let a = sorted[count / 2 - 1]\n        let b\
    \ = sorted[count / 2]\n        return Double(a + b) / 2\n    } else {\n      \
    \  return Double(sorted[count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[sorted.count / 2] + sorted[sorted.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = l.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    let mid = count / 2\n    if count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[sorted.count / 2] + sorted[sorted.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let n = sorted.count\n\
    \    if n % 2 == 0 {\n        return Double(sorted[n / 2] + sorted[n / 2 - 1])\
    \ / 2\n    } else {\n        return Double(sorted[n / 2])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    let midIndex\
    \ = sortedList.count / 2\n    if sortedList.count % 2 == 0 {\n        return Double(sortedList[midIndex]\
    \ + sortedList[midIndex - 1]) / 2\n    } else {\n        return Double(sortedList[midIndex])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid - 1] +\
    \ sorted[mid]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        let left = sorted[count / 2 - 1]\n        let\
    \ right = sorted[count / 2]\n        return Double(left + right) / 2\n    } else\
    \ {\n        return Double(sorted[count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        let left = sorted[mid - 1]\n  \
    \      let right = sorted[mid]\n        return Double(left + right) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    let mid =\
    \ sortedList.count / 2\n    if sortedList.count % 2 == 0 {\n        return Double(sortedList[mid]\
    \ + sortedList[mid - 1]) / 2\n    } else {\n        return Double(sortedList[mid])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid-1])\
    \ / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        let left = sorted[count / 2 - 1]\n        let\
    \ right = sorted[count / 2]\n        return Double(left + right) / 2\n    } else\
    \ {\n        return Double(sorted[count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid - 1] +\
    \ sorted[mid]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    let mid =\
    \ sortedList.count / 2\n    if sortedList.count % 2 == 0 {\n        return Double(sortedList[mid]\
    \ + sortedList[mid - 1]) / 2\n    } else {\n        return Double(sortedList[mid])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let n = sorted.count\n\
    \    if n % 2 == 0 {\n        return Double(sorted[n / 2] + sorted[n / 2 - 1])\
    \ / 2\n    } else {\n        return Double(sorted[n / 2])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[sorted.count / 2] + sorted[sorted.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    let mid = count / 2\n    if count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[sorted.count / 2] + sorted[sorted.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        let mid = count / 2\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let n = sorted.count\n\
    \    if n % 2 == 0 {\n        return Double(sorted[n / 2] + sorted[n / 2 - 1])\
    \ / 2\n    } else {\n        return Double(sorted[n / 2])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        let mid = count / 2\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let n = sorted.count\n\
    \    if n % 2 == 0 {\n        return Double(sorted[n / 2] + sorted[n / 2 - 1])\
    \ / 2\n    } else {\n        return Double(sorted[n / 2])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    let mid =\
    \ sortedList.count / 2\n    if sortedList.count % 2 == 0 {\n        return Double(sortedList[mid]\
    \ + sortedList[mid - 1]) / 2\n    } else {\n        return Double(sortedList[mid])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    let mid = count / 2\n    if count % 2 == 0 {\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n \
    \   }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n    }\n\
    \    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid - 1] +\
    \ sorted[mid]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    return 0.0\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\n\
    assert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmpgam5g_hj/tmpgam5g_hj.swift:24: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b3edf2a8c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b3edef9fb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b3edef9f988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b3edef9e7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpgam5g_hj                        0x00005585b0026321 <unavailable> + 4897

    5    libc.so.6                          0x00002b3edf494460 __libc_start_main +
    245

    6    tmpgam5g_hj                        0x00005585b0025f69 <unavailable> + 3945

    '
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n    }\n\
    \    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid - 1] + sorted[mid]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let n = sorted.count\n\
    \    if n % 2 == 0 {\n        return Double(sorted[n / 2] + sorted[n / 2 - 1])\
    \ / 2\n    } else {\n        return Double(sorted[n / 2])\n    }\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: -4
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    if l.count % 2 == 0 {\n        return Double(l[l.count\
    \ / 2] + l[l.count / 2 - 1]) / 2\n    } else {\n        return Double(l[l.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: Exception
  stderr: 'tmp619ufl9m/tmp619ufl9m.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b659c1ddc80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b659bed4b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b659bed4988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b659bed37b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp619ufl9m                        0x000055b759873471 <unavailable> + 5233

    5    libc.so.6                          0x00002b659c3c9460 __libc_start_main +
    245

    6    tmp619ufl9m                        0x000055b7598730b9 <unavailable> + 4281

    '
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        let mid = count / 2\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    if l.count == 0 {\n        return 0\n    }\n\
    \    let sorted = l.sorted()\n    let mid = sorted.count / 2\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid - 1]) / 2\n    }\
    \ else {\n        return Double(sorted[mid])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let middle =\
    \ sorted.count / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[middle]\
    \ + sorted[middle - 1]) / 2\n    } else {\n        return Double(sorted[middle])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[sorted.count / 2] + sorted[sorted.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sortedList = l.sorted()\n    if sortedList.count\
    \ % 2 == 0 {\n        let mid = sortedList.count / 2\n        return Double(sortedList[mid]\
    \ + sortedList[mid - 1]) / 2\n    } else {\n        let mid = sortedList.count\
    \ / 2\n        return Double(sortedList[mid])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        let mid = sorted.count / 2\n        return Double(sorted[mid\
    \ - 1] + sorted[mid]) / 2\n    } else {\n        return Double(sorted[sorted.count\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        let mid = count / 2\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid - 1] +\
    \ sorted[mid]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        let left = sorted[count / 2 - 1]\n        let\
    \ right = sorted[count / 2]\n        return Double(left + right) / 2\n    } else\
    \ {\n        return Double(sorted[count / 2])\n    }\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l: [-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let length =\
    \ sorted.count\n    if length % 2 == 0 {\n        return Double(sorted[length\
    \ / 2] + sorted[length / 2 - 1]) / 2\n    } else {\n        return Double(sorted[length\
    \ / 2])\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2,\
    \ 4, 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        return Double(sorted[count / 2] + sorted[count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    if sorted.count\
    \ % 2 == 0 {\n        return Double(sorted[sorted.count / 2] + sorted[sorted.count\
    \ / 2 - 1]) / 2\n    } else {\n        return Double(sorted[sorted.count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let count = sorted.count\n\
    \    if count % 2 == 0 {\n        let mid = count / 2\n        return Double(sorted[mid]\
    \ + sorted[mid - 1]) / 2\n    } else {\n        return Double(sorted[count / 2])\n\
    \    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n  \
    \  if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(median(l: [3, 1, 2, 4,\
    \ 5]) == 3)\nassert(median(l: [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l:\
    \ [5]) == 5)\nassert(median(l: [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9,\
    \ 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid - 1] +\
    \ sorted[mid]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
- exit_code: 0
  program: "\n/// Return median of elements in the list l.\n/// >>> median([3, 1,\
    \ 2, 4, 5])\n/// 3\n/// >>> median([-10, 4, 6, 1000, 10, 20])\n/// 15.0\nfunc\
    \ median(l: [Int]) -> Double {\n    let sorted = l.sorted()\n    let mid = sorted.count\
    \ / 2\n    if sorted.count % 2 == 0 {\n        return Double(sorted[mid] + sorted[mid\
    \ - 1]) / 2\n    } else {\n        return Double(sorted[mid])\n    }\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(median(l: [3, 1, 2, 4, 5]) == 3)\nassert(median(l:\
    \ [-10, 4, 6, 1000, 10, 20]) == 8.0)\nassert(median(l: [5]) == 5)\nassert(median(l:\
    \ [6, 5]) == 5.5)\nassert(median(l: [8, 1, 3, 9, 9, 2, 7]) == 7)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824335
