language: swift
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    let sortedWords = words.map\
    \ { String($0.sorted()) }\n    return sortedWords.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpaxdaysmj.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += String(word.sorted()) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0aqhppf4.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().map {\
    \ String($0) }.joined()\n            result += \" \"\n            word = \"\"\n\
    \        } else {\n            word += String(c)\n        }\n    }\n    result\
    \ += word.characters.sorted().map { String($0) }.joined()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpc4rohp22.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpc4rohp22.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().map { String($0) }.joined()\n           \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpc4rohp22.swift:23:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    result += word.characters.sorted().map { String($0)\
    \ }.joined()\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map { $0.sorted() }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpulno3yu_.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { $0.sorted()\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word\n            result += \"\
    \ \"\n            word = \"\"\n        } else {\n            word += String(c)\n\
    \            word = String(word.characters.sorted())\n        }\n    }\n    result\
    \ += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpdtgiwx69.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpdtgiwx69.swift:21:32:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ word = String(word.characters.sorted())\n                               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().map\
    \ { String($0) }.joined()\n            result += \" \"\n            word = \"\"\
    \n        } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.characters.sorted().map { String($0) }.joined()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp9rt1fd1r.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9rt1fd1r.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().map { String($0) }.joined()\n           \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp9rt1fd1r.swift:23:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    result += word.characters.sorted().map { String($0)\
    \ }.joined()\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().map{String($0)}.joined(separator:\
    \ \"\") + \" \"\n            word = \"\"\n        } else {\n            word +=\
    \ String(c)\n        }\n    }\n    result += word.characters.sorted().map{String($0)}.joined(separator:\
    \ \"\")\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpjs2_7mxy.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpjs2_7mxy.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().map{String($0)}.joined(separator: \"\") +\
    \ \" \"\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpjs2_7mxy.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().map{String($0)}.joined(separator:\
    \ \"\")\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let sortedWord = String(word.sorted())\n   \
    \     result += sortedWord + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7y_581ta.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmp7y_581ta.swift:18:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7y_581ta.swift:18:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        let sortedWord = String(word.sorted())\n   \
    \     result += sortedWord + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpk51susir.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpk51susir.swift:18:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpk51susir.swift:18:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", +)\n            result += \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(char)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", +)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpagjkrs86.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpagjkrs86.swift:16:59:\
    \ error: no exact matches in reference to operator function '+'\n            result\
    \ += word.characters.sorted().reduce(\"\", +)\n                              \
    \                            ^\nSwift.RangeReplaceableCollection:2:35: note: candidate\
    \ requires that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement\
    \ specified as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs:\
    \ Self, rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self where Other : RangeReplaceableCollection,\
    \ Self.Element == Other.Element\n                                  ^\n/tmp/tmpagjkrs86.swift:23:51:\
    \ error: no exact matches in reference to operator function '+'\n    result +=\
    \ word.characters.sorted().reduce(\"\", +)\n                                 \
    \                 ^\nSwift.RangeReplaceableCollection:2:35: note: candidate requires\
    \ that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement specified\
    \ as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs: Self,\
    \ rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self w"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().map\
    \ { String($0) }.joined()\n            result += \" \"\n            word = \"\"\
    \n        } else {\n            word += String(char)\n        }\n    }\n    result\
    \ += word.characters.sorted().map { String($0) }.joined()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp9rt1fd1r.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp9rt1fd1r.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().map { String($0) }.joined()\n           \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmp9rt1fd1r.swift:23:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    result += word.characters.sorted().map { String($0)\
    \ }.joined()\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word + \" \"\n        \
    \    word = \"\"\n        } else {\n            word += String(char)\n       \
    \ }\n    }\n    result += word\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpnpuzy4jb.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map { $0.sorted() }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpulno3yu_.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { $0.sorted()\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map { $0.sorted() }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpulno3yu_.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { $0.sorted()\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        result += String(word.sorted()) + \" \"\n  \
    \  }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpw7yw8q7l.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(char)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5gw7cog9.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5gw7cog9.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5gw7cog9.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map { $0.sorted() }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpulno3yu_.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { $0.sorted()\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) }) + \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpy2hvf5o0.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpy2hvf5o0.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", { $0 + String($1) }) + \" \"\
    \n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy2hvf5o0.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) })\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        let sortedWord = String(word.sorted())\n        result += sortedWord\
    \ + \" \"\n    }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmput_otq0t.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n/tmp/tmput_otq0t.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmput_otq0t.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            if word != \"\" {\n                result\
    \ += String(word.characters.sorted())\n                word = \"\"\n         \
    \   }\n            result += \" \"\n        } else {\n            word += String(c)\n\
    \        }\n    }\n    if word != \"\" {\n        result += String(word.characters.sorted())\n\
    \    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5oorh69j.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5oorh69j.swift:17:39:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \     result += String(word.characters.sorted())\n                           \
    \           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in\
    \ Swift 5.0\n    public var characters: String { get set }\n               ^\n\
    /tmp/tmp5oorh69j.swift:26:31: error: 'characters' is unavailable: Please use String\
    \ directly\n        result += String(word.characters.sorted())\n             \
    \                 ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        let chars = Array(word.characters)\n       \
    \ let sortedChars = chars.sorted(by: {$0 < $1})\n        result += String(sortedChars)\
    \ + \" \"\n    }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp911jnhum.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmp911jnhum.swift:19:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp911jnhum.swift:19:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s {\n       \
    \ if char == \" \" {\n            result += word + \" \"\n            word = \"\
    \"\n        } else {\n            word += String(char)\n        }\n    }\n   \
    \ result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: Exception
  stderr: 'tmpr9gma32p/tmpr9gma32p.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc9bb5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc9b851b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc9b851988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc9b8507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9gma32p                        0x00005604e48f8697 <unavailable> + 5783

    5    libc.so.6                          0x00002adc9bd46460 __libc_start_main +
    245

    6    tmpr9gma32p                        0x00005604e48f81e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += String(word.sorted()) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0aqhppf4.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s {\n       \
    \ if char == \" \" {\n            result += word.sorted()\n            result\
    \ += \" \"\n            word = \"\"\n        } else {\n            word += String(char)\n\
    \        }\n    }\n    result += word.sorted()\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3yt4r_t.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd3yt4r_t.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd3yt4r_t.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        result += String(word.sorted()) + \" \"\n  \
    \  }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpw7yw8q7l.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        var chars = Array(word.characters)\n        chars.sort { $0 < $1 }\n\
    \        result += String(chars) + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvo7jsvw9.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n/tmp/tmpvo7jsvw9.swift:18:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpvo7jsvw9.swift:18:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s {\n       \
    \ if char == \" \" {\n            result += word.sorted()\n            result\
    \ += \" \"\n            word = \"\"\n        } else {\n            word += String(char)\n\
    \        }\n    }\n    result += word.sorted()\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) }) + \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpy2hvf5o0.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpy2hvf5o0.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", { $0 + String($1) }) + \" \"\
    \n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy2hvf5o0.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) })\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let sortedWord = String(word.sorted())\n   \
    \     result += sortedWord + \" \"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvfm_dn2c.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let arr = s.components(separatedBy: \" \")\n    var result = \"\"\n \
    \   for i in arr {\n        result += String(i.sorted()) + \" \"\n    }\n    return\
    \ result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpb9___7pe.swift:12:17: error: value of type 'String' has no member\
    \ 'components'\n    let arr = s.components(separatedBy: \" \")\n             \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        let sorted = String(word.sorted())\n       \
    \ result += sorted\n        result += \" \"\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp33s9ltyt.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map {\n        $0.characters.sorted().map\
    \ { String($0) }.joined()\n    }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp98wxoxgn.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map {\n          \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        result += String(word.sorted()) + \" \"\n  \
    \  }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpw7yw8q7l.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3yt4r_t.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd3yt4r_t.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd3yt4r_t.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map {\n        $0.characters.sorted().map\
    \ { String($0) }.joined()\n    }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp98wxoxgn.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map {\n          \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        let sortedWord = String(word.sorted())\n        result += sortedWord\
    \ + \" \"\n    }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmput_otq0t.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n/tmp/tmput_otq0t.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmput_otq0t.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += String(word.sorted()) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0aqhppf4.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3yt4r_t.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd3yt4r_t.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd3yt4r_t.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map { $0.sorted() }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpulno3yu_.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { $0.sorted()\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        var chars = Array(word.characters)\n       \
    \ chars.sort()\n        result += String(chars) + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpu9u6wjkm.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpu9u6wjkm.swift:19:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpu9u6wjkm.swift:19:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        result += String(word.sorted()) + \" \"\n  \
    \  }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpw7yw8q7l.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        let sortedWord = String(word.sorted())\n   \
    \     result += sortedWord + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpk51susir.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpk51susir.swift:18:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpk51susir.swift:18:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        result += String(word.sorted()) + \" \"\n  \
    \  }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpw7yw8q7l.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += String(word.sorted()) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0aqhppf4.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map {\n        $0.characters.sorted().map\
    \ { String($0) }.joined()\n    }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp98wxoxgn.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map {\n          \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) }) + \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpy2hvf5o0.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpy2hvf5o0.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", { $0 + String($1) }) + \" \"\
    \n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy2hvf5o0.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) })\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3yt4r_t.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd3yt4r_t.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd3yt4r_t.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        let sortedWord = String(word.sorted())\n   \
    \     result += sortedWord + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpk51susir.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpk51susir.swift:18:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpk51susir.swift:18:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", +)\n            result += \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(char)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", +)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpagjkrs86.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpagjkrs86.swift:16:59:\
    \ error: no exact matches in reference to operator function '+'\n            result\
    \ += word.characters.sorted().reduce(\"\", +)\n                              \
    \                            ^\nSwift.RangeReplaceableCollection:2:35: note: candidate\
    \ requires that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement\
    \ specified as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs:\
    \ Self, rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self where Other : RangeReplaceableCollection,\
    \ Self.Element == Other.Element\n                                  ^\n/tmp/tmpagjkrs86.swift:23:51:\
    \ error: no exact matches in reference to operator function '+'\n    result +=\
    \ word.characters.sorted().reduce(\"\", +)\n                                 \
    \                 ^\nSwift.RangeReplaceableCollection:2:35: note: candidate requires\
    \ that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement specified\
    \ as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs: Self,\
    \ rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self w"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", +)\n            result += \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(char)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", +)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpagjkrs86.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpagjkrs86.swift:16:59:\
    \ error: no exact matches in reference to operator function '+'\n            result\
    \ += word.characters.sorted().reduce(\"\", +)\n                              \
    \                            ^\nSwift.RangeReplaceableCollection:2:35: note: candidate\
    \ requires that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement\
    \ specified as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs:\
    \ Self, rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self where Other : RangeReplaceableCollection,\
    \ Self.Element == Other.Element\n                                  ^\n/tmp/tmpagjkrs86.swift:23:51:\
    \ error: no exact matches in reference to operator function '+'\n    result +=\
    \ word.characters.sorted().reduce(\"\", +)\n                                 \
    \                 ^\nSwift.RangeReplaceableCollection:2:35: note: candidate requires\
    \ that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement specified\
    \ as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs: Self,\
    \ rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self w"
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += String(word.sorted()) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0aqhppf4.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let chars = Array(word.characters)\n       \
    \ let sortedChars = chars.sorted(by: {$0 < $1})\n        result += String(sortedChars)\
    \ + \" \"\n    }\n    return result.trimmingCharacters(in: CharacterSet.whitespaces)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpbx72kxl2.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpbx72kxl2.swift:19:42: error: cannot find 'CharacterSet'\
    \ in scope\n    return result.trimmingCharacters(in: CharacterSet.whitespaces)\n\
    \                                         ^~~~~~~~~~~~\n/tmp/tmpbx72kxl2.swift:19:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: CharacterSet.whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        var chars = Array(word.characters)\n        chars.sort()\n        result\
    \ += String(chars) + \" \"\n    }\n    return result.trimmingCharacters(in: .whitespaces)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp3p9r6lgg.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n/tmp/tmp3p9r6lgg.swift:18:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3p9r6lgg.swift:18:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        var chars = Array(word.characters)\n       \
    \ chars.sort()\n        result += String(chars) + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpu9u6wjkm.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpu9u6wjkm.swift:19:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpu9u6wjkm.swift:19:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        let sortedWord = String(word.sorted())\n        result += sortedWord\
    \ + \" \"\n    }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmput_otq0t.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n/tmp/tmput_otq0t.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmput_otq0t.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3yt4r_t.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd3yt4r_t.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd3yt4r_t.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", combine: { $0 + String($1) }) + \" \"\n            word = \"\"\n        }\
    \ else {\n            word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", combine: { $0 + String($1) })\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpbw74uvre.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbw74uvre.swift:16:54:\
    \ error: extraneous argument label 'combine:' in call\n            result += word.characters.sorted().reduce(\"\
    \", combine: { $0 + String($1) }) + \" \"\n                                  \
    \                   ^    ~~~~~~~~~\n                                         \
    \                 \n/tmp/tmpbw74uvre.swift:22:46: error: extraneous argument label\
    \ 'combine:' in call\n    result += word.characters.sorted().reduce(\"\", combine:\
    \ { $0 + String($1) })\n                                             ^    ~~~~~~~~~\n\
    \                                                  \n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += String(word.sorted()) + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprepcd162.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n/tmp/tmprepcd162.swift:16:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmprepcd162.swift:16:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        let sorted = word.sorted()\n        result += sorted.joined() + \" \"\
    \n    }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpibjsptgy.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n/tmp/tmpibjsptgy.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpibjsptgy.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += String(word.sorted()) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0aqhppf4.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", +)\n            result += \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", +)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvkat7pyu.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpvkat7pyu.swift:16:59:\
    \ error: no exact matches in reference to operator function '+'\n            result\
    \ += word.characters.sorted().reduce(\"\", +)\n                              \
    \                            ^\nSwift.RangeReplaceableCollection:2:35: note: candidate\
    \ requires that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement\
    \ specified as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs:\
    \ Self, rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self where Other : RangeReplaceableCollection,\
    \ Self.Element == Other.Element\n                                  ^\n/tmp/tmpvkat7pyu.swift:23:51:\
    \ error: no exact matches in reference to operator function '+'\n    result +=\
    \ word.characters.sorted().reduce(\"\", +)\n                                 \
    \                 ^\nSwift.RangeReplaceableCollection:2:35: note: candidate requires\
    \ that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement specified\
    \ as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs: Self,\
    \ rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self where O"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s {\n       \
    \ if char == \" \" {\n            result += word.sorted()\n            result\
    \ += \" \"\n            word = \"\"\n        } else {\n            word += String(char)\n\
    \        }\n    }\n    result += word.sorted()\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let sortedWord = String(word.sorted())\n   \
    \     result += sortedWord + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7y_581ta.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmp7y_581ta.swift:18:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7y_581ta.swift:18:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += String(word.sorted()) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0aqhppf4.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map {\n        String($0.sorted())\n\
    \    }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += String(word.sorted()) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0aqhppf4.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s {\n       \
    \ if char == \" \" {\n            result += word.sorted()\n            result\
    \ += \" \"\n            word = \"\"\n        } else {\n            word += String(char)\n\
    \        }\n    }\n    result += word.sorted()\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += String(word.sorted()) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0aqhppf4.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s {\n       \
    \ if char == \" \" {\n            result += word + \" \"\n            word = \"\
    \"\n        } else {\n            word += String(char)\n        }\n    }\n   \
    \ result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: Exception
  stderr: 'tmpr9gma32p/tmpr9gma32p.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc9bb5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc9b851b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc9b851988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc9b8507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9gma32p                        0x00005604e48f8697 <unavailable> + 5783

    5    libc.so.6                          0x00002adc9bd46460 __libc_start_main +
    245

    6    tmpr9gma32p                        0x00005604e48f81e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4rpnhb7a.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { String($0.sorted())\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        let sorted = word.sorted()\n        result += String(sorted) + \" \"\n\
    \    }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpgeznwjtn.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n/tmp/tmpgeznwjtn.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpgeznwjtn.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map { $0.sorted() }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpulno3yu_.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { $0.sorted()\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4rpnhb7a.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { String($0.sorted())\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s {\n       \
    \ if char == \" \" {\n            result += word + \" \"\n            word = \"\
    \"\n        } else {\n            word += String(char)\n        }\n    }\n   \
    \ result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: Exception
  stderr: 'tmpr9gma32p/tmpr9gma32p.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc9bb5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc9b851b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc9b851988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc9b8507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9gma32p                        0x00005604e48f8697 <unavailable> + 5783

    5    libc.so.6                          0x00002adc9bd46460 __libc_start_main +
    245

    6    tmpr9gma32p                        0x00005604e48f81e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map { $0.sorted() }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpulno3yu_.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { $0.sorted()\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        result += String(word.sorted()) + \" \"\n  \
    \  }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmph404oehd.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmph404oehd.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmph404oehd.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let sortedWord = String(word.sorted())\n   \
    \     result += sortedWord + \" \"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvfm_dn2c.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        var chars = Array(word.characters)\n        chars.sort()\n        result\
    \ += String(chars) + \" \"\n    }\n    return result.trimmingCharacters(in: .whitespaces)\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp3p9r6lgg.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n/tmp/tmp3p9r6lgg.swift:18:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp3p9r6lgg.swift:18:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let sortedWord = String(word.sorted())\n   \
    \     result += sortedWord + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7y_581ta.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmp7y_581ta.swift:18:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7y_581ta.swift:18:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map { $0.sorted() }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpulno3yu_.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { $0.sorted()\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3yt4r_t.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd3yt4r_t.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd3yt4r_t.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += String(word.sorted()) + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprepcd162.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n/tmp/tmprepcd162.swift:16:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmprepcd162.swift:16:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += String(word.sorted()) + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmprepcd162.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n/tmp/tmprepcd162.swift:16:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmprepcd162.swift:16:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(char)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5gw7cog9.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5gw7cog9.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5gw7cog9.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    let sortedWords = words.map\
    \ { (word) -> String in\n        let sortedChars = word.characters.sorted { (char1,\
    \ char2) -> Bool in\n            return char1 < char2\n        }\n        return\
    \ String(sortedChars)\n    }\n    return sortedWords.joined(separator: \" \")\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpwlly9sp6.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3yt4r_t.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd3yt4r_t.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd3yt4r_t.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        var chars = Array(word.characters)\n       \
    \ chars.sort()\n        result += String(chars) + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpu9u6wjkm.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpu9u6wjkm.swift:19:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpu9u6wjkm.swift:19:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    let sortedWords = words.map\
    \ { $0.sorted() }\n    var result = \"\"\n    for i in 0..<words.count {\n   \
    \     result += sortedWords[i].joined()\n        if i < words.count - 1 {\n  \
    \          result += \" \"\n        }\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplf99tfnr.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().map{String($0)}.joined(separator:\
    \ \"\") + \" \"\n            word = \"\"\n        } else {\n            word +=\
    \ String(char)\n        }\n    }\n    result += word.characters.sorted().map{String($0)}.joined(separator:\
    \ \"\")\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5in7d39u.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5in7d39u.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().map{String($0)}.joined(separator: \"\") +\
    \ \" \"\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5in7d39u.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().map{String($0)}.joined(separator:\
    \ \"\")\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(char)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5gw7cog9.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5gw7cog9.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5gw7cog9.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", +)\n            result += \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", +)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvkat7pyu.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpvkat7pyu.swift:16:59:\
    \ error: no exact matches in reference to operator function '+'\n            result\
    \ += word.characters.sorted().reduce(\"\", +)\n                              \
    \                            ^\nSwift.RangeReplaceableCollection:2:35: note: candidate\
    \ requires that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement\
    \ specified as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs:\
    \ Self, rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self where Other : RangeReplaceableCollection,\
    \ Self.Element == Other.Element\n                                  ^\n/tmp/tmpvkat7pyu.swift:23:51:\
    \ error: no exact matches in reference to operator function '+'\n    result +=\
    \ word.characters.sorted().reduce(\"\", +)\n                                 \
    \                 ^\nSwift.RangeReplaceableCollection:2:35: note: candidate requires\
    \ that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement specified\
    \ as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs: Self,\
    \ rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self where O"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", +)\n            result += \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", +)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvkat7pyu.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpvkat7pyu.swift:16:59:\
    \ error: no exact matches in reference to operator function '+'\n            result\
    \ += word.characters.sorted().reduce(\"\", +)\n                              \
    \                            ^\nSwift.RangeReplaceableCollection:2:35: note: candidate\
    \ requires that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement\
    \ specified as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs:\
    \ Self, rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self where Other : RangeReplaceableCollection,\
    \ Self.Element == Other.Element\n                                  ^\n/tmp/tmpvkat7pyu.swift:23:51:\
    \ error: no exact matches in reference to operator function '+'\n    result +=\
    \ word.characters.sorted().reduce(\"\", +)\n                                 \
    \                 ^\nSwift.RangeReplaceableCollection:2:35: note: candidate requires\
    \ that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement specified\
    \ as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs: Self,\
    \ rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self where O"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map {\n        String($0.sorted())\n\
    \    }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpg19ua63r.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map {\n          \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map {\n        $0.characters.sorted().map\
    \ { String($0) }.joined()\n    }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp98wxoxgn.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map {\n          \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) }) + \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpy2hvf5o0.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpy2hvf5o0.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", { $0 + String($1) }) + \" \"\
    \n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy2hvf5o0.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) })\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp4rpnhb7a.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map { String($0.sorted())\
    \ }.joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        let sorted = String(word.sorted())\n        result += sorted\n      \
    \  result += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpqfx_jc7p.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().map {\
    \ String($0) }.joined()\n            result += \" \"\n            word = \"\"\n\
    \        } else {\n            word += String(c)\n        }\n    }\n    result\
    \ += word.characters.sorted().map { String($0) }.joined()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpc4rohp22.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpc4rohp22.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().map { String($0) }.joined()\n           \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpc4rohp22.swift:23:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    result += word.characters.sorted().map { String($0)\
    \ }.joined()\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let chars = Array(word.characters)\n       \
    \ let sortedChars = chars.sorted(by: { $0 < $1 })\n        let sortedWord = String(sortedChars)\n\
    \        result += sortedWord + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp6u0dwwdl.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmp6u0dwwdl.swift:20:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp6u0dwwdl.swift:20:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().map{String($0)}.joined(separator:\
    \ \"\") + \" \"\n            word = \"\"\n        } else {\n            word +=\
    \ String(char)\n        }\n    }\n    result += word.characters.sorted().map{String($0)}.joined(separator:\
    \ \"\")\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5in7d39u.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5in7d39u.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().map{String($0)}.joined(separator: \"\") +\
    \ \" \"\n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5in7d39u.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().map{String($0)}.joined(separator:\
    \ \"\")\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3yt4r_t.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd3yt4r_t.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd3yt4r_t.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        let sortedWord = String(word.sorted())\n        result += sortedWord\
    \ + \" \"\n    }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmput_otq0t.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n/tmp/tmput_otq0t.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmput_otq0t.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) }) + \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) })\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpy2hvf5o0.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpy2hvf5o0.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", { $0 + String($1) }) + \" \"\
    \n                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpy2hvf5o0.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", { $0 + String($1) })\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        let sortedWord = String(word.sorted())\n   \
    \     result += sortedWord + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpk51susir.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpk51susir.swift:18:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpk51susir.swift:18:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().map {\
    \ String($0) }.joined()\n            result += \" \"\n            word = \"\"\n\
    \        } else {\n            word += String(c)\n        }\n    }\n    result\
    \ += word.characters.sorted().map { String($0) }.joined()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpc4rohp22.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpc4rohp22.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().map { String($0) }.joined()\n           \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpc4rohp22.swift:23:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    result += word.characters.sorted().map { String($0)\
    \ }.joined()\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += String(word.sorted()) + \" \"\n    }\n    return String(result.dropLast())\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp0aqhppf4.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        result += String(word.sorted()) + \" \"\n  \
    \  }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpw7yw8q7l.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().map {\
    \ String($0) }.joined()\n            result += \" \"\n            word = \"\"\n\
    \        } else {\n            word += String(c)\n        }\n    }\n    result\
    \ += word.characters.sorted().map { String($0) }.joined()\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpc4rohp22.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpc4rohp22.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().map { String($0) }.joined()\n           \
    \                ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted\
    \ in Swift 5.0\n    public var characters: String { get set }\n              \
    \ ^\n/tmp/tmpc4rohp22.swift:23:20: error: 'characters' is unavailable: Please\
    \ use String directly\n    result += word.characters.sorted().map { String($0)\
    \ }.joined()\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s {\n       \
    \ if char == \" \" {\n            result += word.sorted()\n            result\
    \ += \" \"\n            word = \"\"\n        } else {\n            word += String(char)\n\
    \        }\n    }\n    result += word.sorted()\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map {\n        String($0.sorted())\n\
    \    }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s {\n       \
    \ if char == \" \" {\n            result += word.sorted()\n            result\
    \ += \" \"\n            word = \"\"\n        } else {\n            word += String(char)\n\
    \        }\n    }\n    result += word.sorted()\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let chars = Array(word)\n        let sorted\
    \ = chars.sorted(by: { $0 < $1 })\n        result += String(sorted) + \" \"\n\
    \    }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmphn0ykv_m.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmphn0ykv_m.swift:19:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmphn0ykv_m.swift:19:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s {\n       \
    \ if char == \" \" {\n            result += word.sorted()\n            result\
    \ += \" \"\n            word = \"\"\n        } else {\n            word += String(char)\n\
    \        }\n    }\n    result += word.sorted()\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        var chars = Array(word.characters)\n       \
    \ chars.sort(by: {$0 < $1})\n        result += String(chars) + \" \"\n    }\n\
    \    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpfbpva0yt.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    var words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpfbpva0yt.swift:19:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpfbpva0yt.swift:19:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map {\n        $0.characters.sorted().map\
    \ { String($0) }.joined()\n    }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp98wxoxgn.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map {\n          \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        result += String(word.sorted()) + \" \"\n  \
    \  }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpw7yw8q7l.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpw7yw8q7l.swift:17:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s {\n       \
    \ if char == \" \" {\n            result += word + \" \"\n            word = \"\
    \"\n        } else {\n            word += String(char)\n        }\n    }\n   \
    \ result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: Exception
  stderr: 'tmpr9gma32p/tmpr9gma32p.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc9bb5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc9b851b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc9b851988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc9b8507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9gma32p                        0x00005604e48f8697 <unavailable> + 5783

    5    libc.so.6                          0x00002adc9bd46460 __libc_start_main +
    245

    6    tmpr9gma32p                        0x00005604e48f81e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map {\n        $0.characters.sorted().reduce(\"\
    \", { $0 + String($1) })\n    }.reduce(\"\", { $0 + $1 + \" \" }).trimmingCharacters(in:\
    \ CharacterSet.whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpq0wgpmdk.swift:14:60: error: cannot find 'CharacterSet' in scope\n\
    \    }.reduce(\"\", { $0 + $1 + \" \" }).trimmingCharacters(in: CharacterSet.whitespaces)\n\
    \                                                           ^~~~~~~~~~~~\n/tmp/tmpq0wgpmdk.swift:12:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return s.components(separatedBy:\
    \ \" \").map {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        let sortedWord = String(word.sorted())\n   \
    \     result += sortedWord + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpk51susir.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpk51susir.swift:18:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpk51susir.swift:18:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", +)\n            result += \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(char)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", +)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpagjkrs86.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpagjkrs86.swift:16:59:\
    \ error: no exact matches in reference to operator function '+'\n            result\
    \ += word.characters.sorted().reduce(\"\", +)\n                              \
    \                            ^\nSwift.RangeReplaceableCollection:2:35: note: candidate\
    \ requires that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement\
    \ specified as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs:\
    \ Self, rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self where Other : RangeReplaceableCollection,\
    \ Self.Element == Other.Element\n                                  ^\n/tmp/tmpagjkrs86.swift:23:51:\
    \ error: no exact matches in reference to operator function '+'\n    result +=\
    \ word.characters.sorted().reduce(\"\", +)\n                                 \
    \                 ^\nSwift.RangeReplaceableCollection:2:35: note: candidate requires\
    \ that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement specified\
    \ as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs: Self,\
    \ rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self w"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3yt4r_t.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd3yt4r_t.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd3yt4r_t.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let sortedWord = String(word.sorted())\n   \
    \     result += sortedWord + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp7y_581ta.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmp7y_581ta.swift:18:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmp7y_581ta.swift:18:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        result += word.sorted()\n        result += \" \"\n    }\n    return result\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp_lrjaz5t.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map {\n        String($0.sorted())\n\
    \    }.joined(separator: \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let chars = Array(word)\n        let sortedChars\
    \ = chars.sorted(by: { $0.asciiValue! < $1.asciiValue! })\n        for char in\
    \ sortedChars {\n            result.append(char)\n        }\n        result.append(\"\
    \ \")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpfvkzafe_.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", +)\n            result += \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(char)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", +)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpagjkrs86.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpagjkrs86.swift:16:59:\
    \ error: no exact matches in reference to operator function '+'\n            result\
    \ += word.characters.sorted().reduce(\"\", +)\n                              \
    \                            ^\nSwift.RangeReplaceableCollection:2:35: note: candidate\
    \ requires that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement\
    \ specified as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs:\
    \ Self, rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self where Other : RangeReplaceableCollection,\
    \ Self.Element == Other.Element\n                                  ^\n/tmp/tmpagjkrs86.swift:23:51:\
    \ error: no exact matches in reference to operator function '+'\n    result +=\
    \ word.characters.sorted().reduce(\"\", +)\n                                 \
    \                 ^\nSwift.RangeReplaceableCollection:2:35: note: candidate requires\
    \ that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement specified\
    \ as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs: Self,\
    \ rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self w"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(c)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpd3yt4r_t.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpd3yt4r_t.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmpd3yt4r_t.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(char)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5gw7cog9.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5gw7cog9.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5gw7cog9.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        var chars = Array(word.characters)\n       \
    \ chars.sort()\n        result += String(chars) + \" \"\n    }\n    return result.trimmingCharacters(in:\
    \ CharacterSet.whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpzuon31wm.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpzuon31wm.swift:19:42: error: cannot find 'CharacterSet'\
    \ in scope\n    return result.trimmingCharacters(in: CharacterSet.whitespaces)\n\
    \                                         ^~~~~~~~~~~~\n/tmp/tmpzuon31wm.swift:19:19:\
    \ error: value of type 'String' has no member 'trimmingCharacters'\n    return\
    \ result.trimmingCharacters(in: CharacterSet.whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    let sortedWords = words.map\
    \ { String($0.sorted()) }\n    return sortedWords.joined(separator: \" \")\n}\n\
    \n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpaxdaysmj.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map({ $0.sorted() }).joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmplvz85bro.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map({ $0.sorted()\
    \ }).joined(separator: \" \")\n           ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        result += String(word.sorted())\n        result\
    \ += \" \"\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmptw6ez12e.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c != \" \" {\n            word.append(c)\n        } else {\n     \
    \       result.append(word.characters.sorted().map{String($0)}.joined(separator:\
    \ \"\"))\n            result.append(\" \")\n            word = \"\"\n        }\n\
    \    }\n    result.append(word.characters.sorted().map{String($0)}.joined(separator:\
    \ \"\"))\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp2oiylts3.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp2oiylts3.swift:18:32:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result.append(word.characters.sorted().map{String($0)}.joined(separator: \"\"\
    ))\n                               ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp2oiylts3.swift:23:24: error: 'characters' is unavailable:\
    \ Please use String directly\n    result.append(word.characters.sorted().map{String($0)}.joined(separator:\
    \ \"\"))\n                       ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        let sorted = String(word.sorted())\n        result += sorted\n    }\n\
    \    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) ->\
    \ Bool {\n    if left.count != right.count {\n        return false\n    }\n  \
    \  for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"\
    Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpez8x1_zz.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", +)\n            result += \" \"\n            word = \"\"\n        } else {\n\
    \            word += String(char)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", +)\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpagjkrs86.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpagjkrs86.swift:16:59:\
    \ error: no exact matches in reference to operator function '+'\n            result\
    \ += word.characters.sorted().reduce(\"\", +)\n                              \
    \                            ^\nSwift.RangeReplaceableCollection:2:35: note: candidate\
    \ requires that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement\
    \ specified as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs:\
    \ Self, rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self where Other : RangeReplaceableCollection,\
    \ Self.Element == Other.Element\n                                  ^\n/tmp/tmpagjkrs86.swift:23:51:\
    \ error: no exact matches in reference to operator function '+'\n    result +=\
    \ word.characters.sorted().reduce(\"\", +)\n                                 \
    \                 ^\nSwift.RangeReplaceableCollection:2:35: note: candidate requires\
    \ that 'String.Element' (aka 'Character') conform to 'Sequence' (requirement specified\
    \ as 'Other' : 'Sequence')\n    @inlinable public static func + <Other>(lhs: Self,\
    \ rhs: Other) -> Self where Other : Sequence, Self.Element == Other.Element\n\
    \                                  ^\nSwift.RangeReplaceableCollection:5:35: note:\
    \ candidate requires that 'String.Element' (aka 'Character') conform to 'RangeReplaceableCollection'\
    \ (requirement specified as 'Other' : 'RangeReplaceableCollection')\n    @inlinable\
    \ public static func + <Other>(lhs: Self, rhs: Other) -> Self w"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.split(separator: \" \") {\n    \
    \    var word = word\n        word.sort()\n        result += word + \" \"\n  \
    \  }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5ykl4i6_.swift:15:14: error: value of type 'String.SubSequence'\
    \ (aka 'Substring') has no member 'sort'\n        word.sort()\n        ~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s.characters\
    \ {\n        if char == \" \" {\n            result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else {\n  \
    \          word += String(char)\n        }\n    }\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)],\
    \ right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n       \
    \ return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r\
    \ {\n            return false\n        }\n    }\n    return true\n}\n        \
    \    \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\"\
    ) == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp5gw7cog9.swift:14:19: error: 'characters' is unavailable: Please\
    \ use String directly\n    for char in s.characters {\n                  ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmp5gw7cog9.swift:16:28:\
    \ error: 'characters' is unavailable: Please use String directly\n           \
    \ result += word.characters.sorted().reduce(\"\", {$0 + String($1)}) + \" \"\n\
    \                           ^~~~~~~~~~\nSwift.String:5:16: note: 'characters'\
    \ was obsoleted in Swift 5.0\n    public var characters: String { get set }\n\
    \               ^\n/tmp/tmp5gw7cog9.swift:22:20: error: 'characters' is unavailable:\
    \ Please use String directly\n    result += word.characters.sorted().reduce(\"\
    \", {$0 + String($1)})\n                   ^~~~~~~~~~\nSwift.String:5:16: note:\
    \ 'characters' was obsoleted in Swift 5.0\n    public var characters: String {\
    \ get set }\n               ^\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map {\n        $0.characters.sorted().map\
    \ { String($0) }.joined()\n    }.joined(separator: \" \")\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp98wxoxgn.swift:12:14: error: value of type 'String' has no member\
    \ 'components'\n    return s.components(separatedBy: \" \").map {\n          \
    \ ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return \"\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)])\
    \ -> Bool {\n    if left.count != right.count {\n        return false\n    }\n\
    \    for (l, r) in zip(left, right) {\n        if l != r {\n            return\
    \ false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: Exception
  stderr: 'tmpwh9pkvzm/tmpwh9pkvzm.swift:28: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002b496f017c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002b496ed0eb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002b496ed0e988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002b496ed0d7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpwh9pkvzm                        0x000055b91b699307 <unavailable> + 4871

    5    libc.so.6                          0x00002b496f203460 __libc_start_main +
    245

    6    tmpwh9pkvzm                        0x000055b91b698f49 <unavailable> + 3913

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let chars = Array(word.characters)\n       \
    \ let sortedChars = chars.sorted { $0 < $1 }\n        result += String(sortedChars)\
    \ + \" \"\n    }\n    return result.trimmingCharacters(in: .whitespaces)\n}\n\n\
    \nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpyuadxi1y.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n/tmp/tmpyuadxi1y.swift:19:19: error: value of type 'String'\
    \ has no member 'trimmingCharacters'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpyuadxi1y.swift:19:43:\
    \ error: cannot infer contextual base in reference to member 'whitespaces'\n \
    \   return result.trimmingCharacters(in: .whitespaces)\n                     \
    \                    ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.components(separatedBy: \" \").map {\n        $0.characters.sorted().reduce(\"\
    \", { $0 + String($1) })\n    }.reduce(\"\", { $0 + $1 + \" \" }).trimmingCharacters(in:\
    \ CharacterSet.whitespaces)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpq0wgpmdk.swift:14:60: error: cannot find 'CharacterSet' in scope\n\
    \    }.reduce(\"\", { $0 + $1 + \" \" }).trimmingCharacters(in: CharacterSet.whitespaces)\n\
    \                                                           ^~~~~~~~~~~~\n/tmp/tmpq0wgpmdk.swift:12:12:\
    \ error: the compiler is unable to type-check this expression in reasonable time;\
    \ try breaking up the expression into distinct sub-expressions\n    return s.components(separatedBy:\
    \ \" \").map {\n           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013720
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for c in s.characters {\n\
    \        if c == \" \" {\n            result += word.characters.sort().reduce(\"\
    \", combine: {$0 + String($1)}) + \" \"\n            word = \"\"\n        } else\
    \ {\n            word += String(c)\n        }\n    }\n    result += word.characters.sort().reduce(\"\
    \", combine: {$0 + String($1)})\n    return result\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpbfuw3gkx.swift:14:16: error: 'characters' is unavailable: Please\
    \ use String directly\n    for c in s.characters {\n               ^~~~~~~~~~\n\
    Swift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var\
    \ characters: String { get set }\n               ^\n/tmp/tmpbfuw3gkx.swift:16:39:\
    \ error: value of type 'String' has no member 'sort'\n            result += word.characters.sort().reduce(\"\
    \", combine: {$0 + String($1)}) + \" \"\n                      ~~~~~~~~~~~~~~~\
    \ ^~~~\n/tmp/tmpbfuw3gkx.swift:22:31: error: value of type 'String' has no member\
    \ 'sort'\n    result += word.characters.sort().reduce(\"\", combine: {$0 + String($1)})\n\
    \              ~~~~~~~~~~~~~~~ ^~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: -4
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s {\n       \
    \ if char == \" \" {\n            result += word + \" \"\n            word = \"\
    \"\n        } else {\n            word += String(char)\n        }\n    }\n   \
    \ result += word\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") ==\
    \ \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\nassert(anti_shuffle(s:\
    \ \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello World!!!\") == \"Hello\
    \ !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\nassert(anti_shuffle(s: \"\
    Hi. My name is Mister Robot. How are you?\") == \".Hi My aemn is Meirst .Rboot\
    \ How aer ?ouy\")"
  status: Exception
  stderr: 'tmpr9gma32p/tmpr9gma32p.swift:40: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002adc9bb5ac80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002adc9b851b6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002adc9b851988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002adc9b8507b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmpr9gma32p                        0x00005604e48f8697 <unavailable> + 5783

    5    libc.so.6                          0x00002adc9bd46460 __libc_start_main +
    245

    6    tmpr9gma32p                        0x00005604e48f81e9 <unavailable> + 4585

    '
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    for word in s.components(separatedBy: \" \") {\n\
    \        var chars = Array(word.characters)\n        chars.sort()\n        for\
    \ char in chars {\n            result.append(char)\n        }\n        result.append(\"\
    \ \")\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s:\
    \ \"Hi\") == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpcyh50vm8.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    for word in s.components(separatedBy: \" \") {\n         \
    \       ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    var word = \"\"\n    for char in s {\n       \
    \ if char == \" \" {\n            result += word.sorted()\n            result\
    \ += \" \"\n            word = \"\"\n        } else {\n            word += String(char)\n\
    \        }\n    }\n    result += word.sorted()\n    return result\n}\n\n\nfunc\
    \ ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count !=\
    \ right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.components(separatedBy: \" \")\n    var result = \"\"\n\
    \    for word in words {\n        let sortedWord = String(word.sorted())\n   \
    \     result += sortedWord + \" \"\n    }\n    return result\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpvfm_dn2c.swift:12:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    var result = \"\"\n    let words = s.components(separatedBy: \" \")\n\
    \    for word in words {\n        let sorted = String(word.sorted())\n       \
    \ result += sorted\n        result += \" \"\n    }\n    return result\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmp33s9ltyt.swift:13:19: error: value of type 'String' has no member\
    \ 'components'\n    let words = s.components(separatedBy: \" \")\n           \
    \     ~ ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013700
- exit_code: 0
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    return s.split(separator: \" \").map { String($0.sorted()) }.joined(separator:\
    \ \" \")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n\
    \    if left.count != right.count {\n        return false\n    }\n    for (l,\
    \ r) in zip(left, right) {\n        if l != r {\n            return false\n  \
    \      }\n    }\n    return true\n}\n            \nassert(anti_shuffle(s: \"Hi\"\
    ) == \"Hi\")\nassert(anti_shuffle(s: \"hello\") == \"ehllo\")\nassert(anti_shuffle(s:\
    \ \"number\") == \"bemnru\")\nassert(anti_shuffle(s: \"abcd\") == \"abcd\")\n\
    assert(anti_shuffle(s: \"Hello World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s:\
    \ \"\") == \"\")\nassert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are\
    \ you?\") == \".Hi My aemn is Meirst .Rboot How aer ?ouy\")"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013700
- exit_code: 1
  program: "\n/// Write a function that takes a string and returns an ordered version\
    \ of it.\n/// Ordered version of string, is a string where all words (separated\
    \ by space)\n/// are replaced by a new word where all the characters arranged\
    \ in\n/// ascending order based on ascii value.\n/// Note: You should keep the\
    \ order of words and blank spaces in the sentence.\n/// For example:\n/// anti_shuffle('Hi')\
    \ returns 'Hi'\n/// anti_shuffle('hello') returns 'ehllo'\n/// anti_shuffle('Hello\
    \ World!!!') returns 'Hello !!!Wdlor'\nfunc anti_shuffle(s: String) -> String\
    \ {\n    let words = s.split(separator: \" \")\n    var result = \"\"\n    for\
    \ word in words {\n        result += String(word.sorted()) + \" \"\n    }\n  \
    \  return result.trimmingCharacters(in: .whitespaces)\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(anti_shuffle(s: \"Hi\") == \"Hi\")\nassert(anti_shuffle(s:\
    \ \"hello\") == \"ehllo\")\nassert(anti_shuffle(s: \"number\") == \"bemnru\")\n\
    assert(anti_shuffle(s: \"abcd\") == \"abcd\")\nassert(anti_shuffle(s: \"Hello\
    \ World!!!\") == \"Hello !!!Wdlor\")\nassert(anti_shuffle(s: \"\") == \"\")\n\
    assert(anti_shuffle(s: \"Hi. My name is Mister Robot. How are you?\") == \".Hi\
    \ My aemn is Meirst .Rboot How aer ?ouy\")"
  status: SyntaxError
  stderr: "/tmp/tmpx1f6bb36.swift:17:19: error: value of type 'String' has no member\
    \ 'trimmingCharacters'\n    return result.trimmingCharacters(in: .whitespaces)\n\
    \           ~~~~~~ ^~~~~~~~~~~~~~~~~~\n/tmp/tmpx1f6bb36.swift:17:43: error: cannot\
    \ infer contextual base in reference to member 'whitespaces'\n    return result.trimmingCharacters(in:\
    \ .whitespaces)\n                                         ~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660013701
