name: HumanEval_21_rescale_to_unit
language: swift
prompt: "\n/// Given list of numbers (of at least two elements), apply a linear transform\
  \ to that list,\n/// such that the smallest number will become 0 and the largest\
  \ will become 1\n/// >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n/// [0.0, 0.25,\
  \ 0.5, 0.75, 1.0]\nfunc rescale_to_unit(numbers: [Double]) -> [Double] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(rescale_to_unit(numbers: [2.0, 49.9]) ==\
  \ [0.0, 1.0])\nassert(rescale_to_unit(numbers: [100.0, 49.9]) == [1.0, 0.0])\nassert(rescale_to_unit(numbers:\
  \ [1.0, 2.0, 3.0, 4.0, 5.0]) == [0.0, 0.25, 0.5, 0.75, 1.0])\nassert(rescale_to_unit(numbers:\
  \ [2.0, 1.0, 5.0, 3.0, 4.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])\nassert(rescale_to_unit(numbers:\
  \ [12.0, 11.0, 15.0, 13.0, 14.0]) == [0.25, 0.0, 1.0, 0.5, 0.75])"
completions: ["    let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    let diff = max_number - min_number\n    return numbers.map { ($0 - min_number)\
    \ / diff }", "    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }", " \
    \   let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    let range = max_number - min_number\n    return numbers.map { ($0 - min_number)\
    \ / range }", "    let min_number = numbers.minElement()!\n    let max_number\
    \ = numbers.maxElement()!\n    let range = max_number - min_number\n    return\
    \ numbers.map { (number) -> Double in\n        return (number - min_number) /\
    \ range\n    }", "    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }", "    let min_number = numbers.minElement()!\n\
    \    let max_number = numbers.maxElement()!\n    let range = max_number - min_number\n\
    \    return numbers.map { ($0 - min_number) / range }", "    let min_number =\
    \ numbers.minElement()!\n    let max_number = numbers.maxElement()!\n    let range\
    \ = max_number - min_number\n    return numbers.map { ($0 - min_number) / range\
    \ }", "    let min_value = numbers.minElement()!\n    let max_value = numbers.maxElement()!\n\
    \    let range = max_value - min_value\n    return numbers.map { ($0 - min_value)\
    \ / range }", "    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { ($0 - min) / range }", " \
    \   let min_number = numbers.minElement()!\n    let max_number = numbers.maxElement()!\n\
    \    let diff = max_number - min_number\n    return numbers.map { ($0 - min_number)\
    \ / diff }", "    var result = [Double]()\n    let min = numbers.minElement()!\n\
    \    let max = numbers.maxElement()!\n    for number in numbers {\n        result.append((number\
    \ - min) / (max - min))\n    }\n    return result", "    let min_number = numbers.minElement()!\n\
    \    let max_number = numbers.maxElement()!\n    let range = max_number - min_number\n\
    \    return numbers.map { ($0 - min_number) / range }", "    let min_number =\
    \ numbers.minElement()!\n    let max_number = numbers.maxElement()!\n    let range\
    \ = max_number - min_number\n    return numbers.map { ($0 - min_number) / range\
    \ }", "    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    let range = max - min\n    return numbers.map { (number) -> Double in\n \
    \       return (number - min) / range\n    }", "    let min = numbers.minElement()!\n\
    \    let max = numbers.maxElement()!\n    return numbers.map { ($0 - min) / (max\
    \ - min) }", "    let min_number = numbers.minElement()!\n    let max_number =\
    \ numbers.maxElement()!\n    let range = max_number - min_number\n    return numbers.map\
    \ { ($0 - min_number) / range }", "    let min_number = numbers.minElement()!\n\
    \    let max_number = numbers.maxElement()!\n    let range = max_number - min_number\n\
    \    return numbers.map { ($0 - min_number) / range }", "    let min_number =\
    \ numbers.minElement()!\n    let max_number = numbers.maxElement()!\n    let range\
    \ = max_number - min_number\n    return numbers.map { ($0 - min_number) / range\
    \ }", "    let min_value = numbers.minElement()!\n    let max_value = numbers.maxElement()!\n\
    \    let range = max_value - min_value\n    return numbers.map { ($0 - min_value)\
    \ / range }", "    let min = numbers.minElement()!\n    let max = numbers.maxElement()!\n\
    \    return numbers.map { ($0 - min) / (max - min) }"]
stop_tokens:
- "\n}"
