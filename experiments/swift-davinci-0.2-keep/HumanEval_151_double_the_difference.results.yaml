language: swift
name: HumanEval_151_double_the_difference
results:
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            if num % 2 ==\
    \ 1 {\n                sum += Int(num * num)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp04dbr2_j.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            if num % 2 ==\
    \ 1 {\n                sum += Int(num * num)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp04dbr2_j.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            sum += Int(pow(i, 2))\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4u8ltf9g.swift:13:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpgc982mpg.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 && num >= 0 {\n            sum += Int(num * num)\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpj5gskuuu.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 && num >= 0\
    \ {\n               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            if num % 2 ==\
    \ 1 {\n                sum += Int(num * num)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp04dbr2_j.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 ==\
    \ 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmplm64ke0h.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i < 0 {\n\
    \            continue\n        }\n        if i % 2 == 0 {\n            continue\n\
    \        }\n        sum += Int(i * i)\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjg6gh_5c.swift:15:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 0 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            if i % 2 == 1 {\n \
    \               sum += Int(i * i)\n            }\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc7ukyh5k.swift:13:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 ==\
    \ 1 && i > 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpw4hqzbai.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 && i > 0 {\n\
    \             ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_ryxxmbe.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 && num > 0\
    \ {\n               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            if i % 2 == 1 {\n \
    \               sum += Int(i * i)\n            }\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc7ukyh5k.swift:13:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 && i >= 0 {\n            sum += Int(i * i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 != 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmfktexd3.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 != 0\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            sum += Int(pow(i, 2))\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4u8ltf9g.swift:13:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if (i > 0 &&\
    \ i % 2 == 1) {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpfsdvkkxm.swift:12:24: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if (i > 0 && i % 2 == 1) {\n\
    \                       ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            if num % 2 ==\
    \ 1 {\n                sum += Int(num * num)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp04dbr2_j.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_ryxxmbe.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 && num > 0\
    \ {\n               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 && i >= 0 {\n            sum += Int(i * i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 && i > 0 {\n            sum += Int(i * i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_ryxxmbe.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 && num > 0\
    \ {\n               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 ==\
    \ 1 && i > 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpw4hqzbai.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 && i > 0 {\n\
    \             ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            if i % 2 == 1 {\n \
    \               sum += Int(i * i)\n            }\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc7ukyh5k.swift:13:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            sum += Int(pow(num,\
    \ 2))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpe3q8lsyd.swift:13:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            if num % 2 ==\
    \ 1 {\n                sum += Int(num * num)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp04dbr2_j.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            if num % 2 ==\
    \ 1 {\n                sum += Int(num * num)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp04dbr2_j.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_ryxxmbe.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 && num > 0\
    \ {\n               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 && num % 2 != 0 {\n       \
    \     sum += Int(pow(num, 2))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left:\
    \ [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count\
    \ {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n     \
    \   if l != r {\n            return false\n        }\n    }\n    return true\n\
    }\n            \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmparxxoyne.swift:12:74: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num.truncatingRemainder(dividingBy:\
    \ 1) == 0 && num % 2 != 0 {\n                                                \
    \                         ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmparxxoyne.swift:13:24: error: cannot find 'pow' in scope\n\
    \            sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            sum += Int(pow(i, 2))\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4u8ltf9g.swift:13:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 != 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmfktexd3.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 != 0\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 != 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmfktexd3.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 != 0\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 ==\
    \ 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmplm64ke0h.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpgc982mpg.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            sum += Int(pow(i, 2))\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4u8ltf9g.swift:13:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            if i % 2 == 1 {\n \
    \               sum += Int(i * i)\n            }\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc7ukyh5k.swift:13:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            sum += Int(pow(i, 2))\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4u8ltf9g.swift:13:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 && i > 0 {\n            sum += Int(i * i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            if num % 2 ==\
    \ 1 {\n                sum += Int(num * num)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp04dbr2_j.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            if i % 2 == 1 {\n \
    \               sum += Int(i * i)\n            }\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc7ukyh5k.swift:13:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_ryxxmbe.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 && num > 0\
    \ {\n               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 && i > 0 {\n            sum += Int(i * i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_ryxxmbe.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 && num > 0\
    \ {\n               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            if num % 2 ==\
    \ 1 {\n                sum += Int(num * num)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp04dbr2_j.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            if i % 2 == 1 {\n \
    \               sum += Int(i * i)\n            }\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc7ukyh5k.swift:13:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            sum += Int(pow(i, 2))\n\
    \        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int,\
    \ Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n\
    \    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n          \
    \  return false\n        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp4u8ltf9g.swift:13:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            if num % 2 ==\
    \ 1 {\n                sum += Int(num * num)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp04dbr2_j.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i >= 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpz2vma0a_.swift:12:24: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i >= 0 && i % 2 == 1 {\n\
    \                       ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 && i % 2 != 0 {\n            sum +=\
    \ Int(pow(i, 2))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvz0nq0we.swift:12:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpvz0nq0we.swift:13:24: error: cannot find 'pow' in scope\n\
    \            sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 && num >= 0 {\n            sum += Int(num * num)\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_ryxxmbe.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 && num > 0\
    \ {\n               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 && i >= 0 {\n            sum += Int(i * i)\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 != 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmfktexd3.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 != 0\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 != 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmfktexd3.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 != 0\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpgc982mpg.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 && num >= 0 {\n            sum += Int(num * num)\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            if num % 2 ==\
    \ 1 {\n                sum += Int(num * num)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp04dbr2_j.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 != 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmfktexd3.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 != 0\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 != 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmfktexd3.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 != 0\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            if num % 2 ==\
    \ 1 {\n                sum += Int(num * num)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp04dbr2_j.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_ryxxmbe.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 && num > 0\
    \ {\n               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpgc982mpg.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 != 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmfktexd3.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 != 0\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 != 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmfktexd3.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 != 0\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            sum += Int(pow(num,\
    \ 2))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpe3q8lsyd.swift:13:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 && i % 2 != 0 {\n            sum +=\
    \ Int(pow(i, 2))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvz0nq0we.swift:12:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpvz0nq0we.swift:13:24: error: cannot find 'pow' in scope\n\
    \            sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            if i % 2 == 1 {\n \
    \               sum += Int(i * i)\n            }\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc7ukyh5k.swift:13:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            if i % 2 == 1 {\n \
    \               sum += Int(i * i)\n            }\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc7ukyh5k.swift:13:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 ==\
    \ 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmplm64ke0h.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 ==\
    \ 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmplm64ke0h.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            sum += Int(pow(num,\
    \ 2))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpe3q8lsyd.swift:13:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            if num % 2 ==\
    \ 1 {\n                sum += Int(num * num)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp04dbr2_j.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpgc982mpg.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 != 0 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpjqkaewxf.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 != 0 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 != 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmfktexd3.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 != 0\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 ==\
    \ 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmplm64ke0h.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            sum += Int(pow(num,\
    \ 2))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpe3q8lsyd.swift:13:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num == Double(Int(num)) {\n            if num % 2 == 1 {\n            \
    \    sum += Int(num * num)\n            }\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp6gg984vd.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_ryxxmbe.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 && num > 0\
    \ {\n               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_ryxxmbe.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 && num > 0\
    \ {\n               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i >= 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpz2vma0a_.swift:12:24: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i >= 0 && i % 2 == 1 {\n\
    \                       ^\nSwift.%:2:13: note: '%' has been explicitly marked\
    \ unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            if num % 2 ==\
    \ 1 {\n                sum += Int(num * num)\n            }\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp04dbr2_j.swift:13:20: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if num % 2 == 1 {\n   \
    \                ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i.truncatingRemainder(dividingBy:\
    \ 2) == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num.truncatingRemainder(dividingBy: 1) == 0 {\n            sum += Int(pow(num,\
    \ 2))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpe3q8lsyd.swift:13:24: error: cannot find 'pow' in scope\n     \
    \       sum += Int(pow(num, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 != 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpmfktexd3.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 != 0\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i % 2 == 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp546n29dw.swift:12:23: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i % 2 == 1 {\n\
    \                      ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 {\n            if i % 2 == 1 {\n \
    \               sum += Int(i * i)\n            }\n        }\n    }\n    return\
    \ sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n   \
    \ if left.count != right.count {\n        return false\n    }\n    for (l, r)\
    \ in zip(left, right) {\n        if l != r {\n            return false\n     \
    \   }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpc7ukyh5k.swift:13:18: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n            if i % 2 == 1 {\n     \
    \            ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 ==\
    \ 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmplm64ke0h.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i > 0 &&\
    \ i.truncatingRemainder(dividingBy: 1) == 0 && i % 2 != 0 {\n            sum +=\
    \ Int(pow(i, 2))\n        }\n    }\n    return sum\n}\n\n\nfunc ==(left: [(Int,\
    \ Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n\
    \        return false\n    }\n    for (l, r) in zip(left, right) {\n        if\
    \ l != r {\n            return false\n        }\n    }\n    return true\n}\n \
    \           \nassert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpvz0nq0we.swift:12:68: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i > 0 && i.truncatingRemainder(dividingBy:\
    \ 1) == 0 && i % 2 != 0 {\n                                                  \
    \                 ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n/tmp/tmpvz0nq0we.swift:13:24: error: cannot find 'pow' in scope\n\
    \            sum += Int(pow(i, 2))\n                       ^~~\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for i in lst {\n        if i % 2 ==\
    \ 1 {\n            sum += Int(i * i)\n        }\n    }\n    return sum\n}\n\n\n\
    func ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmplm64ke0h.swift:12:14: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if i % 2 == 1 {\n         \
    \    ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num >\
    \ 0 && num % 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp5cpgcpy8.swift:12:27: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num > 0 && num % 2 == 1\
    \ {\n                          ^\nSwift.%:2:13: note: '%' has been explicitly\
    \ marked unavailable here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 {\n            sum += Int(num * num)\n        }\n    }\n    return sum\n\
    }\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count\
    \ != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right)\
    \ {\n        if l != r {\n            return false\n        }\n    }\n    return\
    \ true\n}\n            \nassert(double_the_difference(lst: [] as [Double]) ==\
    \ 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\nassert(double_the_difference(lst:\
    \ [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst: [-10.0, -20.0, -30.0])\
    \ == 0)\nassert(double_the_difference(lst: [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst:\
    \ [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0,\
    \ -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmpgc982mpg.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 {\n       \
    \        ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable here\n\
    public func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n       \
    \     ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
- exit_code: 0
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num.truncatingRemainder(dividingBy:\
    \ 2) == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n\
    \    return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824403
- exit_code: 1
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    var sum = 0\n    for num in lst {\n        if num %\
    \ 2 == 1 && num > 0 {\n            sum += Int(num * num)\n        }\n    }\n \
    \   return sum\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool\
    \ {\n    if left.count != right.count {\n        return false\n    }\n    for\
    \ (l, r) in zip(left, right) {\n        if l != r {\n            return false\n\
    \        }\n    }\n    return true\n}\n            \nassert(double_the_difference(lst:\
    \ [] as [Double]) == 0)\nassert(double_the_difference(lst: [5.0, 4.0]) == 25)\n\
    assert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\nassert(double_the_difference(lst:\
    \ [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst: [-1.0, -2.0,\
    \ 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0]) == 34)\nassert(double_the_difference(lst:\
    \ [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: SyntaxError
  stderr: "/tmp/tmp_ryxxmbe.swift:12:16: error: '%' is unavailable: For floating point\
    \ numbers use truncatingRemainder instead\n        if num % 2 == 1 && num > 0\
    \ {\n               ^\nSwift.%:2:13: note: '%' has been explicitly marked unavailable\
    \ here\npublic func % <T>(lhs: T, rhs: T) -> T where T : BinaryFloatingPoint\n\
    \            ^\n"
  stdout: ''
  timestamp: 1659824403
- exit_code: -4
  program: "\n/// Given a list of numbers, return the sum of squares of the numbers\n\
    /// in the list that are odd. Ignore numbers that are negative or not integers.\n\
    /// double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n/// double_the_difference([-1,\
    \ -2, 0]) == 0\n/// double_the_difference([9, -2]) == 81\n/// double_the_difference([0])\
    \ == 0  \n/// If the input list is empty, return 0.\nfunc double_the_difference(lst:\
    \ [Double]) -> Int {\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right:\
    \ [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return\
    \ false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n  \
    \          return false\n        }\n    }\n    return true\n}\n            \n\
    assert(double_the_difference(lst: [] as [Double]) == 0)\nassert(double_the_difference(lst:\
    \ [5.0, 4.0]) == 25)\nassert(double_the_difference(lst: [0.1, 0.2, 0.3]) == 0)\n\
    assert(double_the_difference(lst: [-10.0, -20.0, -30.0]) == 0)\nassert(double_the_difference(lst:\
    \ [-1.0, -2.0, 8.0]) == 0)\nassert(double_the_difference(lst: [0.2, 3.0, 5.0])\
    \ == 34)\nassert(double_the_difference(lst: [-9.0, -7.0, -5.0, -3.0, -1.0, 1.0,\
    \ 3.0, 5.0, 7.0, 9.0]) == 165)"
  status: Exception
  stderr: 'tmp5ibk7k9m/tmp5ibk7k9m.swift:27: Assertion failed

    Current stack trace:

    0    libswiftCore.so                    0x00002ac145b06c80 _swift_stdlib_reportFatalErrorInFile
    + 112

    1    libswiftCore.so                    0x00002ac1457fdb6c <unavailable> + 1436524

    2    libswiftCore.so                    0x00002ac1457fd988 <unavailable> + 1436040

    3    libswiftCore.so                    0x00002ac1457fc7b0 _assertionFailure(_:_:file:line:flags:)
    + 699

    4    tmp5ibk7k9m                        0x000055bd779f73e2 <unavailable> + 5090

    5    libc.so.6                          0x00002ac145cf2460 __libc_start_main +
    245

    6    tmp5ibk7k9m                        0x000055bd779f6fa9 <unavailable> + 4009

    '
  stdout: ''
  timestamp: 1659824403
