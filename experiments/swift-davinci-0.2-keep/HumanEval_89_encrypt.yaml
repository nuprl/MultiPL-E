name: HumanEval_89_encrypt
language: swift
prompt: "\n/// Create a function encrypt that takes a string as an argument and\n\
  /// returns a string encrypted with the alphabet being rotated. \n/// The alphabet\
  \ should be rotated in a manner such that the letters \n/// shift down by two multiplied\
  \ to two places.\n/// For example:\n/// encrypt('hi') returns 'lm'\n/// encrypt('asdfghjkl')\
  \ returns 'ewhjklnop'\n/// encrypt('gf') returns 'kj'\n/// encrypt('et') returns\
  \ 'ix'\nfunc encrypt(s: String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(encrypt(s: \"hi\") == \"lm\")\nassert(encrypt(s:\
  \ \"asdfghjkl\") == \"ewhjklnop\")\nassert(encrypt(s: \"gf\") == \"kj\")\nassert(encrypt(s:\
  \ \"et\") == \"ix\")\nassert(encrypt(s: \"faewfawefaewg\") == \"jeiajeaijeiak\"\
  )\nassert(encrypt(s: \"hellomyfriend\") == \"lippsqcjvmirh\")\nassert(encrypt(s:\
  \ \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\") == \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  )\nassert(encrypt(s: \"a\") == \"e\")"
completions: ["    var result = \"\"\n    for c in s.characters {\n        let unicode\
    \ = c.unicodeScalars.first!.value\n        let unicode2 = unicode + 2 * 2\n  \
    \      let scalar = UnicodeScalar(unicode2)\n        result.append(Character(scalar))\n\
    \    }\n    return result", '    return ""', "    // your code here\n    return\
    \ \"\"", "    var result = \"\"\n    for c in s.characters {\n        let index\
    \ = alphabet.indexOf(String(c))!\n        let newIndex = (index + 2 * 2) % 26\n\
    \        result.append(alphabet[newIndex])\n    }\n    return result", "    var\
    \ encryptedString = \"\"\n    for char in s.characters {\n        let charIndex\
    \ = alphabet.indexOf(String(char))\n        let encryptedIndex = (charIndex! +\
    \ (2 * 2)) % 26\n        encryptedString.append(alphabet[encryptedIndex])\n  \
    \  }\n    return encryptedString", "    var encryptedString = \"\"\n    for char\
    \ in s.characters {\n        let asciiValue = Int(String(char).unicodeScalars.first!.value)\n\
    \        let newAsciiValue = asciiValue + 2 * 2\n        let newChar = Character(UnicodeScalar(newAsciiValue)!)\n\
    \        encryptedString.append(newChar)\n    }\n    return encryptedString",
  "    // Write your code here\n    return \"\"", "    var encryptedString = \"\"\n\
    \    for letter in s {\n        let unicode = letter.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedLetter\
    \ = Character(UnicodeScalar(encryptedUnicode)!)\n        encryptedString.append(encryptedLetter)\n\
    \    }\n    return encryptedString", "    var encryptedString = \"\"\n    for\
    \ char in s.characters {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedChar =\
    \ Character(UnicodeScalar(encryptedUnicode))\n        encryptedString.append(encryptedChar)\n\
    \    }\n    return encryptedString", "    var result = \"\"\n    for c in s.characters\
    \ {\n        let unicode = c.unicodeScalars.first!.value\n        let newUnicode\
    \ = unicode + 2 * 2\n        let newChar = Character(UnicodeScalar(newUnicode))\n\
    \        result.append(newChar)\n    }\n    return result", "    var encryptedString\
    \ = \"\"\n    for char in s.characters {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedChar =\
    \ Character(UnicodeScalar(encryptedUnicode))\n        encryptedString.append(encryptedChar)\n\
    \    }\n    return encryptedString", "    var encrypted = \"\"\n    for c in s.characters\
    \ {\n        let index = alphabet.indexOf(String(c))!\n        let newIndex =\
    \ (index + 2 * 2) % 26\n        encrypted += String(alphabet[newIndex])\n    }\n\
    \    return encrypted", "    var encrypted = \"\"\n    for c in s.characters {\n\
    \        let index = alphabet.indexOf(String(c))!\n        let newIndex = (index\
    \ + (2 * 2)) % alphabet.count\n        encrypted += alphabet[newIndex]\n    }\n\
    \    return encrypted", "    var encryptedString = \"\"\n    for char in s.characters\
    \ {\n        let index = alphabet.indexOf(String(char))\n        encryptedString\
    \ += alphabet[(index! + 2) % 26]\n    }\n    return encryptedString", "    var\
    \ encryptedString = \"\"\n    for letter in s {\n        let unicode = letter.unicodeScalars.first!.value\n\
    \        let encryptedUnicode = unicode + (2 * 2)\n        let encryptedLetter\
    \ = Character(UnicodeScalar(encryptedUnicode)!)\n        encryptedString.append(encryptedLetter)\n\
    \    }\n    return encryptedString", "    var encryptedString = \"\"\n    for\
    \ char in s.characters {\n        let index = alphabet.indexOf(String(char))\n\
    \        let newIndex = index! + (2 * 2)\n        encryptedString += alphabet[newIndex]\n\
    \    }\n    return encryptedString", "    var encrypted = \"\"\n    for c in s.characters\
    \ {\n        let index = alphabet.indexOf(String(c))!\n        let newIndex =\
    \ (index + (2 * 2)) % 26\n        encrypted += String(alphabet[newIndex])\n  \
    \  }\n    return encrypted", "    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encrypted = \"\"\n    for letter in s {\n        if let index = alphabet.firstIndex(of:\
    \ letter) {\n            let newIndex = index + 2 * 2\n            if newIndex\
    \ > alphabet.count - 1 {\n                let newIndex = newIndex - alphabet.count\n\
    \                encrypted.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n            } else {\n                encrypted.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n            }\n        }\n    }\n    return encrypted",
  "    var result = \"\"\n    for char in s {\n        let unicode = char.unicodeScalars.first!.value\n\
    \        let newUnicode = unicode + (2 * 2)\n        let newChar = Character(UnicodeScalar(newUnicode)!)\n\
    \        result.append(newChar)\n    }\n    return result", "    var result =\
    \ \"\"\n    for char in s {\n        result += String(char.unicodeScalars.first!.value\
    \ + 2 * 2)\n    }\n    return result"]
stop_tokens:
- "\n}"
