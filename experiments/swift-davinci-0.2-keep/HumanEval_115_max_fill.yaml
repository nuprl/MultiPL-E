name: HumanEval_115_max_fill
language: swift
prompt: "\n/// You are given a rectangular grid of wells. Each row represents a single\
  \ well,\n/// and each 1 in a row represents a single unit of water.\n/// Each well\
  \ has a corresponding bucket that can be used to extract water from it, \n/// and\
  \ all buckets have the same capacity.\n/// Your task is to use the buckets to empty\
  \ the wells.\n/// Output the number of times you need to lower the buckets.\n///\
  \ Example 1:\n/// Input: \n/// grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n/// bucket_capacity\
  \ : 1\n/// Output: 6\n/// Example 2:\n/// Input: \n/// grid : [[0,0,1,1], [0,0,0,0],\
  \ [1,1,1,1], [0,1,1,1]]\n/// bucket_capacity : 2\n/// Output: 5\n/// Example 3:\n\
  /// Input: \n/// grid : [[0,0,0], [0,0,0]]\n/// bucket_capacity : 5\n/// Output:\
  \ 0\n/// Constraints:\n/// * all wells have the same length\n/// * 1 <= grid.length\
  \ <= 10^2\n/// * 1 <= grid[:,1].length <= 10^2\n/// * grid[i][j] -> 0 | 1\n/// *\
  \ 1 <= capacity <= 10\nfunc max_fill(grid: [[Int]], capacity: Int) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(max_fill(grid: [[0, 0, 1, 0], [0, 1, 0,\
  \ 0], [1, 1, 1, 1]], capacity: 1) == 6)\nassert(max_fill(grid: [[0, 0, 1, 1], [0,\
  \ 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], capacity: 2) == 5)\nassert(max_fill(grid:\
  \ [[0, 0, 0], [0, 0, 0]], capacity: 5) == 0)\nassert(max_fill(grid: [[1, 1, 1, 1],\
  \ [1, 1, 1, 1]], capacity: 2) == 4)\nassert(max_fill(grid: [[1, 1, 1, 1], [1, 1,\
  \ 1, 1]], capacity: 9) == 2)"
completions: ["    var result = 0\n    for row in grid {\n        var sum = 0\n  \
    \      for cell in row {\n            sum += cell\n            if sum == capacity\
    \ {\n                result += 1\n                sum = 0\n            }\n   \
    \     }\n        if sum > 0 {\n            result += 1\n        }\n    }\n   \
    \ return result", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                grid[i][j] = 0\n                var\
    \ k = i + 1\n                while k < grid.count && capacity > 0 {\n        \
    \            if grid[k][j] == 1 {\n                        grid[k][j] = 0\n  \
    \                      capacity -= 1\n                    }\n                \
    \    k += 1\n                }\n            }\n        }\n    }\n    return count",
  "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n       \
    \ for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n           \
    \     count += 1\n                var k = i\n                while k < grid.count\
    \ && grid[k][j] == 1 {\n                    grid[k][j] = 0\n                 \
    \   k += 1\n                }\n            }\n        }\n    }\n    return count",
  "    var result = 0\n    for i in 0..<grid.count {\n        var sum = 0\n      \
    \  for j in 0..<grid[i].count {\n            sum += grid[i][j]\n        }\n  \
    \      result += sum / capacity\n        if sum % capacity != 0 {\n          \
    \  result += 1\n        }\n    }\n    return result", '    return 0', "    var\
    \ grid = grid\n    var count = 0\n    while true {\n        var filled = false\n\
    \        for i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n\
    \                if grid[i][j] == 1 {\n                    filled = true\n   \
    \                 grid[i][j] = 0\n                    if i > 0 {\n           \
    \             grid[i-1][j] = min(grid[i-1][j] + capacity, 1)\n               \
    \     }\n                    if i < grid.count - 1 {\n                       \
    \ grid[i+1][j] = min(grid[i+1][j] + capacity, 1)\n                    }\n    \
    \                if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + capacity, 1)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + capacity, 1)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var grid = grid\n    var count = 0\n    while true {\n        var\
    \ min_row = -1\n        var min_value = Int.max\n        for i in 0..<grid.count\
    \ {\n            var sum = 0\n            for j in 0..<grid[i].count {\n     \
    \           sum += grid[i][j]\n            }\n            if sum < min_value {\n\
    \                min_value = sum\n                min_row = i\n            }\n\
    \        }\n        if min_value == 0 {\n            break\n        }\n      \
    \  for j in 0..<grid[min_row].count {\n            if grid[min_row][j] == 1 {\n\
    \                grid[min_row][j] = 0\n                count += 1\n          \
    \  }\n        }\n    }\n    return count", "    var grid = grid\n    var count\
    \ = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n \
    \           if grid[i][j] == 1 {\n                count += 1\n               \
    \ fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n        }\n\
    \    }\n    return count", "    var result = 0\n    for i in 0..<grid.count {\n\
    \        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n    \
    \            result += capacity\n            }\n        }\n    }\n    return result",
  "    var result = 0\n    var row_max = [Int](repeating: 0, count: grid.count)\n\
    \    for row in 0..<grid.count {\n        for col in 0..<grid[row].count {\n \
    \           if grid[row][col] == 1 {\n                row_max[row] = col\n   \
    \         }\n        }\n    }\n    for col in 0..<grid[0].count {\n        var\
    \ row = 0\n        var col_max = 0\n        while row < grid.count {\n       \
    \     if row_max[row] >= col {\n                col_max = row\n            }\n\
    \            row += 1\n        }\n        for row in 0...col_max {\n         \
    \   if row_max[row] >= col {\n                result += 1\n            }\n   \
    \     }\n    }\n    return result", "    var result = 0\n    var max_fill = 0\n\
    \    for row in grid {\n        for cell in row {\n            if cell == 1 {\n\
    \                max_fill += 1\n            }\n        }\n    }\n    var fill\
    \ = 0\n    var row = 0\n    while fill < max_fill {\n        var col = 0\n   \
    \     while col < grid[row].count {\n            if grid[row][col] == 1 {\n  \
    \              fill += 1\n                grid[row][col] = 0\n            }\n\
    \            col += 1\n        }\n        row += 1\n        result += 1\n    }\n\
    \    return result", "    var result = 0\n    for row in grid {\n        var sum\
    \ = 0\n        for i in 0..<row.count {\n            if row[i] == 1 {\n      \
    \          sum += 1\n            } else {\n                if sum > 0 {\n    \
    \                result += 1\n                    sum = 0\n                }\n\
    \            }\n        }\n        if sum > 0 {\n            result += 1\n   \
    \     }\n    }\n    return result * capacity", "    var max_fill = 0\n    for\
    \ row in grid {\n        var fill = 0\n        for cell in row {\n           \
    \ if cell == 1 {\n                fill += 1\n            } else {\n          \
    \      if fill > max_fill {\n                    max_fill = fill\n           \
    \     }\n                fill = 0\n            }\n        }\n        if fill >\
    \ max_fill {\n            max_fill = fill\n        }\n    }\n    return max_fill",
  "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n       \
    \ for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n           \
    \     count += 1\n                grid[i][j] = 0\n                var k = i\n\
    \                while k < grid.count && grid[k][j] == 0 {\n                 \
    \   grid[k][j] = 1\n                    k += 1\n                }\n          \
    \      k = i - 1\n                while k >= 0 && grid[k][j] == 0 {\n        \
    \            grid[k][j] = 1\n                    k -= 1\n                }\n \
    \           }\n        }\n    }\n    return count", "    var max_fill = 0\n  \
    \  for row in grid {\n        var fill = 0\n        for cell in row {\n      \
    \      if cell == 1 {\n                fill += 1\n            } else {\n     \
    \           if fill > 0 {\n                    max_fill += 1\n               \
    \     fill = 0\n                }\n            }\n        }\n        if fill >\
    \ 0 {\n            max_fill += 1\n        }\n    }\n    return max_fill * capacity",
  "    var result = 0\n    for row in grid {\n        var water = 0\n        for cell\
    \ in row {\n            water += cell\n            if water == capacity {\n  \
    \              result += 1\n                water = 0\n            }\n       \
    \ }\n        if water > 0 {\n            result += 1\n        }\n    }\n    return\
    \ result", "    var result = 0\n    var max_fill = 0\n    for row in grid {\n\
    \        for col in row {\n            if col == 1 {\n                max_fill\
    \ += 1\n            }\n        }\n    }\n    var fill = 0\n    for row in grid\
    \ {\n        for col in row {\n            if col == 1 {\n                fill\
    \ += 1\n            }\n        }\n        if fill == max_fill {\n            break\n\
    \        }\n        result += 1\n        fill = 0\n    }\n    return result",
  "    var result = 0\n    for row in grid {\n        var water = 0\n        for well\
    \ in row {\n            water += well\n            if water >= capacity {\n  \
    \              result += 1\n                water = 0\n            }\n       \
    \ }\n        if water > 0 {\n            result += 1\n        }\n    }\n    return\
    \ result", "    var count = 0\n    var max_row = 0\n    for row in grid {\n  \
    \      max_row = max(max_row, row.reduce(0, +))\n    }\n    for _ in 0..<max_row\
    \ {\n        for row in grid {\n            for i in 0..<row.count {\n       \
    \         if row[i] > 0 {\n                    row[i] -= 1\n                 \
    \   count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var result = 0\n    for row in grid {\n        var fill = 0\n \
    \       for col in row {\n            if col == 1 {\n                fill += 1\n\
    \            } else {\n                if fill > 0 {\n                    result\
    \ += 1\n                    fill = 0\n                }\n            }\n     \
    \   }\n        if fill > 0 {\n            result += 1\n        }\n    }\n    return\
    \ result", "    var grid = grid\n    var count = 0\n    while true {\n       \
    \ var filled = false\n        for i in 0..<grid.count {\n            for j in\
    \ 0..<grid[i].count {\n                if grid[i][j] == 1 {\n                \
    \    filled = true\n                    grid[i][j] = 0\n                    if\
    \ i > 0 {\n                        grid[i-1][j] = min(grid[i-1][j] + capacity,\
    \ 1)\n                    }\n                    if i < grid.count - 1 {\n   \
    \                     grid[i+1][j] = min(grid[i+1][j] + capacity, 1)\n       \
    \             }\n                    if j > 0 {\n                        grid[i][j-1]\
    \ = min(grid[i][j-1] + capacity, 1)\n                    }\n                 \
    \   if j < grid[i].count - 1 {\n                        grid[i][j+1] = min(grid[i][j+1]\
    \ + capacity, 1)\n                    }\n                }\n            }\n  \
    \      }\n        if !filled {\n            break\n        }\n        count +=\
    \ 1\n    }\n    return count", "    var result = 0\n    for row in grid {\n  \
    \      var sum = 0\n        for i in 0..<row.count {\n            sum += row[i]\n\
    \            if sum == capacity {\n                result += 1\n             \
    \   sum = 0\n            } else if sum > capacity {\n                result +=\
    \ 1\n                sum = row[i]\n            }\n        }\n        if sum >\
    \ 0 {\n            result += 1\n        }\n    }\n    return result", "    var\
    \ grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n        for j\
    \ in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n                count\
    \ += 1\n                var k = i\n                while k < grid.count && grid[k][j]\
    \ == 1 {\n                    grid[k][j] = 0\n                    k += 1\n   \
    \             }\n            }\n        }\n    }\n    return count / capacity\
    \ + (count % capacity == 0 ? 0 : 1)", "    var result = 0\n    var max_row = 0\n\
    \    for row in grid {\n        max_row = max(max_row, row.reduce(0, +))\n   \
    \ }\n    if max_row == 0 {\n        return 0\n    }\n    var current_fill = 0\n\
    \    var current_row = 0\n    while current_fill < max_row {\n        current_fill\
    \ = 0\n        for i in 0..<grid.count {\n            if grid[i][current_row]\
    \ == 1 {\n                current_fill += 1\n            }\n        }\n      \
    \  current_row += 1\n        result += 1\n    }\n    return result", "    var\
    \ result = 0\n    for row in grid {\n        var current_capacity = capacity\n\
    \        for well in row {\n            if well == 1 {\n                if current_capacity\
    \ == 0 {\n                    result += 1\n                    current_capacity\
    \ = capacity\n                }\n                current_capacity -= 1\n     \
    \       }\n        }\n    }\n    return result", "    var count = 0\n    var max_fill\
    \ = 0\n    for row in grid {\n        for cell in row {\n            if cell ==\
    \ 1 {\n                count += 1\n            }\n        }\n        max_fill\
    \ = max(max_fill, count)\n        count = 0\n    }\n    return max_fill / capacity\
    \ + (max_fill % capacity == 0 ? 0 : 1)", "    var result = 0\n    for row in grid\
    \ {\n        var water = 0\n        for well in row {\n            water += well\n\
    \            if water == capacity {\n                result += 1\n           \
    \     water = 0\n            }\n        }\n        if water > 0 {\n          \
    \  result += 1\n        }\n    }\n    return result", "    var result = 0\n  \
    \  var max_fill = 0\n    for row in grid {\n        for col in row {\n       \
    \     if col == 1 {\n                max_fill += 1\n            }\n        }\n\
    \    }\n    var fill = 0\n    for row in grid {\n        for col in row {\n  \
    \          if col == 1 {\n                fill += 1\n            }\n        }\n\
    \        if fill == max_fill {\n            break\n        }\n        result +=\
    \ 1\n        if fill + capacity > max_fill {\n            fill = max_fill\n  \
    \      } else {\n            fill += capacity\n        }\n    }\n    return result",
  "    var grid = grid\n    var count = 0\n    while true {\n        var filled =\
    \ false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    if i > 0 {\n        \
    \                grid[i-1][j] = min(grid[i-1][j] + capacity, 1)\n            \
    \        }\n                    if i < grid.count - 1 {\n                    \
    \    grid[i+1][j] = min(grid[i+1][j] + capacity, 1)\n                    }\n \
    \                   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + capacity, 1)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + capacity, 1)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var result = 0\n    var max_fill = 0\n    for row in grid {\n \
    \       for cell in row {\n            if cell == 1 {\n                max_fill\
    \ += 1\n            }\n        }\n    }\n    var current_fill = 0\n    while current_fill\
    \ < max_fill {\n        result += 1\n        current_fill += capacity\n    }\n\
    \    return result", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                let row = min(i + capacity, grid.count\
    \ - 1)\n                let col = min(j + capacity, grid[i].count - 1)\n     \
    \           for k in i...row {\n                    for l in j...col {\n     \
    \                   grid[k][l] = 0\n                    }\n                }\n\
    \            }\n        }\n    }\n    return count", "    var result = 0\n   \
    \ var max_fill = 0\n    for row in grid {\n        max_fill = 0\n        for cell\
    \ in row {\n            if cell == 1 {\n                max_fill += 1\n      \
    \      } else {\n                max_fill = 0\n            }\n            if max_fill\
    \ == capacity {\n                result += 1\n                max_fill = 0\n \
    \           }\n        }\n    }\n    return result", "    var result = 0\n   \
    \ for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n          \
    \  if grid[i][j] == 1 {\n                result += 1\n            }\n        }\n\
    \    }\n    return result / capacity", "    var result = 0\n    var max_height\
    \ = 0\n    for row in grid {\n        max_height = max(max_height, row.max()!)\n\
    \    }\n    for height in 1...max_height {\n        var fill_count = 0\n     \
    \   for row in grid {\n            for cell in row {\n                if cell\
    \ >= height {\n                    fill_count += 1\n                }\n      \
    \      }\n        }\n        result += fill_count / capacity\n        if fill_count\
    \ % capacity != 0 {\n            result += 1\n        }\n    }\n    return result",
  "    var result = 0\n    var max_fill = 0\n    for row in grid {\n        for col\
    \ in row {\n            if col == 1 {\n                max_fill += 1\n       \
    \     }\n        }\n    }\n    var fill = 0\n    while fill < max_fill {\n   \
    \     var current_fill = 0\n        for row in grid {\n            for col in\
    \ row {\n                if col == 1 {\n                    current_fill += 1\n\
    \                    if current_fill == capacity {\n                        result\
    \ += 1\n                        current_fill = 0\n                    }\n    \
    \            }\n            }\n        }\n        fill += capacity\n    }\n  \
    \  return result", "    var count = 0\n    var max_fill = 0\n    for row in grid\
    \ {\n        for cell in row {\n            if cell == 1 {\n                count\
    \ += 1\n            }\n        }\n        max_fill = max(max_fill, count)\n  \
    \      count = 0\n    }\n    return max_fill / capacity + (max_fill % capacity\
    \ == 0 ? 0 : 1)", "    var max_fill = 0\n    for row in grid {\n        var fill\
    \ = 0\n        for cell in row {\n            if cell == 1 {\n               \
    \ fill += 1\n            } else {\n                if fill > max_fill {\n    \
    \                max_fill = fill\n                }\n                fill = 0\n\
    \            }\n        }\n        if fill > max_fill {\n            max_fill\
    \ = fill\n        }\n    }\n    return max_fill", "    var grid = grid\n    var\
    \ count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      let row = min(i + capacity, grid.count - 1)\n                let col =\
    \ min(j + capacity, grid[i].count - 1)\n                for k in i...row {\n \
    \                   for l in j...col {\n                        grid[k][l] = 0\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return count", "    var grid = grid\n    var count = 0\n    while true {\n\
    \        var filled = false\n        for i in 0..<grid.count {\n            for\
    \ j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n           \
    \         filled = true\n                    grid[i][j] = 0\n                \
    \    if i > 0 {\n                        grid[i-1][j] = min(grid[i-1][j] + capacity,\
    \ 1)\n                    }\n                    if i < grid.count - 1 {\n   \
    \                     grid[i+1][j] = min(grid[i+1][j] + capacity, 1)\n       \
    \             }\n                    if j > 0 {\n                        grid[i][j-1]\
    \ = min(grid[i][j-1] + capacity, 1)\n                    }\n                 \
    \   if j < grid[i].count - 1 {\n                        grid[i][j+1] = min(grid[i][j+1]\
    \ + capacity, 1)\n                    }\n                }\n            }\n  \
    \      }\n        if !filled {\n            break\n        }\n        count +=\
    \ 1\n    }\n    return count", "    var result = 0\n    var max_fill = 0\n   \
    \ for row in grid {\n        max_fill = 0\n        for col in row {\n        \
    \    if col == 1 {\n                max_fill += 1\n            }\n        }\n\
    \        result += max_fill / capacity\n        if max_fill % capacity != 0 {\n\
    \            result += 1\n        }\n    }\n    return result", "    var result\
    \ = 0\n    var max_fill = 0\n    for i in 0..<grid.count {\n        max_fill =\
    \ 0\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                max_fill += 1\n            }\n        }\n        result += max_fill\
    \ / capacity\n        if max_fill % capacity > 0 {\n            result += 1\n\
    \        }\n    }\n    return result", "    let rows = grid.count\n    let cols\
    \ = grid[0].count\n    var result = 0\n    var row_max = [Int](repeating: 0, count:\
    \ rows)\n    for i in 0..<rows {\n        for j in 0..<cols {\n            row_max[i]\
    \ = max(row_max[i], grid[i][j])\n        }\n    }\n    for i in 0..<rows {\n \
    \       for j in 0..<cols {\n            if grid[i][j] == 1 {\n              \
    \  result += 1\n            }\n        }\n        result += row_max[i] / capacity\n\
    \        if row_max[i] % capacity != 0 {\n            result += 1\n        }\n\
    \    }\n    return result", "    var result = 0\n    var max_fill = 0\n    for\
    \ row in grid {\n        for col in row {\n            if col == 1 {\n       \
    \         max_fill += 1\n            }\n        }\n    }\n    var fill = 0\n \
    \   while fill < max_fill {\n        fill = 0\n        for row in grid {\n   \
    \         for col in row {\n                if col == 1 {\n                  \
    \  fill += 1\n                    if fill == capacity {\n                    \
    \    result += 1\n                        fill = 0\n                    }\n  \
    \              }\n            }\n        }\n        result += 1\n    }\n    return\
    \ result", "    var result = 0\n    var max_fill = 0\n    for row in grid {\n\
    \        for col in row {\n            if col == 1 {\n                max_fill\
    \ += 1\n            }\n        }\n    }\n    var fill = 0\n    for row in grid\
    \ {\n        for col in row {\n            if col == 1 {\n                fill\
    \ += 1\n            }\n        }\n        if fill == max_fill {\n            break\n\
    \        }\n        result += 1\n        fill = 0\n    }\n    return result",
  "    var count = 0\n    for i in 0..<grid.count {\n        var sum = 0\n       \
    \ for j in 0..<grid[i].count {\n            sum += grid[i][j]\n        }\n   \
    \     count += sum / capacity\n        if sum % capacity > 0 {\n            count\
    \ += 1\n        }\n    }\n    return count", "    var result = 0\n    var max_fill\
    \ = 0\n    for row in grid {\n        max_fill = 0\n        for col in row {\n\
    \            if col == 1 {\n                max_fill += 1\n            } else\
    \ {\n                max_fill = 0\n            }\n            if max_fill == capacity\
    \ {\n                result += 1\n                max_fill = 0\n            }\n\
    \        }\n    }\n    return result", "    var result = 0\n    var max_fill =\
    \ 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n   \
    \         if grid[i][j] == 1 {\n                max_fill += 1\n            }\n\
    \        }\n    }\n    var fill = 0\n    var i = 0\n    while fill < max_fill\
    \ {\n        var j = 0\n        while j < grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                fill += 1\n                grid[i][j] = 0\n        \
    \    }\n            j += 1\n        }\n        result += 1\n        i += 1\n \
    \       if i == grid.count {\n            i = 0\n        }\n    }\n    return\
    \ result", "    var result = 0\n    var max_fill = 0\n    for row in grid {\n\
    \        for col in row {\n            if col == 1 {\n                max_fill\
    \ += 1\n            }\n        }\n    }\n    for row in grid {\n        for col\
    \ in row {\n            if col == 1 {\n                result += 1\n         \
    \   }\n        }\n        if result == max_fill {\n            break\n       \
    \ }\n        result = 0\n    }\n    return result", "    var result = 0\n    var\
    \ max_fill = 0\n    for row in grid {\n        for cell in row {\n           \
    \ if cell == 1 {\n                max_fill += 1\n            }\n        }\n  \
    \  }\n    var current_fill = 0\n    for row in grid {\n        for cell in row\
    \ {\n            if cell == 1 {\n                current_fill += 1\n         \
    \   }\n            if current_fill == max_fill {\n                result += 1\n\
    \                current_fill = 0\n            }\n        }\n    }\n    return\
    \ result", "    var result = 0\n    for i in 0..<grid.count {\n        var sum\
    \ = 0\n        for j in 0..<grid[i].count {\n            sum += grid[i][j]\n \
    \       }\n        result += sum / capacity\n        if sum % capacity != 0 {\n\
    \            result += 1\n        }\n    }\n    return result", "    var result\
    \ = 0\n    for row in grid {\n        var sum = 0\n        for cell in row {\n\
    \            sum += cell\n            if sum == capacity {\n                result\
    \ += 1\n                sum = 0\n            }\n        }\n        if sum > 0\
    \ {\n            result += 1\n        }\n    }\n    return result", "    var grid\
    \ = grid\n    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      grid[i][j] = 0\n                if i > 0 {\n                    grid[i-1][j]\
    \ = min(grid[i-1][j] + 1, capacity)\n                }\n                if i <\
    \ grid.count - 1 {\n                    grid[i+1][j] = min(grid[i+1][j] + 1, capacity)\n\
    \                }\n                if j > 0 {\n                    grid[i][j-1]\
    \ = min(grid[i][j-1] + 1, capacity)\n                }\n                if j <\
    \ grid[i].count - 1 {\n                    grid[i][j+1] = min(grid[i][j+1] + 1,\
    \ capacity)\n                }\n            }\n        }\n    }\n    return count",
  "    var result = 0\n    for row in grid {\n        var sum = 0\n        for col\
    \ in row {\n            sum += col\n            if sum == capacity {\n       \
    \         result += 1\n                sum = 0\n            }\n        }\n   \
    \     if sum > 0 {\n            result += 1\n        }\n    }\n    return result",
  "    var grid = grid\n    var count = 0\n    while true {\n        var found = false\n\
    \        for i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n\
    \                if grid[i][j] == 1 {\n                    found = true\n    \
    \                grid[i][j] = 0\n                    count += 1\n            \
    \    }\n            }\n        }\n        if !found {\n            break\n   \
    \     }\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == -1 {\n                    grid[i][j] = 1\n\
    \                }\n            }\n        }\n        for i in 0..<grid.count\
    \ {\n            for j in 0..<grid[i].count {\n                if grid[i][j] ==\
    \ 1 {\n                    for k in 0..<capacity {\n                        if\
    \ i + k < grid.count {\n                            grid[i + k][j] = -1\n    \
    \                    }\n                    }\n                }\n           \
    \ }\n        }\n    }\n    return count", "    var result = 0\n    var max_fill\
    \ = 0\n    for row in grid {\n        max_fill = 0\n        for col in row {\n\
    \            if col == 1 {\n                max_fill += 1\n            } else\
    \ {\n                result += max_fill / capacity\n                max_fill =\
    \ 0\n            }\n        }\n        result += max_fill / capacity\n    }\n\
    \    return result", "    var count = 0\n    var max_fill = 0\n    for row in\
    \ grid {\n        for col in row {\n            if col == 1 {\n              \
    \  count += 1\n            }\n        }\n        max_fill = max(max_fill, count)\n\
    \        count = 0\n    }\n    return max_fill / capacity + (max_fill % capacity\
    \ > 0 ? 1 : 0)", "    var count = 0\n    var bucket = 0\n    for row in grid {\n\
    \        for col in row {\n            if col == 1 {\n                bucket +=\
    \ 1\n            }\n        }\n        if bucket > capacity {\n            count\
    \ += bucket / capacity\n            bucket = bucket % capacity\n        }\n  \
    \  }\n    return count", "    var count = 0\n    for row in grid {\n        var\
    \ sum = 0\n        for i in row {\n            sum += i\n        }\n        count\
    \ += sum / capacity\n        if sum % capacity != 0 {\n            count += 1\n\
    \        }\n    }\n    return count", "    var result = 0\n    var max_fill =\
    \ 0\n    for row in grid {\n        for col in row {\n            if col == 1\
    \ {\n                max_fill += 1\n            }\n        }\n    }\n    var fill\
    \ = 0\n    for row in grid {\n        for col in row {\n            if col ==\
    \ 1 {\n                fill += 1\n            }\n        }\n        if fill ==\
    \ max_fill {\n            break\n        }\n        result += 1\n        fill\
    \ = 0\n    }\n    return result", "    var result = 0\n    for row in grid {\n\
    \        var current_fill = 0\n        for well in row {\n            if well\
    \ == 1 {\n                current_fill += 1\n            } else {\n          \
    \      if current_fill > 0 {\n                    result += 1\n              \
    \      current_fill = 0\n                }\n            }\n        }\n       \
    \ if current_fill > 0 {\n            result += 1\n        }\n    }\n    return\
    \ result", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, i: i, j: j, capacity:\
    \ capacity)\n            }\n        }\n    }\n    return count", "    var grid\
    \ = grid\n    var count = 0\n    while true {\n        var filled = false\n  \
    \      for i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n \
    \               if grid[i][j] == 1 {\n                    filled = true\n    \
    \                grid[i][j] = 0\n                    if i > 0 {\n            \
    \            grid[i-1][j] = min(grid[i-1][j] + capacity, 1)\n                \
    \    }\n                    if i < grid.count - 1 {\n                        grid[i+1][j]\
    \ = min(grid[i+1][j] + capacity, 1)\n                    }\n                 \
    \   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1] + capacity,\
    \ 1)\n                    }\n                    if j < grid[i].count - 1 {\n\
    \                        grid[i][j+1] = min(grid[i][j+1] + capacity, 1)\n    \
    \                }\n                }\n            }\n        }\n        if !filled\
    \ {\n            break\n        }\n        count += 1\n    }\n    return count",
  "    var result = 0\n    var max_fill = 0\n    for row in grid {\n        max_fill\
    \ = 0\n        for column in row {\n            if column == 1 {\n           \
    \     max_fill += 1\n            }\n        }\n        result += max_fill / capacity\n\
    \        if max_fill % capacity != 0 {\n            result += 1\n        }\n \
    \   }\n    return result", "    var result = 0\n    var max_fill = 0\n    for\
    \ row in grid {\n        for cell in row {\n            if cell == 1 {\n     \
    \           max_fill += 1\n            }\n        }\n    }\n    var fill = 0\n\
    \    while fill < max_fill {\n        for row in grid {\n            for cell\
    \ in row {\n                if cell == 1 {\n                    fill += 1\n  \
    \                  if fill == max_fill {\n                        return result\n\
    \                    }\n                }\n            }\n            result +=\
    \ 1\n        }\n    }\n    return result", "    let n = grid.count\n    let m\
    \ = grid[0].count\n    var water = 0\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<m {\n            water += grid[i][j]\n        }\n    }\n\
    \    while water > 0 {\n        count += 1\n        var i = 0\n        var j =\
    \ 0\n        while i < n && j < m {\n            if grid[i][j] == 1 {\n      \
    \          water -= 1\n                grid[i][j] = 0\n            }\n       \
    \     if j == m - 1 {\n                i += 1\n                j = 0\n       \
    \     } else {\n                j += 1\n            }\n        }\n    }\n    return\
    \ count", "    var grid = grid\n    let rows = grid.count\n    let cols = grid[0].count\n\
    \    var count = 0\n    var i = 0\n    while i < rows {\n        var j = 0\n \
    \       while j < cols {\n            if grid[i][j] == 1 {\n                count\
    \ += 1\n                var k = i\n                while k < rows && k < i + capacity\
    \ {\n                    grid[k][j] = 0\n                    k += 1\n        \
    \        }\n            }\n            j += 1\n        }\n        i += 1\n   \
    \ }\n    return count", "    var count = 0\n    for row in grid {\n        var\
    \ sum = 0\n        for i in row {\n            sum += i\n        }\n        count\
    \ += sum / capacity\n        if sum % capacity != 0 {\n            count += 1\n\
    \        }\n    }\n    return count", "    var result = 0\n    var max_fill =\
    \ 0\n    for i in 0..<grid.count {\n        max_fill = 0\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                max_fill += 1\n       \
    \     }\n        }\n        result += max_fill / capacity\n        if max_fill\
    \ % capacity != 0 {\n            result += 1\n        }\n    }\n    return result",
  '    return 0', "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                fill(grid: &grid, i: i, j: j, capacity:\
    \ capacity)\n            }\n        }\n    }\n    return count", "    var result\
    \ = 0\n    for row in grid {\n        var fill = 0\n        for cell in row {\n\
    \            if cell == 1 {\n                fill += 1\n            } else {\n\
    \                if fill > 0 {\n                    result += 1\n            \
    \        fill = 0\n                }\n            }\n        }\n        if fill\
    \ > 0 {\n            result += 1\n        }\n    }\n    return result * capacity",
  "    var result = 0\n    for row in grid {\n        var sum = 0\n        for i in\
    \ 0..<row.count {\n            if row[i] == 1 {\n                sum += 1\n  \
    \          } else {\n                if sum > 0 {\n                    let fill\
    \ = min(sum, capacity)\n                    result += fill\n                 \
    \   sum -= fill\n                }\n            }\n        }\n        if sum >\
    \ 0 {\n            result += sum\n        }\n    }\n    return result", "    var\
    \ result = 0\n    var max_fill = 0\n    for row in grid {\n        for col in\
    \ row {\n            if col == 1 {\n                max_fill += 1\n          \
    \  }\n        }\n    }\n    var fill = 0\n    for row in grid {\n        for col\
    \ in row {\n            if col == 1 {\n                fill += 1\n           \
    \ }\n        }\n        if fill == max_fill {\n            break\n        }\n\
    \        result += 1\n        fill = 0\n    }\n    return result", "    var result\
    \ = 0\n    var max_fill = 0\n    for row in grid {\n        max_fill = 0\n   \
    \     for col in row {\n            if col == 1 {\n                max_fill +=\
    \ 1\n            } else {\n                if max_fill > 0 {\n               \
    \     result += 1\n                    max_fill = 0\n                }\n     \
    \       }\n        }\n        if max_fill > 0 {\n            result += 1\n   \
    \     }\n    }\n    return result * capacity", "    var grid = grid\n    var count\
    \ = 0\n    while true {\n        var row = 0\n        var col = 0\n        var\
    \ max_height = 0\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] > max_height {\n                    max_height\
    \ = grid[i][j]\n                    row = i\n                    col = j\n   \
    \             }\n            }\n        }\n        if max_height == 0 {\n    \
    \        break\n        }\n        for i in 0..<grid.count {\n            for\
    \ j in 0..<grid[i].count {\n                if grid[i][j] > 0 {\n            \
    \        grid[i][j] -= 1\n                }\n            }\n        }\n      \
    \  grid[row][col] = capacity\n        count += 1\n    }\n    return count", " \
    \   var result = 0\n    var max_row = 0\n    for row in grid {\n        max_row\
    \ = max(max_row, row.reduce(0, +))\n    }\n    var current_max = 0\n    for row\
    \ in grid {\n        current_max = max(current_max, row.reduce(0, +))\n      \
    \  if current_max == max_row {\n            break\n        }\n        result +=\
    \ 1\n    }\n    return result", "    var grid = grid\n    var count = 0\n    while\
    \ true {\n        var filled = false\n        for i in 0..<grid.count {\n    \
    \        for j in 0..<grid[i].count {\n                if grid[i][j] > 0 {\n \
    \                   filled = true\n                    let amount = min(grid[i][j],\
    \ capacity)\n                    grid[i][j] -= amount\n                    if\
    \ i > 0 {\n                        grid[i-1][j] += amount\n                  \
    \  }\n                    if i < grid.count - 1 {\n                        grid[i+1][j]\
    \ += amount\n                    }\n                    if j > 0 {\n         \
    \               grid[i][j-1] += amount\n                    }\n              \
    \      if j < grid[i].count - 1 {\n                        grid[i][j+1] += amount\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var result = 0\n    let rows = grid.count\n    let cols = grid[0].count\n\
    \    var max_row = Array(repeating: 0, count: cols)\n    for i in 0..<rows {\n\
    \        for j in 0..<cols {\n            if grid[i][j] == 1 {\n             \
    \   max_row[j] += 1\n            }\n        }\n    }\n    for i in 0..<rows {\n\
    \        for j in 0..<cols {\n            if grid[i][j] == 1 {\n             \
    \   result += 1\n                max_row[j] -= 1\n            }\n            if\
    \ max_row[j] == 0 {\n                break\n            }\n        }\n    }\n\
    \    return result", "    var count = 0\n    var max_fill = 0\n    for row in\
    \ grid {\n        for col in row {\n            if col == 1 {\n              \
    \  count += 1\n            }\n        }\n        if count > max_fill {\n     \
    \       max_fill = count\n        }\n        count = 0\n    }\n    return max_fill\
    \ / capacity", "    var result = 0\n    let rows = grid.count\n    let cols =\
    \ grid[0].count\n    var max_row = [Int](repeating: 0, count: cols)\n    for row\
    \ in 0..<rows {\n        for col in 0..<cols {\n            if grid[row][col]\
    \ == 1 {\n                max_row[col] += 1\n            }\n        }\n    }\n\
    \    for row in 0..<rows {\n        for col in 0..<cols {\n            if grid[row][col]\
    \ == 1 {\n                result += 1\n                if max_row[col] > capacity\
    \ {\n                    max_row[col] -= capacity\n                } else {\n\
    \                    max_row[col] = 0\n                }\n            }\n    \
    \    }\n    }\n    return result", "    var result = 0\n    for row in grid {\n\
    \        var count = 0\n        for cell in row {\n            if cell == 1 {\n\
    \                count += 1\n            }\n        }\n        result += count\
    \ / capacity\n        if count % capacity != 0 {\n            result += 1\n  \
    \      }\n    }\n    return result", "    var result = 0\n    for i in 0..<grid.count\
    \ {\n        var sum = 0\n        for j in 0..<grid[i].count {\n            sum\
    \ += grid[i][j]\n        }\n        result += (sum + capacity - 1) / capacity\n\
    \    }\n    return result", "    var result = 0\n    var max_fill = 0\n    for\
    \ row in grid {\n        for cell in row {\n            if cell == 1 {\n     \
    \           max_fill += 1\n            }\n        }\n    }\n    var fill = 0\n\
    \    for row in grid {\n        for cell in row {\n            if cell == 1 {\n\
    \                fill += 1\n            }\n        }\n        if fill == max_fill\
    \ {\n            break\n        }\n        result += 1\n        fill = 0\n   \
    \ }\n    return result", '    return 0', "    var grid = grid\n    var count =\
    \ 0\n    while true {\n        var max_row = -1\n        var max_col = -1\n  \
    \      var max_val = 0\n        for i in 0..<grid.count {\n            for j in\
    \ 0..<grid[i].count {\n                if grid[i][j] > max_val {\n           \
    \         max_val = grid[i][j]\n                    max_row = i\n            \
    \        max_col = j\n                }\n            }\n        }\n        if\
    \ max_val == 0 {\n            break\n        }\n        count += 1\n        for\
    \ i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n          \
    \      if grid[i][j] > 0 {\n                    let diff = min(capacity, max_val\
    \ - grid[i][j])\n                    grid[i][j] += diff\n                    max_val\
    \ -= diff\n                }\n            }\n        }\n    }\n    return count",
  '    return 0', "    var result = 0\n    var max_fill = 0\n    for row in grid {\n\
    \        for col in row {\n            if col == 1 {\n                max_fill\
    \ += 1\n            }\n        }\n    }\n    var fill = 0\n    while fill < max_fill\
    \ {\n        var fill_this_round = 0\n        for row in grid {\n            for\
    \ col in row {\n                if col == 1 {\n                    fill_this_round\
    \ += 1\n                    fill += 1\n                    if fill_this_round\
    \ == capacity {\n                        result += 1\n                       \
    \ fill_this_round = 0\n                    }\n                }\n            }\n\
    \        }\n        if fill_this_round > 0 {\n            result += 1\n      \
    \  }\n    }\n    return result", "    var result = 0\n    var max_fill = 0\n \
    \   for row in grid {\n        for cell in row {\n            if cell == 1 {\n\
    \                max_fill += 1\n            }\n        }\n    }\n    var fill\
    \ = 0\n    for row in grid {\n        for cell in row {\n            if cell ==\
    \ 1 {\n                fill += 1\n            }\n        }\n        if fill ==\
    \ max_fill {\n            break\n        }\n        result += 1\n        fill\
    \ = 0\n    }\n    return result", "    var count = 0\n    var wells = grid\n \
    \   var max_fill = 0\n    for i in 0..<wells.count {\n        for j in 0..<wells[i].count\
    \ {\n            max_fill = max(max_fill, wells[i][j])\n        }\n    }\n   \
    \ for fill in 0..<max_fill {\n        for i in 0..<wells.count {\n           \
    \ for j in 0..<wells[i].count {\n                if wells[i][j] > 0 {\n      \
    \              wells[i][j] -= 1\n                    count += 1\n            \
    \    }\n            }\n        }\n    }\n    return count", "    var result =\
    \ 0\n    var max_row = 0\n    var max_col = 0\n    for row in grid {\n       \
    \ max_row = max(max_row, row.reduce(0, +))\n        for (col, val) in row.enumerated()\
    \ {\n            max_col = max(max_col, val)\n        }\n    }\n    for i in 0..<max_row\
    \ {\n        for j in 0..<max_col {\n            var filled = 0\n            for\
    \ row in grid {\n                for (col, val) in row.enumerated() {\n      \
    \              if val > 0 {\n                        filled += 1\n           \
    \             grid[col][row] -= 1\n                    }\n                }\n\
    \            }\n            if filled > 0 {\n                result += 1\n   \
    \         }\n        }\n    }\n    return result", "    var result = 0\n    var\
    \ max_fill = 0\n    for row in grid {\n        for col in row {\n            if\
    \ col == 1 {\n                max_fill += 1\n            }\n        }\n    }\n\
    \    while max_fill > 0 {\n        max_fill = 0\n        for i in 0..<grid.count\
    \ {\n            var fill = 0\n            for j in 0..<grid[i].count {\n    \
    \            if grid[i][j] == 1 {\n                    fill += 1\n           \
    \     }\n            }\n            if fill > capacity {\n                max_fill\
    \ += fill - capacity\n                result += 1\n            } else {\n    \
    \            result += 1\n            }\n        }\n    }\n    return result",
  "    var result = 0\n    var max_fill = 0\n    for row in grid {\n        for col\
    \ in row {\n            if col == 1 {\n                max_fill += 1\n       \
    \     }\n        }\n    }\n    var fill = 0\n    var i = 0\n    while fill < max_fill\
    \ {\n        var j = 0\n        while j < grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                fill += 1\n                grid[i][j] = 0\n        \
    \    }\n            j += 1\n        }\n        i += 1\n        result += 1\n \
    \   }\n    return result", "    var grid = grid\n    var count = 0\n    while\
    \ true {\n        var filled = false\n        for i in 0..<grid.count {\n    \
    \        for j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n\
    \                    filled = true\n                    grid[i][j] = 0\n     \
    \               if i > 0 {\n                        grid[i-1][j] = min(grid[i-1][j]\
    \ + capacity, 1)\n                    }\n                    if i < grid.count\
    \ - 1 {\n                        grid[i+1][j] = min(grid[i+1][j] + capacity, 1)\n\
    \                    }\n                    if j > 0 {\n                     \
    \   grid[i][j-1] = min(grid[i][j-1] + capacity, 1)\n                    }\n  \
    \                  if j < grid[i].count - 1 {\n                        grid[i][j+1]\
    \ = min(grid[i][j+1] + capacity, 1)\n                    }\n                }\n\
    \            }\n        }\n        if !filled {\n            break\n        }\n\
    \        count += 1\n    }\n    return count", "    var total = 0\n    for row\
    \ in grid {\n        var max_fill = 0\n        for well in row {\n           \
    \ if well == 1 {\n                max_fill += 1\n            } else {\n      \
    \          max_fill = 0\n            }\n            if max_fill > capacity {\n\
    \                max_fill = capacity\n            }\n        }\n        total\
    \ += max_fill\n    }\n    return total", "    let n = grid.count\n    let m =\
    \ grid[0].count\n    var grid = grid\n    var count = 0\n    for i in 0..<n {\n\
    \        for j in 0..<m {\n            if grid[i][j] == 1 {\n                count\
    \ += 1\n                fill(&grid, i, j, capacity)\n            }\n        }\n\
    \    }\n    return count", '    return 0', "    var count = 0\n    var wells =\
    \ grid\n    for i in 0..<wells.count {\n        for j in 0..<wells[i].count {\n\
    \            if wells[i][j] == 1 {\n                count += 1\n             \
    \   wells[i][j] = 0\n                for k in 0..<wells.count {\n            \
    \        if wells[k][j] == 1 {\n                        wells[k][j] = 0\n    \
    \                    count += 1\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return count", "    var result = 0\n    var\
    \ max_fill = 0\n    for row in grid {\n        for cell in row {\n           \
    \ if cell == 1 {\n                max_fill += 1\n            }\n        }\n  \
    \  }\n    var current_fill = 0\n    for row in grid {\n        for cell in row\
    \ {\n            if cell == 1 {\n                current_fill += 1\n         \
    \   }\n            if current_fill == max_fill {\n                result += 1\n\
    \                current_fill = 0\n            }\n        }\n    }\n    return\
    \ result", "    var grid = grid\n    var count = 0\n    while true {\n       \
    \ var filled = false\n        for i in 0..<grid.count {\n            for j in\
    \ 0..<grid[i].count {\n                if grid[i][j] == 1 {\n                \
    \    filled = true\n                    grid[i][j] = 0\n                    if\
    \ i > 0 {\n                        grid[i-1][j] = min(grid[i-1][j] + capacity,\
    \ 1)\n                    }\n                    if i < grid.count - 1 {\n   \
    \                     grid[i+1][j] = min(grid[i+1][j] + capacity, 1)\n       \
    \             }\n                    if j > 0 {\n                        grid[i][j-1]\
    \ = min(grid[i][j-1] + capacity, 1)\n                    }\n                 \
    \   if j < grid[i].count - 1 {\n                        grid[i][j+1] = min(grid[i][j+1]\
    \ + capacity, 1)\n                    }\n                }\n            }\n  \
    \      }\n        if !filled {\n            break\n        }\n        count +=\
    \ 1\n    }\n    return count", "    var result = 0\n    var max_fill = 0\n   \
    \ for row in grid {\n        for i in 0..<row.count {\n            if row[i] ==\
    \ 1 {\n                max_fill += 1\n            }\n        }\n    }\n    while\
    \ max_fill > 0 {\n        result += 1\n        max_fill -= capacity\n    }\n \
    \   return result", "    var count = 0\n    var max_fill = 0\n    for row in grid\
    \ {\n        for cell in row {\n            if cell == 1 {\n                count\
    \ += 1\n            }\n        }\n        max_fill = max(max_fill, count)\n  \
    \      count = 0\n    }\n    return max_fill / capacity + (max_fill % capacity\
    \ > 0 ? 1 : 0)", "    var result = 0\n    for i in 0..<grid.count {\n        var\
    \ row = grid[i]\n        var max_fill = 0\n        for j in 0..<row.count {\n\
    \            if row[j] == 1 {\n                max_fill += 1\n            }\n\
    \        }\n        result += max_fill / capacity\n        if max_fill % capacity\
    \ > 0 {\n            result += 1\n        }\n    }\n    return result", "    var\
    \ grid = grid\n    var count = 0\n    while true {\n        var max_row = -1\n\
    \        var max_fill = 0\n        for i in 0..<grid.count {\n            var\
    \ fill = 0\n            for j in 0..<grid[i].count {\n                if grid[i][j]\
    \ == 1 {\n                    fill += 1\n                }\n            }\n  \
    \          if fill > max_fill {\n                max_fill = fill\n           \
    \     max_row = i\n            }\n        }\n        if max_fill == 0 {\n    \
    \        break\n        }\n        for j in 0..<grid[max_row].count {\n      \
    \      if grid[max_row][j] == 1 {\n                grid[max_row][j] = 0\n    \
    \            count += 1\n            }\n        }\n        for i in 0..<grid.count\
    \ {\n            if i == max_row {\n                continue\n            }\n\
    \            for j in 0..<grid[i].count {\n                if grid[i][j] == 1\
    \ {\n                    grid[i][j] = 0\n                    count += 1\n    \
    \            }\n                if count == capacity {\n                    break\n\
    \                }\n            }\n            if count == capacity {\n      \
    \          break\n            }\n        }\n        count = 0\n    }\n    return\
    \ count", "    var count = 0\n    var max_fill = 0\n    for row in grid {\n  \
    \      for cell in row {\n            if cell == 1 {\n                count +=\
    \ 1\n            }\n        }\n        max_fill = max(max_fill, count)\n     \
    \   count = 0\n    }\n    return max_fill / capacity + (max_fill % capacity >\
    \ 0 ? 1 : 0)", "    var count = 0\n    var max = 0\n    for row in grid {\n  \
    \      for i in row {\n            if i == 1 {\n                count += 1\n \
    \           }\n        }\n        if count > max {\n            max = count\n\
    \        }\n        count = 0\n    }\n    return max / capacity", "    var count\
    \ = 0\n    var max_fill = 0\n    for row in grid {\n        for cell in row {\n\
    \            if cell == 1 {\n                count += 1\n            }\n     \
    \   }\n        max_fill = max(max_fill, count)\n        count = 0\n    }\n   \
    \ return max_fill / capacity + (max_fill % capacity > 0 ? 1 : 0)", "    var result\
    \ = 0\n    for row in grid {\n        var water = 0\n        for well in row {\n\
    \            water += well\n            if water == capacity {\n             \
    \   result += 1\n                water = 0\n            }\n        }\n       \
    \ if water > 0 {\n            result += 1\n        }\n    }\n    return result",
  "    var grid = grid\n    var count = 0\n    while true {\n        var filled =\
    \ false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    if i > 0 {\n        \
    \                grid[i-1][j] = min(grid[i-1][j] + capacity, 1)\n            \
    \        }\n                    if i < grid.count - 1 {\n                    \
    \    grid[i+1][j] = min(grid[i+1][j] + capacity, 1)\n                    }\n \
    \                   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + capacity, 1)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + capacity, 1)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var grid = grid\n    var result = 0\n    while true {\n       \
    \ var filled = false\n        for i in 0..<grid.count {\n            for j in\
    \ 0..<grid[i].count {\n                if grid[i][j] == 1 {\n                \
    \    filled = true\n                    let row = grid[i]\n                  \
    \  let row_capacity = capacity - row.reduce(0, +)\n                    if row_capacity\
    \ > 0 {\n                        result += 1\n                        for k in\
    \ 0..<row.count {\n                            grid[i][k] = min(1, grid[i][k]\
    \ + row_capacity)\n                        }\n                    }\n        \
    \        }\n            }\n        }\n        if !filled {\n            break\n\
    \        }\n    }\n    return result", "    var result = 0\n    var max_fill =\
    \ 0\n    for row in grid {\n        for cell in row {\n            if cell ==\
    \ 1 {\n                max_fill += 1\n            }\n        }\n    }\n    var\
    \ current_fill = 0\n    while current_fill < max_fill {\n        for row in grid\
    \ {\n            for cell in row {\n                if cell == 1 {\n         \
    \           current_fill += 1\n                }\n            }\n            if\
    \ current_fill < max_fill {\n                result += 1\n            }\n    \
    \    }\n    }\n    return result", '    return 0', "    // edge case\n    if grid.count\
    \ == 0 {\n        return 0\n    }\n    // init\n    var count = 0\n    var max_fill\
    \ = 0\n    var max_fill_index = 0\n    var max_fill_row = 0\n    // find max fill\n\
    \    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n       \
    \     if grid[i][j] == 1 {\n                count += 1\n            }\n      \
    \  }\n        if count > max_fill {\n            max_fill = count\n          \
    \  max_fill_index = i\n        }\n        count = 0\n    }\n    // fill\n    for\
    \ i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if\
    \ grid[i][j] == 1 {\n                max_fill_row += 1\n            }\n      \
    \  }\n        if max_fill_row > capacity {\n            max_fill_row = capacity\n\
    \        }\n        count += max_fill_row\n        max_fill_row = 0\n    }\n \
    \   return count", "    var result = 0\n    var max_row = 0\n    var max_col =\
    \ 0\n    for row in grid {\n        max_row = max(max_row, row.reduce(0, +))\n\
    \        for (index, col) in row.enumerated() {\n            max_col = max(max_col,\
    \ col)\n            if col == 1 {\n                result += 1\n            }\n\
    \        }\n    }\n    result += max(max_row, max_col)\n    return result", " \
    \   var result = 0\n    var max_fill = 0\n    for row in grid {\n        for col\
    \ in row {\n            if col == 1 {\n                max_fill += 1\n       \
    \     }\n        }\n    }\n    var fill = 0\n    var row = 0\n    while fill <\
    \ max_fill {\n        var col = 0\n        while col < grid[row].count {\n   \
    \         if grid[row][col] == 1 {\n                fill += 1\n              \
    \  grid[row][col] = 0\n            }\n            col += 1\n        }\n      \
    \  row += 1\n        result += 1\n    }\n    return result", "    var grid = grid\n\
    \    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n    \
    \    }\n    }\n    return count", "    var result = 0\n    var max_fill = 0\n\
    \    for i in 0..<grid.count {\n        max_fill = 0\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                max_fill += 1\n       \
    \     }\n        }\n        result += max_fill / capacity\n        if max_fill\
    \ % capacity > 0 {\n            result += 1\n        }\n    }\n    return result",
  "    var grid = grid\n    var count = 0\n    while true {\n        var filled =\
    \ false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    if i > 0 {\n        \
    \                grid[i-1][j] = min(grid[i-1][j] + capacity, 1)\n            \
    \        }\n                    if i < grid.count - 1 {\n                    \
    \    grid[i+1][j] = min(grid[i+1][j] + capacity, 1)\n                    }\n \
    \                   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + capacity, 1)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + capacity, 1)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var count = 0\n    var max_fill = 0\n    for row in grid {\n  \
    \      for col in row {\n            if col == 1 {\n                count += 1\n\
    \            }\n        }\n        max_fill = max(max_fill, count)\n        count\
    \ = 0\n    }\n    return max_fill / capacity + (max_fill % capacity > 0 ? 1 :\
    \ 0)", "    var result = 0\n    for row in grid {\n        var fill = 0\n    \
    \    for cell in row {\n            if cell == 1 {\n                fill += 1\n\
    \            } else {\n                if fill > 0 {\n                    result\
    \ += 1\n                    fill = 0\n                }\n            }\n     \
    \   }\n        if fill > 0 {\n            result += 1\n        }\n    }\n    return\
    \ result", "    var result = 0\n    for row in grid {\n        var sum = 0\n \
    \       for col in row {\n            sum += col\n            if sum > capacity\
    \ {\n                result += 1\n                sum = col\n            }\n \
    \       }\n        result += 1\n    }\n    return result", '    return 0', " \
    \   var result = 0\n    for row in grid {\n        var current = 0\n        for\
    \ cell in row {\n            if cell == 1 {\n                current += 1\n  \
    \          } else {\n                if current > 0 {\n                    let\
    \ fill = min(current, capacity)\n                    result += fill\n        \
    \            current -= fill\n                }\n            }\n        }\n  \
    \      if current > 0 {\n            result += current\n        }\n    }\n   \
    \ return result", "    var result = 0\n    var max_height = 0\n    for row in\
    \ grid {\n        max_height = max(max_height, row.max()!)\n    }\n    for i in\
    \ 0..<max_height {\n        var fill_count = 0\n        for row in grid {\n  \
    \          for cell in row {\n                if cell >= i {\n               \
    \     fill_count += 1\n                }\n            }\n        }\n        result\
    \ += fill_count / capacity\n        if fill_count % capacity != 0 {\n        \
    \    result += 1\n        }\n    }\n    return result", "    var result = 0\n\
    \    var max_fill = 0\n    for row in grid {\n        for col in row {\n     \
    \       if col == 1 {\n                max_fill += 1\n            }\n        }\n\
    \    }\n    var fill = 0\n    for row in grid {\n        for col in row {\n  \
    \          if col == 1 {\n                fill += 1\n            }\n        }\n\
    \        if fill == max_fill {\n            break\n        }\n        result +=\
    \ 1\n        fill = 0\n    }\n    return result", "    var result = 0\n    var\
    \ max_fill = 0\n    for row in grid {\n        for col in row {\n            if\
    \ col == 1 {\n                max_fill += 1\n            }\n        }\n    }\n\
    \    var fill = 0\n    for row in grid {\n        for col in row {\n         \
    \   if col == 1 {\n                fill += 1\n            }\n        }\n     \
    \   if fill == max_fill {\n            break\n        }\n        result += 1\n\
    \        fill = 0\n    }\n    return result", "    var result = 0\n    for i in\
    \ 0..<grid.count {\n        var sum = 0\n        for j in 0..<grid[i].count {\n\
    \            sum += grid[i][j]\n        }\n        result += sum / capacity\n\
    \        if sum % capacity != 0 {\n            result += 1\n        }\n    }\n\
    \    return result", "    var grid = grid\n    var count = 0\n    while true {\n\
    \        var filled = false\n        for i in 0..<grid.count {\n            for\
    \ j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n           \
    \         filled = true\n                    grid[i][j] = 0\n                \
    \    if i > 0 {\n                        grid[i-1][j] = min(grid[i-1][j] + capacity,\
    \ 1)\n                    }\n                    if i < grid.count - 1 {\n   \
    \                     grid[i+1][j] = min(grid[i+1][j] + capacity, 1)\n       \
    \             }\n                    if j > 0 {\n                        grid[i][j-1]\
    \ = min(grid[i][j-1] + capacity, 1)\n                    }\n                 \
    \   if j < grid[i].count - 1 {\n                        grid[i][j+1] = min(grid[i][j+1]\
    \ + capacity, 1)\n                    }\n                }\n            }\n  \
    \      }\n        if !filled {\n            break\n        }\n        count +=\
    \ 1\n    }\n    return count", "    let n = grid.count\n    let m = grid[0].count\n\
    \    var grid = grid\n    var count = 0\n    for i in 0..<n {\n        for j in\
    \ 0..<m {\n            if grid[i][j] == 1 {\n                count += 1\n    \
    \            fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n\
    \        }\n    }\n    return count", "    // 1. find the max height of each column\n\
    \    var max_height = [Int](repeating: 0, count: grid[0].count)\n    for row in\
    \ grid {\n        for (i, col) in row.enumerated() {\n            if col == 1\
    \ {\n                max_height[i] += 1\n            }\n        }\n    }\n   \
    \ // 2. find the min height of each column\n    var min_height = [Int](repeating:\
    \ Int.max, count: grid[0].count)\n    for row in grid {\n        for (i, col)\
    \ in row.enumerated() {\n            if col == 1 {\n                min_height[i]\
    \ = min(min_height[i], 1)\n            } else {\n                min_height[i]\
    \ = min(min_height[i], 0)\n            }\n        }\n    }\n    // 3. find the\
    \ max height of each column\n    var max_fill = 0\n    for i in 0..<max_height.count\
    \ {\n        max_fill = max(max_fill, max_height[i] - min_height[i])\n    }\n\
    \    // 4. find the number of times we need to lower the buckets\n    return max_fill\
    \ / capacity + (max_fill % capacity == 0 ? 0 : 1)", '    return 0', "    var max_fill\
    \ = 0\n    for row in grid {\n        var fill = 0\n        for well in row {\n\
    \            fill += well\n            if fill == capacity {\n               \
    \ max_fill += 1\n                fill = 0\n            }\n        }\n        if\
    \ fill > 0 {\n            max_fill += 1\n        }\n    }\n    return max_fill",
  "    var grid = grid\n    var count = 0\n    while true {\n        var filled =\
    \ false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    for k in 0..<grid.count\
    \ {\n                        if grid[k][j] < capacity {\n                    \
    \        grid[k][j] += 1\n                        }\n                    }\n \
    \               }\n            }\n        }\n        if !filled {\n          \
    \  break\n        }\n        count += 1\n    }\n    return count", "    var result\
    \ = 0\n    for row in grid {\n        var current_capacity = capacity\n      \
    \  for col in row {\n            if col == 1 {\n                current_capacity\
    \ -= 1\n            }\n            if current_capacity == 0 {\n              \
    \  result += 1\n                current_capacity = capacity\n            }\n \
    \       }\n        if current_capacity < capacity {\n            result += 1\n\
    \        }\n    }\n    return result", "    // 1. find the max height of the wells\n\
    \    var max_height = 0\n    for row in grid {\n        let row_max = row.max()!\n\
    \        if row_max > max_height {\n            max_height = row_max\n       \
    \ }\n    }\n    // 2. fill the wells from bottom to top\n    var count = 0\n \
    \   for height in 0..<max_height {\n        for row in grid {\n            for\
    \ col in row {\n                if col > height {\n                    count +=\
    \ 1\n                }\n            }\n        }\n    }\n    return count", " \
    \   var result = 0\n    for row in grid {\n        var water = 0\n        for\
    \ well in row {\n            water += well\n            if water == capacity {\n\
    \                result += 1\n                water = 0\n            }\n     \
    \   }\n        if water > 0 {\n            result += 1\n        }\n    }\n   \
    \ return result", "    var grid = grid\n    var count = 0\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                count += 1\n                grid[i][j] = 0\n                var\
    \ k = i + 1\n                while k < grid.count && capacity > 0 {\n        \
    \            if grid[k][j] == 1 {\n                        grid[k][j] = 0\n  \
    \                      capacity -= 1\n                    }\n                \
    \    k += 1\n                }\n            }\n        }\n    }\n    return count",
  '    return 0', "    var result = 0\n    for row in grid {\n        var current_capacity\
    \ = capacity\n        for col in row {\n            if col == 1 {\n          \
    \      current_capacity -= 1\n            }\n            if current_capacity ==\
    \ 0 {\n                result += 1\n                current_capacity = capacity\n\
    \            }\n        }\n        if current_capacity < capacity {\n        \
    \    result += 1\n        }\n    }\n    return result", "    var result = 0\n\
    \    var max_fill = 0\n    for row in grid {\n        for cell in row {\n    \
    \        if cell == 1 {\n                max_fill += 1\n            }\n      \
    \  }\n    }\n    var fill = 0\n    for row in grid {\n        for cell in row\
    \ {\n            if cell == 1 {\n                fill += 1\n            }\n  \
    \      }\n        if fill == max_fill {\n            break\n        }\n      \
    \  result += 1\n        fill = 0\n    }\n    return result", "    var result =\
    \ 0\n    for row in grid {\n        var sum = 0\n        for cell in row {\n \
    \           sum += cell\n            if sum == capacity {\n                result\
    \ += 1\n                sum = 0\n            }\n        }\n        if sum > 0\
    \ {\n            result += 1\n        }\n    }\n    return result", "    var grid\
    \ = grid\n    var count = 0\n    while true {\n        var filled = false\n  \
    \      for i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n \
    \               if grid[i][j] == 1 {\n                    filled = true\n    \
    \                grid[i][j] = 0\n                    if i > 0 {\n            \
    \            grid[i-1][j] = min(grid[i-1][j] + capacity, 1)\n                \
    \    }\n                    if i < grid.count - 1 {\n                        grid[i+1][j]\
    \ = min(grid[i+1][j] + capacity, 1)\n                    }\n                 \
    \   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1] + capacity,\
    \ 1)\n                    }\n                    if j < grid[i].count - 1 {\n\
    \                        grid[i][j+1] = min(grid[i][j+1] + capacity, 1)\n    \
    \                }\n                }\n            }\n        }\n        if !filled\
    \ {\n            break\n        }\n        count += 1\n    }\n    return count",
  "    var count = 0\n    var max_fill = 0\n    for row in grid {\n        for col\
    \ in row {\n            if col == 1 {\n                count += 1\n          \
    \  }\n        }\n        max_fill = max(max_fill, count)\n        count = 0\n\
    \    }\n    return max_fill / capacity + (max_fill % capacity > 0 ? 1 : 0)", " \
    \   var result = 0\n    for row in grid {\n        var water = 0\n        for\
    \ well in row {\n            water += well\n            if water == capacity {\n\
    \                result += 1\n                water = 0\n            }\n     \
    \   }\n        if water > 0 {\n            result += 1\n        }\n    }\n   \
    \ return result", "    var max_fill = 0\n    for row in grid {\n        var fill\
    \ = 0\n        for well in row {\n            if well == 1 {\n               \
    \ fill += 1\n            } else {\n                if fill > 0 {\n           \
    \         max_fill += 1\n                    fill = 0\n                }\n   \
    \         }\n        }\n        if fill > 0 {\n            max_fill += 1\n   \
    \     }\n    }\n    return max_fill * capacity", "    var result = 0\n    var\
    \ max_fill = 0\n    for row in grid {\n        for cell in row {\n           \
    \ if cell == 1 {\n                max_fill += 1\n            }\n        }\n  \
    \  }\n    var current_fill = 0\n    var current_row = 0\n    while current_fill\
    \ < max_fill {\n        var current_capacity = capacity\n        while current_capacity\
    \ > 0 && current_row < grid.count {\n            for i in 0..<grid[current_row].count\
    \ {\n                if grid[current_row][i] == 1 {\n                    grid[current_row][i]\
    \ = 0\n                    current_fill += 1\n                    current_capacity\
    \ -= 1\n                }\n            }\n            current_row += 1\n     \
    \   }\n        result += 1\n    }\n    return result", "    var result = 0\n \
    \   for row in grid {\n        var count = 0\n        for col in row {\n     \
    \       if col == 1 {\n                count += 1\n            }\n        }\n\
    \        result += count / capacity\n        if count % capacity != 0 {\n    \
    \        result += 1\n        }\n    }\n    return result", "    var grid = grid\n\
    \    var count = 0\n    var row = 0\n    var col = 0\n    while row < grid.count\
    \ {\n        col = 0\n        while col < grid[row].count {\n            if grid[row][col]\
    \ == 1 {\n                count += 1\n                grid = fill_bucket(grid:\
    \ grid, row: row, col: col, capacity: capacity)\n            }\n            col\
    \ += 1\n        }\n        row += 1\n    }\n    return count", "    var result\
    \ = 0\n    for row in grid {\n        var sum = 0\n        for col in row {\n\
    \            sum += col\n            if sum == capacity {\n                result\
    \ += 1\n                sum = 0\n            }\n        }\n        if sum > 0\
    \ {\n            result += 1\n        }\n    }\n    return result", "    let rows\
    \ = grid.count\n    let cols = grid[0].count\n    var grid = grid\n    var count\
    \ = 0\n    for _ in 0..<rows {\n        for col in 0..<cols {\n            if\
    \ grid[0][col] == 1 {\n                count += 1\n                grid[0][col]\
    \ = 0\n                var row = 1\n                while row < rows && capacity\
    \ > 0 {\n                    if grid[row][col] == 1 {\n                      \
    \  grid[row][col] = 0\n                        capacity -= 1\n               \
    \     }\n                    row += 1\n                }\n            }\n    \
    \    }\n    }\n    return count", "    var max_fill = 0\n    for row in grid {\n\
    \        var fill = 0\n        for well in row {\n            if well == 1 {\n\
    \                fill += 1\n            } else {\n                if fill > 0\
    \ {\n                    max_fill += 1\n                    fill = 0\n       \
    \         }\n            }\n        }\n        if fill > 0 {\n            max_fill\
    \ += 1\n        }\n    }\n    return max_fill * capacity", "    var result = 0\n\
    \    var wells = grid\n    for i in 0..<wells.count {\n        for j in 0..<wells[i].count\
    \ {\n            if wells[i][j] == 1 {\n                wells[i][j] = capacity\n\
    \            }\n        }\n    }\n    var max_fill = 0\n    while true {\n   \
    \     max_fill = 0\n        for i in 0..<wells.count {\n            for j in 0..<wells[i].count\
    \ {\n                if wells[i][j] > max_fill {\n                    max_fill\
    \ = wells[i][j]\n                }\n            }\n        }\n        if max_fill\
    \ == 0 {\n            break\n        }\n        for i in 0..<wells.count {\n \
    \           for j in 0..<wells[i].count {\n                if wells[i][j] == max_fill\
    \ {\n                    wells[i][j] = 0\n                    if i > 0 {\n   \
    \                     wells[i-1][j] += 1\n                    }\n            \
    \        if i < wells.count - 1 {\n                        wells[i+1][j] += 1\n\
    \                    }\n                    if j > 0 {\n                     \
    \   wells[i][j-1] += 1\n                    }\n                    if j < wells[i].count\
    \ - 1 {\n                        wells[i][j+1] += 1\n                    }\n \
    \               }\n            }\n        }\n        result += 1\n    }\n    return\
    \ result", "    var result = 0\n    for row in grid {\n        var row_sum = 0\n\
    \        for col in row {\n            row_sum += col\n        }\n        result\
    \ += row_sum / capacity\n        if row_sum % capacity != 0 {\n            result\
    \ += 1\n        }\n    }\n    return result", "    var result = 0\n    var max_fill\
    \ = 0\n    for row in grid {\n        max_fill = 0\n        for col in row {\n\
    \            if col == 1 {\n                max_fill += 1\n            } else\
    \ {\n                max_fill = 0\n            }\n            if max_fill == capacity\
    \ {\n                result += 1\n                max_fill = 0\n            }\n\
    \        }\n    }\n    return result", "    var result = 0\n    var max_fill =\
    \ 0\n    for row in grid {\n        max_fill = 0\n        for cell in row {\n\
    \            if cell == 1 {\n                max_fill += 1\n            } else\
    \ {\n                if max_fill > 0 {\n                    result += 1\n    \
    \                max_fill = 0\n                }\n            }\n        }\n \
    \       if max_fill > 0 {\n            result += 1\n        }\n    }\n    return\
    \ result * capacity", "    var max_fill = 0\n    for row in grid {\n        var\
    \ fill = 0\n        for well in row {\n            if well == 1 {\n          \
    \      fill += 1\n            } else {\n                if fill > 0 {\n      \
    \              max_fill += 1\n                    fill = 0\n                }\n\
    \            }\n        }\n        if fill > 0 {\n            max_fill += 1\n\
    \        }\n    }\n    return max_fill", "    var count = 0\n    var wells = grid\n\
    \    for i in 0..<wells.count {\n        for j in 0..<wells[i].count {\n     \
    \       if wells[i][j] == 1 {\n                wells[i][j] = 0\n             \
    \   count += 1\n                var bucket = capacity\n                var k =\
    \ i\n                while k < wells.count && bucket > 0 {\n                 \
    \   if wells[k][j] == 1 {\n                        wells[k][j] = 0\n         \
    \               bucket -= 1\n                    }\n                    k += 1\n\
    \                }\n            }\n        }\n    }\n    return count", "    var\
    \ result = 0\n    var max_fill = 0\n    for row in grid {\n        var fill =\
    \ 0\n        for cell in row {\n            if cell == 1 {\n                fill\
    \ += 1\n            } else {\n                if fill > max_fill {\n         \
    \           max_fill = fill\n                }\n                fill = 0\n   \
    \         }\n        }\n        if fill > max_fill {\n            max_fill = fill\n\
    \        }\n        result += max_fill / capacity\n        max_fill = max_fill\
    \ % capacity\n    }\n    return result", "    var result = 0\n    var max_fill\
    \ = 0\n    for row in grid {\n        for cell in row {\n            if cell ==\
    \ 1 {\n                max_fill += 1\n            }\n        }\n    }\n    var\
    \ fill = 0\n    for row in grid {\n        for cell in row {\n            if cell\
    \ == 1 {\n                fill += 1\n            }\n        }\n        if fill\
    \ == max_fill {\n            break\n        }\n        result += 1\n        fill\
    \ = 0\n    }\n    return result", "    var grid = grid\n    var count = 0\n  \
    \  for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n         \
    \   if grid[i][j] == 1 {\n                count += 1\n                let row\
    \ = i\n                let col = j\n                var row_count = 0\n      \
    \          while row_count < capacity && row + row_count < grid.count {\n    \
    \                if grid[row + row_count][col] == 1 {\n                      \
    \  grid[row + row_count][col] = 0\n                    }\n                   \
    \ row_count += 1\n                }\n            }\n        }\n    }\n    return\
    \ count", "    var result = 0\n    var max_fill = 0\n    for row in grid {\n \
    \       for col in row {\n            if col == 1 {\n                max_fill\
    \ += 1\n            }\n        }\n    }\n    for row in grid {\n        for col\
    \ in row {\n            if col == 1 {\n                result += 1\n         \
    \   }\n        }\n        if result == max_fill {\n            break\n       \
    \ }\n        result = 0\n    }\n    return result", "    var result = 0\n    var\
    \ max_fill = 0\n    for row in grid {\n        max_fill = 0\n        for col in\
    \ row {\n            if col == 1 {\n                max_fill += 1\n          \
    \  } else {\n                if max_fill > 0 {\n                    result +=\
    \ 1\n                    max_fill = 0\n                }\n            }\n    \
    \    }\n        if max_fill > 0 {\n            result += 1\n        }\n    }\n\
    \    return result * capacity", "    var result = 0\n    var wells = grid\n  \
    \  for i in 0..<wells.count {\n        for j in 0..<wells[i].count {\n       \
    \     if wells[i][j] == 1 {\n                wells[i][j] = 0\n               \
    \ result += 1\n                var bucket = capacity\n                var k =\
    \ i\n                while bucket > 0 && k >= 0 {\n                    if wells[k][j]\
    \ == 1 {\n                        wells[k][j] = 0\n                        bucket\
    \ -= 1\n                    }\n                    k -= 1\n                }\n\
    \            }\n        }\n    }\n    return result", "    var result = 0\n  \
    \  var max_fill = 0\n    for row in grid {\n        for col in row {\n       \
    \     if col == 1 {\n                max_fill += 1\n            }\n        }\n\
    \    }\n    var fill = 0\n    for row in grid {\n        for col in row {\n  \
    \          if col == 1 {\n                fill += 1\n            }\n        }\n\
    \        if fill == max_fill {\n            break\n        }\n        result +=\
    \ 1\n        fill = 0\n    }\n    return result", "    var result = 0\n    var\
    \ max_fill = 0\n    for row in grid {\n        max_fill = 0\n        for col in\
    \ row {\n            if col == 1 {\n                max_fill += 1\n          \
    \  } else {\n                if max_fill > 0 {\n                    result +=\
    \ 1\n                    max_fill = 0\n                }\n            }\n    \
    \    }\n        if max_fill > 0 {\n            result += 1\n        }\n    }\n\
    \    return result * capacity", "    var result = 0\n    for row in grid {\n \
    \       var count = 0\n        for col in row {\n            if col == 1 {\n \
    \               count += 1\n            }\n        }\n        result += count\
    \ / capacity\n        if count % capacity != 0 {\n            result += 1\n  \
    \      }\n    }\n    return result", "    var grid = grid\n    var count = 0\n\
    \    var row = 0\n    while row < grid.count {\n        var col = 0\n        while\
    \ col < grid[row].count {\n            if grid[row][col] == 1 {\n            \
    \    count += 1\n                var i = row\n                while i < grid.count\
    \ && i - row < capacity {\n                    var j = col\n                 \
    \   while j < grid[i].count && j - col < capacity {\n                        grid[i][j]\
    \ = 0\n                        j += 1\n                    }\n               \
    \     i += 1\n                }\n            }\n            col += 1\n       \
    \ }\n        row += 1\n    }\n    return count", "    var result = 0\n    var\
    \ max_row = 0\n    var max_col = 0\n    for row in grid {\n        for col in\
    \ row {\n            if col > max_col {\n                max_col = col\n     \
    \       }\n        }\n        max_row += max_col\n        max_col = 0\n    }\n\
    \    result = max_row / capacity\n    if max_row % capacity > 0 {\n        result\
    \ += 1\n    }\n    return result", "    var result = 0\n    var max_fill = 0\n\
    \    for row in grid {\n        for cell in row {\n            if cell == 1 {\n\
    \                max_fill += 1\n            }\n        }\n    }\n    var fill\
    \ = 0\n    for row in grid {\n        for cell in row {\n            if cell ==\
    \ 1 {\n                fill += 1\n            }\n        }\n        if fill ==\
    \ max_fill {\n            break\n        }\n        result += 1\n        fill\
    \ = 0\n    }\n    return result", "    var result = 0\n    for row in grid {\n\
    \        var count = 0\n        for i in row {\n            if i == 1 {\n    \
    \            count += 1\n            }\n        }\n        result += count / capacity\n\
    \        if count % capacity != 0 {\n            result += 1\n        }\n    }\n\
    \    return result", "    var result = 0\n    for row in grid {\n        var water\
    \ = 0\n        for well in row {\n            water += well\n            if water\
    \ > capacity {\n                result += 1\n                water = well\n  \
    \          }\n        }\n        result += 1\n    }\n    return result", "   \
    \ var grid = grid\n    var count = 0\n    for i in 0..<grid.count {\n        for\
    \ j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n               \
    \ count += 1\n                fill_bucket(grid: &grid, i: i, j: j, capacity: capacity)\n\
    \            }\n        }\n    }\n    return count", "    var result = 0\n   \
    \ var max_fill = 0\n    for row in grid {\n        max_fill = 0\n        for col\
    \ in row {\n            if col == 1 {\n                max_fill += 1\n       \
    \     } else {\n                max_fill = 0\n            }\n            if max_fill\
    \ == capacity {\n                result += 1\n                max_fill = 0\n \
    \           }\n        }\n    }\n    return result", "    var grid = grid\n  \
    \  var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      grid[i][j] = 0\n                var k = i + 1\n                while k\
    \ < grid.count && capacity > 0 {\n                    if grid[k][j] == 1 {\n \
    \                       grid[k][j] = 0\n                        capacity -= 1\n\
    \                    }\n                    k += 1\n                }\n      \
    \      }\n        }\n    }\n    return count", "    var result = 0\n    var max_fill\
    \ = 0\n    for row in grid {\n        for cell in row {\n            if cell ==\
    \ 1 {\n                max_fill += 1\n            }\n        }\n    }\n    var\
    \ fill = 0\n    for row in grid {\n        for cell in row {\n            if cell\
    \ == 1 {\n                fill += 1\n            }\n        }\n        if fill\
    \ == max_fill {\n            break\n        }\n        result += 1\n        fill\
    \ = 0\n    }\n    return result", "    var result = 0\n    var max_height = 0\n\
    \    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n       \
    \     if grid[i][j] == 1 {\n                max_height = max(max_height, i)\n\
    \            }\n        }\n    }\n    for i in 0...max_height {\n        var filled\
    \ = 0\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                filled += 1\n            }\n        }\n        if filled > 0\
    \ {\n            result += 1\n        }\n        if filled > capacity {\n    \
    \        result += filled - capacity\n        }\n    }\n    return result", '    return
    0', "    var grid = grid\n    var count = 0\n    while true {\n        var filled\
    \ = false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    if i > 0 {\n        \
    \                grid[i-1][j] = min(grid[i-1][j] + capacity, 1)\n            \
    \        }\n                    if i < grid.count - 1 {\n                    \
    \    grid[i+1][j] = min(grid[i+1][j] + capacity, 1)\n                    }\n \
    \                   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + capacity, 1)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + capacity, 1)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var grid = grid\n    var count = 0\n    while true {\n        var\
    \ max_fill = 0\n        var max_fill_index = -1\n        for i in 0..<grid.count\
    \ {\n            var fill = 0\n            for j in 0..<grid[i].count {\n    \
    \            if grid[i][j] == 1 {\n                    fill += 1\n           \
    \     }\n            }\n            if fill > max_fill {\n                max_fill\
    \ = fill\n                max_fill_index = i\n            }\n        }\n     \
    \   if max_fill == 0 {\n            break\n        }\n        count += 1\n   \
    \     for j in 0..<grid[max_fill_index].count {\n            if grid[max_fill_index][j]\
    \ == 1 {\n                grid[max_fill_index][j] = 0\n                if max_fill\
    \ > capacity {\n                    max_fill -= capacity\n                } else\
    \ {\n                    max_fill = 0\n                }\n            }\n    \
    \    }\n    }\n    return count", "    var result = 0\n    var max_fill = 0\n\
    \    for i in 0..<grid.count {\n        max_fill = 0\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                max_fill += 1\n       \
    \     }\n        }\n        result += max_fill / capacity\n        if max_fill\
    \ % capacity != 0 {\n            result += 1\n        }\n    }\n    return result",
  "    var result = 0\n    var max_fill = 0\n    for row in grid {\n        max_fill\
    \ = 0\n        for well in row {\n            if well == 1 {\n               \
    \ max_fill += 1\n            } else {\n                if max_fill > 0 {\n   \
    \                 result += 1\n                    max_fill = 0\n            \
    \    }\n            }\n        }\n        if max_fill > 0 {\n            result\
    \ += 1\n        }\n    }\n    return result * capacity", "    var grid = grid\n\
    \    var count = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count\
    \ {\n            if grid[i][j] == 1 {\n                count += 1\n          \
    \      fill_bucket(grid: &grid, capacity: capacity, i: i, j: j)\n            }\n\
    \        }\n    }\n    return count", "    var result = 0\n    var max_fill =\
    \ 0\n    for row in grid {\n        for cell in row {\n            if cell ==\
    \ 1 {\n                max_fill += 1\n            }\n        }\n    }\n    var\
    \ current_fill = 0\n    while current_fill < max_fill {\n        for row in grid\
    \ {\n            for cell in row {\n                if cell == 1 {\n         \
    \           current_fill += 1\n                }\n            }\n            if\
    \ current_fill < max_fill {\n                result += 1\n            }\n    \
    \    }\n    }\n    return result", "    var count = 0\n    var max_fill = 0\n\
    \    for row in grid {\n        for col in row {\n            if col == 1 {\n\
    \                max_fill += 1\n            }\n        }\n    }\n    for row in\
    \ grid {\n        for col in row {\n            if col == 1 {\n              \
    \  count += 1\n            }\n        }\n        if count == max_fill {\n    \
    \        return count\n        }\n        count = 0\n    }\n    return capacity",
  "    var result = 0\n    var max_fill = 0\n    for row in grid {\n        max_fill\
    \ = 0\n        for col in row {\n            if col == 1 {\n                max_fill\
    \ += 1\n            } else {\n                max_fill = 0\n            }\n  \
    \          if max_fill == capacity {\n                result += 1\n          \
    \      max_fill = 0\n            }\n        }\n    }\n    return result", "  \
    \  var grid = grid\n    var count = 0\n    while true {\n        var filled =\
    \ false\n        for i in 0..<grid.count {\n            for j in 0..<grid[i].count\
    \ {\n                if grid[i][j] == 1 {\n                    filled = true\n\
    \                    grid[i][j] = 0\n                    if i > 0 {\n        \
    \                grid[i-1][j] = min(grid[i-1][j] + capacity, 1)\n            \
    \        }\n                    if i < grid.count - 1 {\n                    \
    \    grid[i+1][j] = min(grid[i+1][j] + capacity, 1)\n                    }\n \
    \                   if j > 0 {\n                        grid[i][j-1] = min(grid[i][j-1]\
    \ + capacity, 1)\n                    }\n                    if j < grid[i].count\
    \ - 1 {\n                        grid[i][j+1] = min(grid[i][j+1] + capacity, 1)\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ !filled {\n            break\n        }\n        count += 1\n    }\n    return\
    \ count", "    var fill_count = 0\n    var max_fill = 0\n    for row in grid {\n\
    \        for col in row {\n            if col == 1 {\n                fill_count\
    \ += 1\n            }\n        }\n        max_fill = max(max_fill, fill_count)\n\
    \        fill_count = 0\n    }\n    return max_fill / capacity + (max_fill % capacity\
    \ > 0 ? 1 : 0)", "    var max_fill = 0\n    for row in grid {\n        var fill\
    \ = 0\n        for well in row {\n            if well == 1 {\n               \
    \ fill += 1\n            } else {\n                if fill > 0 {\n           \
    \         max_fill += 1\n                    fill = 0\n                }\n   \
    \         }\n        }\n        if fill > 0 {\n            max_fill += 1\n   \
    \     }\n    }\n    return max_fill * capacity", "    var result = 0\n    for\
    \ row in grid {\n        var water = 0\n        for well in row {\n          \
    \  water += well\n            if water == capacity {\n                result +=\
    \ 1\n                water = 0\n            }\n        }\n        if water > 0\
    \ {\n            result += 1\n        }\n    }\n    return result", "    var result\
    \ = 0\n    var max_row = 0\n    for row in grid {\n        max_row = max(max_row,\
    \ row.reduce(0, +))\n    }\n    for _ in 0..<max_row {\n        result += 1\n\
    \        for i in 0..<grid.count {\n            for j in 0..<grid[i].count {\n\
    \                if grid[i][j] > 0 {\n                    grid[i][j] -= 1\n  \
    \              }\n            }\n        }\n    }\n    return result", "    var\
    \ max_fill = 0\n    for row in grid {\n        var fill = 0\n        for well\
    \ in row {\n            fill += well\n            if fill > capacity {\n     \
    \           max_fill += 1\n                fill = well\n            }\n      \
    \  }\n        max_fill += 1\n    }\n    return max_fill", "    var result = 0\n\
    \    var row_max = [Int](repeating: 0, count: grid.count)\n    for i in 0..<grid.count\
    \ {\n        for j in 0..<grid[i].count {\n            if grid[i][j] == 1 {\n\
    \                row_max[i] = j\n            }\n        }\n    }\n    for i in\
    \ 0..<grid.count {\n        for j in 0..<grid[i].count {\n            if grid[i][j]\
    \ == 1 {\n                var min_capacity = capacity\n                for k in\
    \ 0..<i {\n                    min_capacity = min(min_capacity, row_max[k] - j)\n\
    \                }\n                result += min_capacity\n            }\n  \
    \      }\n    }\n    return result", '    return 0', "    var result = 0\n   \
    \ var max_fill = 0\n    for row in grid {\n        for col in row {\n        \
    \    if col == 1 {\n                max_fill += 1\n            }\n        }\n\
    \    }\n    var current_fill = 0\n    while current_fill < max_fill {\n      \
    \  for row in grid {\n            for col in row {\n                if col ==\
    \ 1 {\n                    current_fill += 1\n                    if current_fill\
    \ == max_fill {\n                        return result\n                    }\n\
    \                }\n            }\n            result += 1\n        }\n    }\n\
    \    return result", "    var result = 0\n    var max_fill = 0\n    for row in\
    \ grid {\n        var fill = 0\n        for col in row {\n            if col ==\
    \ 1 {\n                fill += 1\n            } else {\n                if fill\
    \ > max_fill {\n                    max_fill = fill\n                }\n     \
    \           fill = 0\n            }\n        }\n        if fill > max_fill {\n\
    \            max_fill = fill\n        }\n        result += max_fill / capacity\n\
    \        max_fill = max_fill % capacity\n    }\n    return result", "    var result\
    \ = 0\n    var max_fill = 0\n    for row in grid {\n        for col in row {\n\
    \            if col == 1 {\n                max_fill += 1\n            }\n   \
    \     }\n    }\n    while max_fill > 0 {\n        result += 1\n        max_fill\
    \ -= capacity\n    }\n    return result", "    var grid = grid\n    var count\
    \ = 0\n    for row in 0..<grid.count {\n        for col in 0..<grid[row].count\
    \ {\n            if grid[row][col] == 1 {\n                count += 1\n      \
    \          fill(grid: &grid, row: row, col: col, capacity: capacity)\n       \
    \     }\n        }\n    }\n    return count", "    var grid = grid\n    var count\
    \ = 0\n    for i in 0..<grid.count {\n        for j in 0..<grid[i].count {\n \
    \           if grid[i][j] == 1 {\n                count += 1\n               \
    \ fill(grid: &grid, i: i, j: j, capacity: capacity)\n            }\n        }\n\
    \    }\n    return count", "    var result = 0\n    for row in grid {\n      \
    \  var water = 0\n        for cell in row {\n            water += cell\n     \
    \       if water == capacity {\n                result += 1\n                water\
    \ = 0\n            }\n        }\n        if water > 0 {\n            result +=\
    \ 1\n        }\n    }\n    return result", "    var result = 0\n    var max_fill\
    \ = 0\n    for row in grid {\n        max_fill = 0\n        for col in row {\n\
    \            if col == 1 {\n                max_fill += 1\n            } else\
    \ {\n                if max_fill > 0 {\n                    result += 1\n    \
    \                max_fill = 0\n                }\n            }\n        }\n \
    \       if max_fill > 0 {\n            result += 1\n        }\n    }\n    return\
    \ result * capacity", "    var grid = grid\n    var count = 0\n    while true\
    \ {\n        var filled = false\n        for i in 0..<grid.count {\n         \
    \   for j in 0..<grid[i].count {\n                if grid[i][j] == 1 {\n     \
    \               filled = true\n                    grid[i][j] = 0\n          \
    \          if i > 0 {\n                        grid[i-1][j] = min(grid[i-1][j]\
    \ + capacity, 1)\n                    }\n                    if i < grid.count\
    \ - 1 {\n                        grid[i+1][j] = min(grid[i+1][j] + capacity, 1)\n\
    \                    }\n                    if j > 0 {\n                     \
    \   grid[i][j-1] = min(grid[i][j-1] + capacity, 1)\n                    }\n  \
    \                  if j < grid[i].count - 1 {\n                        grid[i][j+1]\
    \ = min(grid[i][j+1] + capacity, 1)\n                    }\n                }\n\
    \            }\n        }\n        if !filled {\n            break\n        }\n\
    \        count += 1\n    }\n    return count"]
stop_tokens:
- "\n}"
