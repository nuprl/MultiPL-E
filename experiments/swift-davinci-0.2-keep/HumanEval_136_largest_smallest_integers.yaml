name: HumanEval_136_largest_smallest_integers
language: swift
prompt: "\n/// Create a function that returns a tuple (a, b), where 'a' is\n/// the\
  \ largest of negative integers, and 'b' is the smallest\n/// of positive integers\
  \ in a list.\n/// If there is no negative or positive integers, return them as None.\n\
  /// Examples:\n/// largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n\
  /// largest_smallest_integers([]) == (None, None)\n/// largest_smallest_integers([0])\
  \ == (None, None)\nfunc largest_smallest_integers(lst: [Int]) -> (Int?, Int?) {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(largest_smallest_integers(lst: [2, 4, 1,\
  \ 3, 5, 7]) == (nil, 1))\nassert(largest_smallest_integers(lst: [2, 4, 1, 3, 5,\
  \ 7, 0]) == (nil, 1))\nassert(largest_smallest_integers(lst: [1, 3, 2, 4, 5, 6,\
  \ -2]) == (-2, 1))\nassert(largest_smallest_integers(lst: [4, 5, 3, 6, 2, 7, -7])\
  \ == (-7, 2))\nassert(largest_smallest_integers(lst: [7, 3, 8, 4, 9, 2, 5, -9])\
  \ == (-9, 2))\nassert(largest_smallest_integers(lst: [] as [Int]) == (nil, nil))\n\
  assert(largest_smallest_integers(lst: [0]) == (nil, nil))\nassert(largest_smallest_integers(lst:\
  \ [-1, -3, -5, -6]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-1, -3,\
  \ -5, -6, 0]) == (-1, nil))\nassert(largest_smallest_integers(lst: [-6, -4, -4,\
  \ -3, 1]) == (-3, 1))\nassert(largest_smallest_integers(lst: [-6, -4, -4, -3, -100,\
  \ 1]) == (-3, 1))"
completions: ["    var largestNegative: Int? = nil\n    var smallestPositive: Int?\
    \ = nil\n    for i in lst {\n        if i < 0 {\n            if largestNegative\
    \ == nil {\n                largestNegative = i\n            } else if i > largestNegative!\
    \ {\n                largestNegative = i\n            }\n        } else if i >\
    \ 0 {\n            if smallestPositive == nil {\n                smallestPositive\
    \ = i\n            } else if i < smallestPositive! {\n                smallestPositive\
    \ = i\n            }\n        }\n    }\n    return (largestNegative, smallestPositive)",
  "    var min = Int.max\n    var max = Int.min\n    for i in lst {\n        if i\
    \ < 0 {\n            max = max(max, i)\n        } else if i > 0 {\n          \
    \  min = min(min, i)\n        }\n    }\n    return (max == Int.min ? nil : max,\
    \ min == Int.max ? nil : min)", "    var largestNegative: Int? = nil\n    var\
    \ smallestPositive: Int? = nil\n    for i in lst {\n        if i < 0 {\n     \
    \       if largestNegative == nil {\n                largestNegative = i\n   \
    \         } else if i > largestNegative! {\n                largestNegative =\
    \ i\n            }\n        } else if i > 0 {\n            if smallestPositive\
    \ == nil {\n                smallestPositive = i\n            } else if i < smallestPositive!\
    \ {\n                smallestPositive = i\n            }\n        }\n    }\n \
    \   return (largestNegative, smallestPositive)", "    // TODO: Implement this\
    \ function\n    return (nil, nil)", "    var largestNegative: Int? = nil\n   \
    \ var smallestPositive: Int? = nil\n    for item in lst {\n        if item < 0\
    \ {\n            if largestNegative == nil {\n                largestNegative\
    \ = item\n            } else if item > largestNegative! {\n                largestNegative\
    \ = item\n            }\n        } else if item > 0 {\n            if smallestPositive\
    \ == nil {\n                smallestPositive = item\n            } else if item\
    \ < smallestPositive! {\n                smallestPositive = item\n           \
    \ }\n        }\n    }\n    return (largestNegative, smallestPositive)", "    var\
    \ min: Int? = nil\n    var max: Int? = nil\n    for i in lst {\n        if i >\
    \ 0 {\n            if min == nil || i < min! {\n                min = i\n    \
    \        }\n        } else if i < 0 {\n            if max == nil || i > max! {\n\
    \                max = i\n            }\n        }\n    }\n    return (max, min)",
  "    var largestNegative: Int? = nil\n    var smallestPositive: Int? = nil\n   \
    \ for i in lst {\n        if i < 0 {\n            if largestNegative == nil {\n\
    \                largestNegative = i\n            } else if i > largestNegative!\
    \ {\n                largestNegative = i\n            }\n        } else if i >\
    \ 0 {\n            if smallestPositive == nil {\n                smallestPositive\
    \ = i\n            } else if i < smallestPositive! {\n                smallestPositive\
    \ = i\n            }\n        }\n    }\n    return (largestNegative, smallestPositive)",
  '    return (nil, nil)', '    return (nil, nil)', "    let lst = lst.filter { $0\
    \ != 0 }\n    guard lst.count > 0 else { return (nil, nil) }\n    let lst = lst.sorted()\n\
    \    let negative = lst.filter { $0 < 0 }\n    let positive = lst.filter { $0\
    \ > 0 }\n    return (negative.last, positive.first)", '    return (nil, nil)',
  "    var min = Int.max\n    var max = Int.min\n    for i in lst {\n        if i\
    \ < 0 {\n            max = max < i ? i : max\n        } else {\n            min\
    \ = min > i ? i : min\n        }\n    }\n    return (max == Int.min ? nil : max,\
    \ min == Int.max ? nil : min)", '    return (nil, nil)', '    return (nil, nil)',
  '    return (nil, nil)', "    var min: Int? = nil\n    var max: Int? = nil\n   \
    \ for i in lst {\n        if i > 0 {\n            if min == nil || i < min! {\n\
    \                min = i\n            }\n        } else if i < 0 {\n         \
    \   if max == nil || i > max! {\n                max = i\n            }\n    \
    \    }\n    }\n    return (max, min)", '    return (nil, nil)', "    var min =\
    \ Int.max\n    var max = Int.min\n    for i in lst {\n        if i > 0 && i <\
    \ min {\n            min = i\n        }\n        if i < 0 && i > max {\n     \
    \       max = i\n        }\n    }\n    return (max == Int.min ? nil : max, min\
    \ == Int.max ? nil : min)", "    var largestNegative: Int? = nil\n    var smallestPositive:\
    \ Int? = nil\n    for i in lst {\n        if i < 0 {\n            if largestNegative\
    \ == nil {\n                largestNegative = i\n            } else if i > largestNegative!\
    \ {\n                largestNegative = i\n            }\n        } else if i >\
    \ 0 {\n            if smallestPositive == nil {\n                smallestPositive\
    \ = i\n            } else if i < smallestPositive! {\n                smallestPositive\
    \ = i\n            }\n        }\n    }\n    return (largestNegative, smallestPositive)",
  "    var largestNegative: Int? = nil\n    var smallestPositive: Int? = nil\n   \
    \ for i in lst {\n        if i < 0 {\n            if largestNegative == nil {\n\
    \                largestNegative = i\n            } else if i > largestNegative!\
    \ {\n                largestNegative = i\n            }\n        } else if i >\
    \ 0 {\n            if smallestPositive == nil {\n                smallestPositive\
    \ = i\n            } else if i < smallestPositive! {\n                smallestPositive\
    \ = i\n            }\n        }\n    }\n    return (largestNegative, smallestPositive)"]
stop_tokens:
- "\n}"
