name: HumanEval_16_count_distinct_characters
language: swift
prompt: "\n/// Given a string, find out how many distinct characters (regardless of\
  \ case) does it consist of\n/// >>> count_distinct_characters('xyzXYZ')\n/// 3\n\
  /// >>> count_distinct_characters('Jerry')\n/// 4\nfunc count_distinct_characters(string:\
  \ String) -> Int {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(count_distinct_characters(string: \"\")\
  \ == 0)\nassert(count_distinct_characters(string: \"abcde\") == 5)\nassert(count_distinct_characters(string:\
  \ \"abcdecadeCADE\") == 5)\nassert(count_distinct_characters(string: \"aaaaAAAAaaaa\"\
  ) == 1)\nassert(count_distinct_characters(string: \"Jerry jERRY JeRRRY\") == 5)"
completions: ['    return Set(string.lowercased()).count', '    return Set(string.lowercased()).count',
  "    var distinct_characters: Set<Character> = []\n    for char in string {\n  \
    \      distinct_characters.insert(char)\n    }\n    return distinct_characters.count",
  '    return Set(string.lowercased()).count', '    return Set(string.lowercased()).count',
  '    return Set(string.lowercased()).count', '    return Set(string.lowercased()).count',
  '    return Set(string.lowercased()).count', '    return Set(string.lowercased()).count',
  '    return Set(string.lowercased()).count', '    return Set(string.lowercased()).count',
  "    var set = Set<Character>()\n    for char in string {\n        set.insert(char)\n\
    \    }\n    return set.count", "    let lowercase = string.lowercased()\n    let\
    \ set = Set(lowercase)\n    return set.count", "    var set = Set<Character>()\n\
    \    for char in string {\n        set.insert(char)\n    }\n    return set.count",
  '    return Set(string.lowercased()).count', '    return Set(string.lowercased()).count',
  '    return Set(string.lowercased()).count', '    return Set(string.lowercased()).count',
  "    let lowercase = string.lowercased()\n    return Set(lowercase).count", "  \
    \  var characters = Set<Character>()\n    for char in string {\n        characters.insert(char)\n\
    \    }\n    return characters.count"]
stop_tokens:
- "\n}"
