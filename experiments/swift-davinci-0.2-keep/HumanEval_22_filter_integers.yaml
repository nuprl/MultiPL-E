name: HumanEval_22_filter_integers
language: swift
prompt: "\n/// Filter given list of any python values only for integers\n/// >>> filter_integers(['a',\
  \ 3.14, 5])\n/// [5]\n/// >>> filter_integers([1, 2, 3, 'abc', {}, []])\n/// [1,\
  \ 2, 3]\nfunc filter_integers(values: [AnyHashable]) -> [Int] {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(filter_integers(values: [] as [AnyHashable])\
  \ == [] as [Int])\nassert(filter_integers(values: [4, [:] as [AnyHashable : AnyHashable],\
  \ [] as [AnyHashable], 23.2, 9, \"adasd\"]) == [4, 9])\nassert(filter_integers(values:\
  \ [3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])"
completions: ['    return values.compactMap { $0 as? Int }', '    return values.compactMap
    { $0 as? Int }', '    return values.compactMap { $0 as? Int }', '    return values.compactMap
    { $0 as? Int }', '    return values.compactMap { $0 as? Int }', '    return values.compactMap
    { $0 as? Int }', '    return values.compactMap { $0 as? Int }', '    return values.compactMap
    { $0 as? Int }', '    return values.filter { $0 is Int }.map { $0 as! Int }',
  '    return values.compactMap { $0 as? Int }', '    return values.compactMap { $0
    as? Int }', '    return values.compactMap { $0 as? Int }', '    return values.compactMap
    { $0 as? Int }', "    var result = [Int]()\n    for value in values {\n      \
    \  if let int_value = value as? Int {\n            result.append(int_value)\n\
    \        }\n    }\n    return result", '    return values.compactMap { $0 as?
    Int }', '    return values.filter { $0 is Int }.map { $0 as! Int }', '    return
    values.compactMap { $0 as? Int }', '    return values.compactMap { $0 as? Int
    }', '    return values.compactMap { $0 as? Int }', '    return values.compactMap
    { $0 as? Int }']
stop_tokens:
- "\n}"
