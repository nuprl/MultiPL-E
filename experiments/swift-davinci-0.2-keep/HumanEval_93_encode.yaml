name: HumanEval_93_encode
language: swift
prompt: "\n/// Write a function that takes a message, and encodes in such a \n///\
  \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
  \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
  \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
  /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc encode(message:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\n\
  assert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\"\
  ) == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\"\
  )\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
  \ wRkTg\")"
completions: ["    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            let index = letters.index(of: char)!\n            let newIndex\
    \ = letters.index(index, offsetBy: 2)\n            encoded.append(letters[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isVowel() {\n            encodedMessage.append(character.nextVowel())\n\
    \        } else {\n            encodedMessage.append(character.swapCase())\n \
    \       }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n  \
    \  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let encoded = message.characters.map\
    \ { char -> Character in\n        if let index = alphabet.characters.indexOf(char)\
    \ {\n            if vowels.characters.contains(char) {\n                let newIndex\
    \ = index.advancedBy(2) % alphabet.characters.count\n                return alphabet.characters[newIndex]\n\
    \            } else {\n                return alphabet.characters[index.advancedBy(2)\
    \ % alphabet.characters.count].uppercaseString.characters.first!\n           \
    \ }\n        } else {\n            return char\n        }\n    }\n    return String(encoded)",
  "    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    for letter in message.lowercased() {\n     \
    \   if vowels.contains(letter) {\n            let index = alphabet.index(of: letter)!\n\
    \            let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!))\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for character in message.lowercased() {\n\
    \        if vowels.contains(character) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ character)!) + 2)\n            encodedMessage.append(alphabet[index])\n    \
    \    } else {\n            encodedMessage.append(character)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    for character\
    \ in message.characters {\n        if character.isVowel() {\n            let encodedCharacter\
    \ = character.encodeVowel()\n            encodedMessage.append(encodedCharacter)\n\
    \        } else {\n            let encodedCharacter = character.encodeConsonant()\n\
    \            encodedMessage.append(encodedCharacter)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message.lowercased() {\n        if let\
    \ index = letters.index(of: char) {\n            let newIndex = (index + 2) %\
    \ letters.count\n            encoded.append(letters[newIndex])\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded",
  "    var encodedMessage = \"\"\n    for char in message.characters {\n        if\
    \ char.isVowel() {\n            encodedMessage.append(char.next().next())\n  \
    \      } else {\n            encodedMessage.append(char.swapCase())\n        }\n\
    \    }\n    return encodedMessage", "    var encodedMessage = \"\"\n    for char\
    \ in message.characters {\n        if char.isVowel {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if let index = alphabet.index(of:\
    \ char) {\n            if vowels.contains(String(char)) {\n                let\
    \ nextIndex = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[nextIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        }\n    }\n    return encoded", "    var encodedMessage = \"\
    \"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    for char in message.lowercased() {\n       \
    \ if vowels.contains(String(char)) {\n            let index = alphabet.index(of:\
    \ char)\n            let newIndex = alphabet.index(index!, offsetBy: 2)\n    \
    \        encodedMessage.append(alphabet[newIndex])\n        } else {\n       \
    \     encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for char in message.lowercased() {\n     \
    \   if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: char)! + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encoded = \"\"\n    let vowels = \"aeiou\"\n    for char\
    \ in message.characters {\n        if vowels.containsString(String(char)) {\n\
    \            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n            encoded.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encoded = \"\"\n    let vowels = \"aeiou\"\n    for char\
    \ in message.characters {\n        if vowels.containsString(String(char).lowercaseString)\
    \ {\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n            encoded.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encodedMessage = \"\"\n    let vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ char in message.lowercased() {\n        if vowels.contains(String(char)) {\n\
    \            if let index = alphabet.index(of: char) {\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", '    return ""', "    var encodedMessage\
    \ = \"\"\n    for char in message.characters {\n        if char.isVowel() {\n\
    \            encodedMessage.append(char.next().next())\n        } else {\n   \
    \         encodedMessage.append(char.swapCase())\n        }\n    }\n    return\
    \ encodedMessage", '    return ""', "    var encodedMessage = \"\"\n    for char\
    \ in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next(2).lowercased())\n\
    \        } else {\n            encodedMessage.append(char.lowercased())\n    \
    \    }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for letter\
    \ in message.lowercased() {\n        if let index = alphabet.index(of: letter)\
    \ {\n            if vowels.contains(letter) {\n                let newIndex =\
    \ alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(letter)\n            }\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(of:\
    \ char)!\n            let newIndex = letters.index(index, offsetBy: 2)\n     \
    \       encoded.append(letters[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for character\
    \ in message.lowercased() {\n        if vowels.contains(character) {\n       \
    \     if let index = alphabet.index(of: character) {\n                let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[nextIndex])\n\
    \            }\n        } else {\n            encoded.append(character)\n    \
    \    }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\
    \"\n    for character in message.lowercased() {\n        if vowels.contains(character)\
    \ {\n            let index = alphabet.index(of: character)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            if\
    \ let index = vowels.index(of: char) {\n                let nextIndex = vowels.index(index,\
    \ offsetBy: 2)\n                encodedMessage.append(vowels[nextIndex])\n   \
    \         }\n        } else if letters.contains(char) {\n            if let index\
    \ = letters.index(of: char) {\n                let nextIndex = letters.index(index,\
    \ offsetBy: 2)\n                encodedMessage.append(letters[nextIndex])\n  \
    \          }\n        } else {\n            encodedMessage.append(char)\n    \
    \    }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n \
    \   for char in message.lowercased() {\n        if vowels.contains(char) {\n \
    \           let index = alphabet.index(of: char)!\n            let newIndex =\
    \ alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter in\
    \ message.lowercased() {\n        if vowels.contains(letter) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of: letter)!\
    \ + 2)\n            encodedMessage.append(alphabet[index])\n        } else {\n\
    \            encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encoded = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            if let index = alphabet.index(of: char) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[newIndex])\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else if let index = vowels.index(of: char) {\n   \
    \         encodedMessage.append(vowels[vowels.index(index, offsetBy: 2)])\n  \
    \      } else {\n            encodedMessage.append(char)\n        }\n    }\n \
    \   return encodedMessage", "    var encodedMessage = \"\"\n    for character\
    \ in message.characters {\n        if character.isVowel() {\n            encodedMessage.append(character.getNextVowel())\n\
    \        } else {\n            encodedMessage.append(character.swapCase())\n \
    \       }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n  \
    \  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n   \
    \ for char in message.lowercased() {\n        if vowels.contains(char) {\n   \
    \         let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char)!))\n            let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[nextIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message.lowercased() {\n  \
    \      if vowels.contains(letter) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ letter)!) + 2)\n            encodedMessage.append(alphabet[index])\n       \
    \ } else {\n            encodedMessage.append(letter)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encoded.append(char)\n       \
    \ }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            if\
    \ let index = alphabet.index(of: char) {\n                let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n  \
    \          }\n        } else {\n            encodedMessage.append(char)\n    \
    \    }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n \
    \   for character in message.lowercased() {\n        if let index = alphabet.index(of:\
    \ character) {\n            encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else if let index = vowels.index(of: character) {\n\
    \            encodedMessage.append(vowels[vowels.index(index, offsetBy: 2)])\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let vowels2\
    \ = \"cdfghjklmnpqrstvwxyz\"\n    let vowels3 = \"bdfhjlnprtvxz\"\n    let vowels4\
    \ = \"aeiou\"\n    let vowels5 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels6 = \"\
    bdfhjlnprtvxz\"\n    var encoded = \"\"\n    for char in message.characters {\n\
    \        if vowels.containsString(String(char)) {\n            if vowels2.containsString(String(char))\
    \ {\n                if vowels3.containsString(String(char)) {\n             \
    \       if vowels4.containsString(String(char)) {\n                        if\
    \ vowels5.containsString(String(char)) {\n                            if vowels6.containsString(String(char))\
    \ {\n                                encoded.append(char)\n                  \
    \          } else {\n                                encoded.append(vowels[vowels.startIndex.advancedBy(4)])\n\
    \                            }\n                        } else {\n           \
    \                 encoded.append(vowels[vowels.startIndex.advancedBy(3)])\n  \
    \                      }\n                    } else {\n                     \
    \   encoded.append(vowels[vowels.startIndex.advancedBy(2)])\n                \
    \    }\n                } else {\n                    encoded.append(vowels[vowels.startIndex.advancedBy(1)])\n\
    \                }\n            } else {\n                encoded.append(vowels[vowels.startIndex.advancedBy(0)])\n\
    \            }\n        } else {\n            encoded.append(char)\n        }\n\
    \    }\n    return encoded", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\
    \n    for char in message.lowercased() {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n   \
    \         if vowels.contains(String(char)) {\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n\
    \    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\
    \"\n    for char in message.lowercased() {\n        if vowels.contains(char) {\n\
    \            let index = alphabet.index(of: char)!\n            let newIndex =\
    \ alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(of:\
    \ char)!\n            let newIndex = letters.index(index, offsetBy: 2)\n     \
    \       encoded.append(letters[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if character.isVowel() {\n      \
    \      encodedMessage.append(character.nextVowel())\n        } else {\n      \
    \      encodedMessage.append(character.swapCase())\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message.lowercased() {\n    \
    \    if let index = alphabet.index(of: char) {\n            let newIndex = (index\
    \ + 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    for character\
    \ in message.characters {\n        if character.isVowel() {\n            encodedMessage.append(character.next().next())\n\
    \        } else {\n            encodedMessage.append(character.swapCase())\n \
    \       }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n  \
    \  let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for\
    \ char in message.lowercased() {\n        if vowels.contains(char) {\n       \
    \     let index = letters.index(letters.startIndex, offsetBy: letters.index(of:\
    \ char)! + 2)\n            encoded.append(letters[index])\n        } else {\n\
    \            encoded.append(char)\n        }\n    }\n    return encoded", "  \
    \  let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage: String =\
    \ \"\"\n    for character in message {\n        if vowels.contains(character)\
    \ {\n            let index = alphabet.firstIndex(of: character)!\n           \
    \ encodedMessage.append(alphabet[(index + 2) % 26])\n        } else if alphabet.contains(character)\
    \ {\n            let index = alphabet.firstIndex(of: character)!\n           \
    \ encodedMessage.append(alphabet[(index + 13) % 26])\n        } else {\n     \
    \       encodedMessage.append(character)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encoded = \"\"\n    for char in message.lowercased() {\n        if let\
    \ index = alphabet.index(of: char) {\n            let newIndex = (index + 2) %\
    \ alphabet.count\n            encoded.append(alphabet[newIndex])\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded",
  "    var result = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message.lowercased() {\n        if let index = alphabet.index(of:\
    \ char) {\n            if vowels.contains(char) {\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                result.append(alphabet[newIndex])\n\
    \            } else {\n                result.append(alphabet[index])\n      \
    \      }\n        }\n    }\n    return result.uppercased()", "    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message.lowercased() {\n    \
    \    if vowels.contains(String(char)) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!) + 2)\n            encodedMessage.append(alphabet[index])\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message.lowercased() {\n  \
    \      if vowels.contains(letter) {\n            let index = letters.index(of:\
    \ letter)!\n            let newIndex = letters.index(index, offsetBy: 2)\n   \
    \         encodedMessage.append(letters[newIndex])\n        } else {\n       \
    \     encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for char in message.lowercased() {\n     \
    \   if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!) + 2)\n            encodedMessage.append(alphabet[index])\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n   \
    \ var encodedMessage = \"\"\n    for char in message.characters {\n        if\
    \ vowels.contains(String(char).lowercased()) {\n            let index = vowels.index(of:\
    \ String(char).lowercased())\n            let newIndex = (index! + 2) % 5\n  \
    \          encodedMessage += vowels[newIndex].uppercased()\n        } else {\n\
    \            encodedMessage += String(char).uppercased()\n        }\n    }\n \
    \   return encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter in\
    \ message.lowercased() {\n        if vowels.contains(letter) {\n            let\
    \ index = letters.index(of: letter)!\n            let nextIndex = letters.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(letters[nextIndex])\n      \
    \  } else {\n            encodedMessage.append(letter)\n        }\n    }\n   \
    \ return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ]\n    var encodedMessage = \"\"\n    for char in message.characters {\n     \
    \   if vowels.contains(String(char).lowercased()) {\n            encodedMessage\
    \ += String(char).lowercased() == \"u\" ? \"a\" : String(characters.index(after:\
    \ characters.index(of: char)!)!)\n        } else {\n            encodedMessage\
    \ += String(char).lowercased() == String(char) ? String(characters.index(of: char)!).uppercased()\
    \ : String(characters.index(of: char)!)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for letter in message.lowercased() {\n   \
    \     if vowels.contains(letter) {\n            let index = letters.index(of:\
    \ letter)!\n            let newIndex = letters.index(index, offsetBy: 2)\n   \
    \         encodedMessage.append(letters[newIndex])\n        } else {\n       \
    \     encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    let alphabetUpper = alphabet.uppercaseString\n    var encodedMessage = \"\
    \"\n    for char in message.characters {\n        if vowels.containsString(String(char))\
    \ {\n            let index = alphabet.startIndex.distanceTo(alphabet.startIndex.advancedBy(alphabet.characters.indexOf(char)!\
    \ + 2))\n            encodedMessage.append(alphabet[alphabet.startIndex.advancedBy(index)])\n\
    \        } else if alphabetUpper.containsString(String(char)) {\n            let\
    \ index = alphabetUpper.startIndex.distanceTo(alphabetUpper.startIndex.advancedBy(alphabetUpper.characters.indexOf(char)!\
    \ + 2))\n            encodedMessage.append(alphabetUpper[alphabetUpper.startIndex.advancedBy(index)])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    for character\
    \ in message.characters {\n        if character.isVowel() {\n            encodedMessage.append(character.next().next())\n\
    \        } else {\n            encodedMessage.append(character.swapCase())\n \
    \       }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n  \
    \  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\
    \n    for character in message.lowercased() {\n        if vowels.contains(character)\
    \ {\n            let index = alphabet.index(of: character)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage", "    let vowels: [Character] = [\"a\", \"e\"\
    , \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\",\
    \ \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"\
    , \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\"\
    , \"z\"]\n    var encodedMessage: String = \"\"\n    for char in message {\n \
    \       if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            encodedMessage.append(alphabet[(index + 2) % alphabet.count])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for letter in message.lowercased()\
    \ {\n        if vowels.contains(letter) {\n            let index = letters.index(letters.startIndex,\
    \ offsetBy: letters.index(of: letter)! + 2)\n            encoded.append(letters[index])\n\
    \        } else {\n            encoded.append(letter)\n        }\n    }\n    return\
    \ encoded", "    let vowels: Set<Character> = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of:\
    \ char)! + 2)\n            encodedMessage.append(alphabet[index])\n        } else\
    \ {\n            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for char in message.lowercased() {\n     \
    \   if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!))\n            encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage", "    var encodedMessage = \"\"\n    for char\
    \ in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.nextVowel())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if character.isLetter {\n       \
    \     if character.isUpper {\n                encodedMessage.append(character.lowercased())\n\
    \            } else {\n                encodedMessage.append(character.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n   \
    \ for char in message.lowercased() {\n        if vowels.contains(char) {\n   \
    \         let index = letters.index(letters.startIndex, offsetBy: letters.index(of:\
    \ char)! + 2)\n            encoded.append(letters[index])\n        } else {\n\
    \            encoded.append(char)\n        }\n    }\n    return encoded", "  \
    \  let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for char in message.lowercased() {\n     \
    \   if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.firstIndex(of:\
    \ char)!))\n            let newIndex = alphabet.index(index, offsetBy: 2)\n  \
    \          encodedMessage.append(alphabet[newIndex])\n        } else {\n     \
    \       encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\n    for char in message.characters\
    \ {\n        if vowels.containsString(String(char)) {\n            let index =\
    \ vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n            encodedMessage.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    var encoded = \"\"\n    for char in message.characters {\n        if\
    \ vowels.contains(String(char).lowercased()) {\n            let index = vowels.index(of:\
    \ String(char).lowercased())\n            if index == 4 {\n                encoded\
    \ += \"a\"\n            } else {\n                encoded += vowels[index! + 2]\n\
    \            }\n        } else {\n            encoded += String(char)\n      \
    \  }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            if let index = alphabet.index(of:\
    \ char) {\n                let nextIndex = alphabet.index(index, offsetBy: 2)\n\
    \                encoded.append(alphabet[nextIndex])\n            }\n        }\
    \ else {\n            encoded.append(char)\n        }\n    }\n    return encoded",
  "    var encoded = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message.lowercased() {\n        if vowels.contains(char) {\n\
    \            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encoded.append(char)\n       \
    \ }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(of:\
    \ char)!\n            let newIndex = letters.index(index, offsetBy: 2)\n     \
    \       encoded.append(letters[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    return message.characters.map {\n\
    \        let char = String($0)\n        if char.lowercaseString == char {\n  \
    \          return char.uppercaseString\n        } else {\n            return char.lowercaseString\n\
    \        }\n    }.joinWithSeparator(\"\")", "    let vowels = \"aeiou\"\n    let\
    \ alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n \
    \   for char in message.lowercased() {\n        if let index = alphabet.index(of:\
    \ char) {\n            let newIndex = index + 2\n            if newIndex < alphabet.count\
    \ {\n                encodedMessage.append(alphabet[newIndex])\n            }\
    \ else {\n                encodedMessage.append(alphabet[newIndex - alphabet.count])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for character in message.characters {\n        if character.isLetter {\n\
    \            if character.isUpper {\n                encodedMessage.append(character.lowercased())\n\
    \            } else {\n                encodedMessage.append(character.uppercased())\n\
    \            }\n        } else {\n            encodedMessage.append(character)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message.lowercased() {\n        if vowels.contains(char) {\n\
    \            if let index = alphabet.index(of: char) {\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage.uppercased()", "    let vowels = \"\
    aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[nextIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    let vowels =\
    \ [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    for char in message.characters {\n\
    \        if vowels.contains(String(char).lowercased()) {\n            let index\
    \ = vowels.index(of: String(char).lowercased())\n            if index == 4 {\n\
    \                encodedMessage += vowels[0]\n            } else {\n         \
    \       encodedMessage += vowels[index! + 2]\n            }\n        } else {\n\
    \            encodedMessage += String(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for char in message.lowercased() {\n     \
    \   if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!))\n            encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = letters.index(of: char)!\n            let newIndex = letters.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(letters[newIndex])\n       \
    \ } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let consonants = \"bcdfghjklmnpqrstvwxyz\"\
    \n    var encodedMessage = \"\"\n    for character in message.lowercased() {\n\
    \        if vowels.contains(character) {\n            let index = vowels.index(of:\
    \ character)!\n            let newIndex = (index + 2) % vowels.count\n       \
    \     encodedMessage.append(vowels[newIndex])\n        } else if consonants.contains(character)\
    \ {\n            let index = consonants.index(of: character)!\n            let\
    \ newIndex = (index + 2) % consonants.count\n            encodedMessage.append(consonants[newIndex])\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage", "    var encodedMessage = \"\"\n    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for letter in message.lowercased() {\n        if let index = alphabet.index(of:\
    \ letter) {\n            let newIndex = alphabet.index(index, offsetBy: 2)\n \
    \           if vowels.contains(String(letter)) {\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            if let index = alphabet.index(of: char) {\n                let\
    \ newIndex = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in message {\n   \
    \     if let index = alphabet.firstIndex(of: letter) {\n            if vowels.contains(letter)\
    \ {\n                let newIndex = index + 2\n                encodedMessage.append(alphabet[newIndex\
    \ % alphabet.count])\n            } else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.index(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message.lowercased() {\n    \
    \    if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!))\n            encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of: char)!\
    \ + 2)\n            encodedMessage.append(alphabet[index])\n        } else {\n\
    \            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encoded = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.index(of: char)!\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encoded.append(char)\n       \
    \ }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let newIndex\
    \ = index + 2\n            if newIndex < alphabet.count {\n                encoded.append(alphabet[newIndex])\n\
    \            } else {\n                encoded.append(alphabet[newIndex - alphabet.count])\n\
    \            }\n        } else if let index = vowels.index(of: char) {\n     \
    \       let newIndex = index + 2\n            if newIndex < vowels.count {\n \
    \               encoded.append(vowels[newIndex])\n            } else {\n     \
    \           encoded.append(vowels[newIndex - vowels.count])\n            }\n \
    \       } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encoded.append(char)\n       \
    \ }\n    }\n    return encoded", "    var encodedMessage = \"\"\n    for char\
    \ in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n    for\
    \ char in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!) + 2)\n            encoded.append(alphabet[index])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(String(char)) {\n    \
    \        let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!) + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encoded = \"\"\n    for char in message.characters\
    \ {\n        if char.isVowel() {\n            encoded.append(char.next(2))\n \
    \       } else {\n            encoded.append(char.swapCase())\n        }\n   \
    \ }\n    return encoded", "    let vowels: Set<Character> = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ]\n    var encodedMessage = \"\"\n    for character in message {\n        if vowels.contains(character)\
    \ {\n            let index = alphabet.firstIndex(of: character)!\n           \
    \ let indexOfNextVowel = (index + 2) % alphabet.count\n            encodedMessage.append(alphabet[indexOfNextVowel])\n\
    \        } else {\n            encodedMessage.append(character)\n        }\n \
    \   }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    var encoded\
    \ = \"\"\n    for char in message.characters {\n        if vowels.containsString(String(char))\
    \ {\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n            encoded.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isLetter {\n            if character.isUpper {\n   \
    \             encodedMessage.append(character.lowercased())\n            } else\
    \ {\n                encodedMessage.append(character.uppercased())\n         \
    \   }\n        } else {\n            encodedMessage.append(character)\n      \
    \  }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let\
    \ letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for c\
    \ in message.characters {\n        if vowels.containsString(String(c)) {\n   \
    \         let index = letters.characters.indexOf(c)\n            let next = letters.characters.startIndex.advancedBy(index!\
    \ + 2)\n            encoded += String(letters[next])\n        } else {\n     \
    \       encoded += String(c)\n        }\n    }\n    return encoded", "    var\
    \ encodedMessage = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n\
    \    for letter in message.characters {\n        if vowels.contains(String(letter).lowercased())\
    \ {\n            encodedMessage += String(letter).lowercased() == \"u\" ? \"a\"\
    \ : String(Array(String(letter).lowercased().unicodeScalars)[0].value + 2)\n \
    \       } else {\n            encodedMessage += String(letter).lowercased() ==\
    \ String(letter) ? String(letter).uppercased() : String(letter).lowercased()\n\
    \        }\n    }\n    return encodedMessage", '    return ""', "    let vowels\
    \ = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            if let index = vowels.firstIndex(of: char) {\n              \
    \  let nextIndex = vowels.index(index, offsetBy: 2)\n                encoded.append(vowels[nextIndex])\n\
    \            }\n        } else if letters.contains(char) {\n            if let\
    \ index = letters.firstIndex(of: char) {\n                let nextIndex = letters.index(index,\
    \ offsetBy: 2)\n                encoded.append(letters[nextIndex])\n         \
    \   }\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message.lowercased() {\n    \
    \    if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.firstIndex(of:\
    \ char)!))\n            let nextIndex = alphabet.index(index, offsetBy: 2)\n \
    \           encodedMessage.append(alphabet[nextIndex])\n        } else {\n   \
    \         encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    var encodedMessage = \"\"\n    for char in message.characters {\n        if\
    \ char.isVowel() {\n            encodedMessage.append(char.next(2))\n        }\
    \ else {\n            encodedMessage.append(char.swapCase())\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(of:\
    \ char)!\n            let newIndex = alphabet.index(index, offsetBy: 2)\n    \
    \        encoded.append(alphabet[newIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.count\
    \ - alphabet.count + alphabet.index(of: char)!.encodedOffset + 2)\n          \
    \  encoded.append(alphabet[index])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    return message.characters.map {\n\
    \        switch $0 {\n        case \"a\":\n            return \"c\"\n        case\
    \ \"e\":\n            return \"g\"\n        case \"i\":\n            return \"\
    k\"\n        case \"o\":\n            return \"q\"\n        case \"u\":\n    \
    \        return \"y\"\n        case \"A\":\n            return \"C\"\n       \
    \ case \"E\":\n            return \"G\"\n        case \"I\":\n            return\
    \ \"K\"\n        case \"O\":\n            return \"Q\"\n        case \"U\":\n\
    \            return \"Y\"\n        default:\n            return String($0).uppercased()\
    \ == String($0) ? String($0).lowercased() : String($0).uppercased()\n        }\n\
    \    }.joined()", "    var encoded = \"\"\n    for char in message.characters\
    \ {\n        if char.isVowel() {\n            encoded.append(char.next().next())\n\
    \        } else {\n            encoded.append(char.swapCase())\n        }\n  \
    \  }\n    return encoded", "    let vowels: Set<Character> = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\", \"c\", \"d\"\
    , \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\"\
    , \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    ]\n    var encodedMessage = \"\"\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.firstIndex(of: char)!\n            let newIndex\
    \ = (index + 2) % alphabet.count\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    var encoded = \"\"\n    for char in message.characters\
    \ {\n        if char.isVowel() {\n            encoded.append(char.next().next())\n\
    \        } else {\n            encoded.append(char.swapCase())\n        }\n  \
    \  }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            if let index = alphabet.index(of:\
    \ char) {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n\
    \                encodedMessage.append(alphabet[newIndex])\n            }\n  \
    \      } else {\n            encodedMessage.append(char)\n        }\n    }\n \
    \   return encodedMessage", "    var encodedMessage = \"\"\n    for character\
    \ in message.characters {\n        let lowercaseCharacter = String(character).lowercased()\n\
    \        if lowercaseCharacter == \"a\" {\n            encodedMessage += \"c\"\
    \n        } else if lowercaseCharacter == \"e\" {\n            encodedMessage\
    \ += \"g\"\n        } else if lowercaseCharacter == \"i\" {\n            encodedMessage\
    \ += \"k\"\n        } else if lowercaseCharacter == \"o\" {\n            encodedMessage\
    \ += \"q\"\n        } else if lowercaseCharacter == \"u\" {\n            encodedMessage\
    \ += \"y\"\n        } else if lowercaseCharacter == \"y\" {\n            encodedMessage\
    \ += \"a\"\n        } else {\n            encodedMessage += String(character).uppercased()\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels3 = \"bdfhjlnprtvxz\"\
    \n    let vowels4 = \"aeiouy\"\n    let vowels5 = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    let vowels6 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels7 = \"aeiouy\"\n  \
    \  let vowels8 = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels9 = \"cdfghjklmnpqrstvwxyz\"\
    \n    let vowels10 = \"aeiouy\"\n    let vowels11 = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    let vowels12 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels13 = \"aeiouy\"\n\
    \    let vowels14 = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels15 = \"cdfghjklmnpqrstvwxyz\"\
    \n    let vowels16 = \"aeiouy\"\n    let vowels17 = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    let vowels18 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels19 = \"aeiouy\"\n\
    \    let vowels20 = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels21 = \"cdfghjklmnpqrstvwxyz\"\
    \n    let vowels22 = \"aeiouy\"\n    let vowels23 = \"bcdfghjklmnpqrstvwxyz\"\n\
    \    let vowels24 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels25 = \"aeiouy\"\n\
    \    let vowels26 = \"bcdfghjklmnpqrstvwxyz\"\n    let vowels27 = \"cdfgh", " \
    \   var encodedMessage = \"\"\n    var vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    for char in message.characters {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            let index = vowels.index(of: String(char).lowercased())\n   \
    \         if index == 4 {\n                encodedMessage += vowels[0]\n     \
    \       } else {\n                encodedMessage += vowels[index! + 2]\n     \
    \       }\n        } else {\n            encodedMessage += String(char)\n    \
    \    }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n  \
    \  let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet:\
    \ [Character] = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]\n    for letter in message {\n   \
    \     if let index = alphabet.firstIndex(of: letter) {\n            if vowels.contains(letter)\
    \ {\n                encodedMessage.append(alphabet[index + 2])\n            }\
    \ else {\n                encodedMessage.append(alphabet[index].uppercased())\n\
    \            }\n        }\n    }\n    return encodedMessage", "    var encoded\
    \ = \"\"\n    for char in message.characters {\n        if char.isVowel() {\n\
    \            encoded.append(char.next().next())\n        } else {\n          \
    \  encoded.append(char.swapCase())\n        }\n    }\n    return encoded", " \
    \   let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encoded = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            let index = letters.index(of: char)!\n            let newIndex\
    \ = letters.index(index, offsetBy: 2)\n            encoded.append(letters[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message.lowercased() {\n    \
    \    if vowels.contains(char) {\n            encodedMessage += String(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: char)! + 2)])\n        } else {\n            encodedMessage\
    \ += String(char)\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage = \"\"\n    for\
    \ character in message.characters {\n        if vowels.contains(String(character).lowercased())\
    \ {\n            encodedMessage += String(character).lowercased() == \"u\" ? \"\
    a\" : String(character).lowercased().unicodeScalars.map { UnicodeScalar($0.value\
    \ + 2)! }.map { Character($0) }.joined()\n        } else {\n            encodedMessage\
    \ += String(character).lowercased() == String(character) ? String(character).uppercased()\
    \ : String(character).lowercased()\n        }\n    }\n    return encodedMessage",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage =\
    \ \"\"\n    for char in message.characters {\n        if vowels.contains(String(char).lowercased())\
    \ {\n            encodedMessage += String(char).lowercased() == \"u\" ? \"a\"\
    \ : String(characters.index(of: char)!.advanced(by: 2))\n        } else {\n  \
    \          encodedMessage += String(char).lowercased() == String(char) ? String(char).uppercased()\
    \ : String(char).lowercased()\n        }\n    }\n    return encodedMessage", " \
    \   var encodedMessage = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    for character in message.characters {\n        if vowels.contains(String(character).lowercased())\
    \ {\n            if String(character).lowercased() == \"u\" {\n              \
    \  encodedMessage += \"a\"\n            } else {\n                encodedMessage\
    \ += String(character).lowercased().unicodeScalars.map {\n                   \
    \ UnicodeScalar(($0.value + 2) % 26 + $0.value / 26 * 26)!\n                }\n\
    \            }\n        } else {\n            encodedMessage += String(character).lowercased().unicodeScalars.map\
    \ {\n                UnicodeScalar(($0.value + 32) % 26 + $0.value / 26 * 26)!\n\
    \            }\n        }\n    }\n    return encodedMessage", "    let vowels\
    \ = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encoded.append(char)\n       \
    \ }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(letters.startIndex,\
    \ offsetBy: letters.distance(from: letters.startIndex, to: letters.firstIndex(of:\
    \ char)!))\n            encoded.append(letters[letters.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for character in message.lowercased() {\n      \
    \  if let index = letters.index(of: character) {\n            let nextIndex =\
    \ letters.index(index, offsetBy: 2)\n            encoded.append(letters[nextIndex])\n\
    \        } else {\n            encoded.append(character)\n        }\n    }\n \
    \   return encoded", "    var encodedMessage = \"\"\n    for char in message.characters\
    \ {\n        if char.isUppercase {\n            encodedMessage.append(char.lowercase)\n\
    \        } else {\n            encodedMessage.append(char.uppercase)\n       \
    \ }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(letters.startIndex,\
    \ offsetBy: letters.distance(from: letters.startIndex, to: letters.index(of: char)!))\n\
    \            let next = letters.index(index, offsetBy: 2)\n            encoded.append(letters[next])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message.lowercased() {\n  \
    \      if vowels.contains(letter) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.firstIndex(of:\
    \ letter)!))\n            encodedMessage.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message.characters {\n        if char.isVowel() {\n         \
    \   encodedMessage.append(char.next().next())\n        } else {\n            encodedMessage.append(char.swapCase())\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\
    \n    for letter in message.lowercased() {\n        if vowels.contains(letter)\
    \ {\n            let index = letters.index(of: letter)!\n            let nextIndex\
    \ = letters.index(index, offsetBy: 2)\n            let nextLetter = letters[nextIndex]\n\
    \            encodedMessage.append(nextLetter)\n        } else {\n           \
    \ encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let letters = Array(message.lowercased())\n\
    \    var encoded = \"\"\n    for letter in letters {\n        if vowels.contains(letter)\
    \ {\n            let index = vowels.index(of: letter)!\n            let newIndex\
    \ = (index + 2) % vowels.count\n            encoded += vowels[newIndex]\n    \
    \    } else {\n            encoded += String(letter)\n        }\n    }\n    return\
    \ encoded", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encoded = \"\"\n    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message.lowercased() {\n \
    \       if let index = alphabet.index(of: char) {\n            let newIndex =\
    \ alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message.lowercased() {\n  \
    \      if let index = alphabet.index(of: letter) {\n            if let vowelIndex\
    \ = vowels.index(of: letter) {\n                let newIndex = alphabet.index(vowelIndex,\
    \ offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n  \
    \          } else {\n                encodedMessage.append(alphabet[index])\n\
    \            }\n        } else {\n            encodedMessage.append(letter)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n  \
    \  for char in message.lowercased() {\n        if vowels.contains(char) {\n  \
    \          let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!))\n            encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encoded.append(char)\n       \
    \ }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = letters.index(of:\
    \ char)!\n            encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message.lowercased() {\n        if let\
    \ index = alphabet.index(of: char) {\n            let newIndex = (index.encodedOffset\
    \ + 2) % alphabet.count\n            encoded.append(alphabet[alphabet.index(alphabet.startIndex,\
    \ offsetBy: newIndex)])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    var encodedMessage = \"\"\n    let\
    \ vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ char in message.lowercased() {\n        if vowels.contains(char) {\n       \
    \     let index = alphabet.index(of: char)!\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n      \
    \  } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isVowel {\n            encodedMessage.append(character.next(2).uppercased())\n\
    \        } else {\n            encodedMessage.append(character.uppercased())\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\
    \"\n    for char in message.lowercased() {\n        if vowels.contains(char) {\n\
    \            let index = alphabet.index(of: char)!\n            let newIndex =\
    \ alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[nextIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    // TODO: Implement this function\n    return \"\"", "    var\
    \ encodedMessage = \"\"\n    for char in message.characters {\n        if char.isVowel()\
    \ {\n            encodedMessage.append(char.next().next())\n        } else {\n\
    \            encodedMessage.append(char.swapCase())\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n   \
    \ let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for\
    \ char in message.lowercased() {\n        if let index = alphabet.index(of: char)\
    \ {\n            let nextIndex = alphabet.index(index, offsetBy: 2)\n        \
    \    encoded.append(alphabet[nextIndex])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of: char)!\
    \ + 2)\n            encodedMessage.append(alphabet[index])\n        } else {\n\
    \            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    var encodedMessage = \"\"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            if vowels.contains(String(char))\
    \ {\n                let newIndex = alphabet.index(index, offsetBy: 2)\n     \
    \           encodedMessage.append(alphabet[newIndex])\n            } else {\n\
    \                encodedMessage.append(alphabet[index])\n            }\n     \
    \   }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n   \
    \ for char in message.characters {\n        if char.isVowel {\n            encodedMessage.append(char.next.next)\n\
    \        } else {\n            encodedMessage.append(char.swapCase)\n        }\n\
    \    }\n    return encodedMessage", "    let vowels: Set<Character> = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\",\
    \ \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for char in message {\n  \
    \      if vowels.contains(char) {\n            let index = alphabet.firstIndex(of:\
    \ char)!\n            let newIndex = (index + 2) % alphabet.count\n          \
    \  encodedMessage.append(alphabet[newIndex])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n   \
    \ for char in message.lowercased() {\n        if vowels.contains(char) {\n   \
    \         let index = letters.index(of: char)!\n            let newIndex = letters.index(index,\
    \ offsetBy: 2)\n            encoded.append(letters[newIndex])\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded",
  '    return ""', "    var encodedMessage = \"\"\n    let vowels: [Character] = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\"]\n    for letter in message {\n        if vowels.contains(letter)\
    \ {\n            if let index = alphabet.firstIndex(of: letter) {\n          \
    \      encodedMessage.append(alphabet[index + 2])\n            }\n        } else\
    \ {\n            encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage",
  "    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    for char in message.lowercased() {\n       \
    \ if alphabet.contains(char) {\n            if vowels.contains(char) {\n     \
    \           let index = alphabet.index(of: char)!\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            } else {\n                encodedMessage.append(char)\n         \
    \   }\n        }\n    }\n    return encodedMessage", '    return ""', "    var\
    \ encodedMessage = \"\"\n    for character in message.characters {\n        if\
    \ character.isVowel() {\n            encodedMessage.append(character.next().next())\n\
    \        } else {\n            encodedMessage.append(character.swapCase())\n \
    \       }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message.characters {\n        if char.isVowel() {\n         \
    \   encodedMessage.append(char.next().next())\n        } else {\n            encodedMessage.append(char.swapCase())\n\
    \        }\n    }\n    return encodedMessage", "    // TODO: Implement this function\n\
    \    return \"\"", '    return ""', "    let vowels = \"aeiou\"\n    let letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = letters.index(letters.startIndex, offsetBy: letters.distance(from: letters.startIndex,\
    \ to: letters.index(of: char)!))\n            encodedMessage.append(letters[letters.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encodedMessage.append(char)\n\
    \        }\n    }\n    return encodedMessage", "    var encodedMessage = \"\"\n\
    \    for char in message.characters {\n        if char.isVowel() {\n         \
    \   encodedMessage.append(char.next().next())\n        } else {\n            encodedMessage.append(char.swapCase())\n\
    \        }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n \
    \   let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels3 = \"bdfhjlnprtvxz\"\
    \n    let vowels4 = \"aeiou\"\n    let vowels5 = \"bdfhjlnprtvxz\"\n    let vowels6\
    \ = \"cdfghjklmnpqrstvwxyz\"\n    let vowels7 = \"aeiou\"\n    let vowels8 = \"\
    cdfghjklmnpqrstvwxyz\"\n    let vowels9 = \"bdfhjlnprtvxz\"\n    let vowels10\
    \ = \"aeiou\"\n    let vowels11 = \"bdfhjlnprtvxz\"\n    let vowels12 = \"cdfghjklmnpqrstvwxyz\"\
    \n    let vowels13 = \"aeiou\"\n    let vowels14 = \"cdfghjklmnpqrstvwxyz\"\n\
    \    let vowels15 = \"bdfhjlnprtvxz\"\n    let vowels16 = \"aeiou\"\n    let vowels17\
    \ = \"bdfhjlnprtvxz\"\n    let vowels18 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels19\
    \ = \"aeiou\"\n    let vowels20 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels21 =\
    \ \"bdfhjlnprtvxz\"\n    let vowels22 = \"aeiou\"\n    let vowels23 = \"bdfhjlnprtvxz\"\
    \n    let vowels24 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels25 = \"aeiou\"\n\
    \    let vowels26 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels27 = \"bdfhjlnprtvxz\"\
    \n    let vowels28 = \"aeiou\"\n    let vowels29 = \"bdfhjlnprtvxz\"\n    let\
    \ vowels30", "    var encodedMessage = \"\"\n    let vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ char in message.lowercased() {\n        if vowels.contains(String(char)) {\n\
    \            let index = alphabet.index(of: char)\n            let newIndex =\
    \ alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!))\n            encodedMessage.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage", "    var encodedMessage = \"\"\n    for char\
    \ in message.characters {\n        if char.isVowel() {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let\
    \ letters = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char\
    \ in message.lowercased() {\n        if let index = letters.firstIndex(of: char)\
    \ {\n            encoded.append(letters[letters.index(index, offsetBy: 2)])\n\
    \        } else if let index = vowels.firstIndex(of: char) {\n            encoded.append(vowels[vowels.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encoded.append(char)\n       \
    \ }\n    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of: char)!\
    \ + 2)\n            encodedMessage.append(alphabet[index])\n        } else {\n\
    \            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    var encoded = \"\"\n    for char in message.characters {\n        if char.isVowel()\
    \ {\n            encoded.append(char.next().next())\n        } else {\n      \
    \      encoded.append(char.swapCase())\n        }\n    }\n    return encoded",
  "    // TODO: Implement me!\n    return \"\"", "    let vowels = \"aeiou\"\n   \
    \ let vowels2 = \"cdfghjklmnpqrstvwxyz\"\n    let vowels3 = \"bdfhjlnprtvxz\"\n\
    \    let vowels4 = \"aeiou\"\n    let vowels5 = \"bcdfghjklmnpqrstvwxyz\"\n  \
    \  var encoded = \"\"\n    for char in message.characters {\n        if vowels.containsString(String(char).lowercaseString)\
    \ {\n            let index = vowels.characters.indexOf(char.lowercase)\n     \
    \       encoded.append(vowels2[index!])\n        } else if vowels3.containsString(String(char).lowercaseString)\
    \ {\n            let index = vowels3.characters.indexOf(char.lowercase)\n    \
    \        encoded.append(vowels4[index!])\n        } else if vowels5.containsString(String(char).lowercaseString)\
    \ {\n            let index = vowels5.characters.indexOf(char.lowercase)\n    \
    \        encoded.append(vowels5[index!])\n        } else {\n            encoded.append(char)\n\
    \        }\n    }\n    return encoded", "    var encodedMessage = \"\"\n    for\
    \ letter in message.characters {\n        if let encodedLetter = encodeLetter(letter)\
    \ {\n            encodedMessage.append(encodedLetter)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let vowels_shifted = \"cgkq\"\
    \n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\n    let letters_shifted =\
    \ \"cdefghijklmnopqrstuvwxyzab\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            encoded.append(vowels_shifted[vowels.index(of:\
    \ char)!])\n        } else if letters.contains(char) {\n            encoded.append(letters_shifted[letters.index(of:\
    \ char)!])\n        } else {\n            encoded.append(char)\n        }\n  \
    \  }\n    return encoded", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for character in message.lowercased() {\n\
    \        if vowels.contains(character) {\n            let index = letters.index(of:\
    \ character)!\n            let newIndex = letters.index(index, offsetBy: 2)\n\
    \            encodedMessage.append(letters[newIndex])\n        } else {\n    \
    \        encodedMessage.append(character)\n        }\n    }\n    return encodedMessage",
  "    return message.characters.map {\n        switch $0 {\n        case \"a\":\n\
    \            return \"c\"\n        case \"e\":\n            return \"g\"\n   \
    \     case \"i\":\n            return \"k\"\n        case \"o\":\n           \
    \ return \"q\"\n        case \"u\":\n            return \"y\"\n        case \"\
    A\":\n            return \"C\"\n        case \"E\":\n            return \"G\"\n\
    \        case \"I\":\n            return \"K\"\n        case \"O\":\n        \
    \    return \"Q\"\n        case \"U\":\n            return \"Y\"\n        default:\n\
    \            return String($0).uppercased() == String($0) ? String($0).lowercased()\
    \ : String($0).uppercased()\n        }\n    }.joined()", "    var encoded = \"\
    \"\n    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    for char in message.lowercased() {\n        if vowels.contains(char) {\n\
    \            let index = alphabet.index(of: char)!\n            let newIndex =\
    \ alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"\
    v\", \"w\", \"x\", \"y\", \"z\"]\n    var encodedMessage = \"\"\n    for letter\
    \ in message.lowercased() {\n        if vowels.contains(String(letter)) {\n  \
    \          let index = alphabet.index(of: String(letter))!\n            let newIndex\
    \ = index + 2\n            encodedMessage += alphabet[newIndex]\n        } else\
    \ {\n            encodedMessage += String(letter)\n        }\n    }\n    return\
    \ encodedMessage", "    var encoded = \"\"\n    for char in message.characters\
    \ {\n        if char.isVowel() {\n            encoded.append(char.nextVowel())\n\
    \        } else if char.isUpperCase() {\n            encoded.append(char.lowercased())\n\
    \        } else {\n            encoded.append(char.uppercased())\n        }\n\
    \    }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    let alphabetUpper = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    var encodedMessage = \"\"\n    for character in message.characters {\n \
    \       if vowels.containsString(String(character)) {\n            if let index\
    \ = alphabet.characters.indexOf(character) {\n                let nextIndex =\
    \ alphabet.startIndex.distanceTo(index) + 2\n                encodedMessage.append(alphabet[alphabet.startIndex.advancedBy(nextIndex\
    \ % alphabet.characters.count)])\n            } else if let index = alphabetUpper.characters.indexOf(character)\
    \ {\n                let nextIndex = alphabetUpper.startIndex.distanceTo(index)\
    \ + 2\n                encodedMessage.append(alphabetUpper[alphabetUpper.startIndex.advancedBy(nextIndex\
    \ % alphabetUpper.characters.count)])\n            }\n        } else {\n     \
    \       encodedMessage.append(character)\n        }\n    }\n    return encodedMessage",
  "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message.lowercased() {\n    \
    \    if vowels.contains(String(char)) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!) + 2)\n            encodedMessage.append(alphabet[index])\n        }\
    \ else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let vowels2 = \"cdfghjklmnpqrstvwxyz\"\
    \n    let vowels3 = \"bdfhjlnprtvxz\"\n    let vowels4 = \"aeiou\"\n    let vowels5\
    \ = \"aeiou\"\n    let vowels6 = \"aeiou\"\n    let vowels7 = \"aeiou\"\n    let\
    \ vowels8 = \"aeiou\"\n    let vowels9 = \"aeiou\"\n    let vowels10 = \"aeiou\"\
    \n    let vowels11 = \"aeiou\"\n    let vowels12 = \"aeiou\"\n    let vowels13\
    \ = \"aeiou\"\n    let vowels14 = \"aeiou\"\n    let vowels15 = \"aeiou\"\n  \
    \  let vowels16 = \"aeiou\"\n    let vowels17 = \"aeiou\"\n    let vowels18 =\
    \ \"aeiou\"\n    let vowels19 = \"aeiou\"\n    let vowels20 = \"aeiou\"\n    let\
    \ vowels21 = \"aeiou\"\n    let vowels22 = \"aeiou\"\n    let vowels23 = \"aeiou\"\
    \n    let vowels24 = \"aeiou\"\n    let vowels25 = \"aeiou\"\n    let vowels26\
    \ = \"aeiou\"\n    let vowels27 = \"aeiou\"\n    let vowels28 = \"aeiou\"\n  \
    \  let vowels29 = \"aeiou\"\n    let vowels30 = \"aeiou\"\n    let vowels31 =\
    \ \"aeiou\"\n    let vowels32 = \"aeiou\"\n    let vowels33 = \"aeiou\"\n    let\
    \ vowels34 = \"aeiou\"\n    let vowels35 = \"aeiou\"\n    let vowels36 = \"aeiou\"\
    \n    let vowels37 = \"aeiou\"\n    let vowels38 = \"aeiou\"\n    let vowels39\
    \ = \"aeiou\"\n    let vowels40 = \"aeiou\"\n    let vowels41 = \"aeiou\"\n  \
    \  let vow", '    return ""', "    let vowels = \"aeiou\"\n    let alphabet =\
    \ \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(char) {\n            let\
    \ index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.index(of: char)!\
    \ + 2)\n            encodedMessage.append(alphabet[index])\n        } else {\n\
    \            encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encoded = \"\"\n    for char in message.lowercased() {\n        if let\
    \ index = alphabet.index(of: char) {\n            let newIndex = alphabet.index(index,\
    \ offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encoded = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.firstIndex(of: char)!))\n            encoded.append(alphabet[alphabet.index(index,\
    \ offsetBy: 2)])\n        } else {\n            encoded.append(char)\n       \
    \ }\n    }\n    return encoded", '    return ""', "    var encodedMessage = \"\
    \"\n    for char in message.characters {\n        if char.isLetter {\n       \
    \     let letter = String(char).uppercaseString\n            let index = letters.indexOf(letter)!\n\
    \            let encodedIndex = (index + 2) % letters.count\n            let encodedLetter\
    \ = letters[encodedIndex]\n            encodedMessage += encodedLetter\n     \
    \   } else {\n            encodedMessage += String(char)\n        }\n    }\n \
    \   return encodedMessage", "    var encodedMessage = \"\"\n    let vowels = \"\
    aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(of:\
    \ char)!\n            let newIndex = alphabet.index(index, offsetBy: 2)\n    \
    \        encodedMessage.append(alphabet[newIndex])\n        } else {\n       \
    \     encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    var encodedMessage = \"\"\n    for char in message.characters {\n        if\
    \ char.isVowel() {\n            encodedMessage.append(char.next().next())\n  \
    \      } else {\n            encodedMessage.append(char.swapCase())\n        }\n\
    \    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for letter\
    \ in message.lowercased() {\n        if vowels.contains(letter) {\n          \
    \  encodedMessage += String(alphabet[alphabet.index(alphabet.startIndex, offsetBy:\
    \ alphabet.index(of: letter)! + 2)])\n        } else {\n            encodedMessage\
    \ += String(letter)\n        }\n    }\n    return encodedMessage", '    return
    ""', "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for char in message.lowercased() {\n    \
    \    if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: char)! + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let nextIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[nextIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    var encodedMessage = \"\"\n    for char\
    \ in message.lowercased() {\n        if vowels.contains(String(char)) {\n    \
    \        let index = alphabet.index(of: char)\n            let nextIndex = alphabet.index(index!,\
    \ offsetBy: 2)\n            encodedMessage.append(alphabet[nextIndex])\n     \
    \   } else {\n            encodedMessage.append(char)\n        }\n    }\n    return\
    \ encodedMessage", "    var encodedMessage = \"\"\n    let vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(of: char)\n            let newIndex\
    \ = alphabet.index(index!, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for character in message.lowercased()\
    \ {\n        if vowels.contains(character) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.firstIndex(of:\
    \ character)!))\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encoded.append(character)\n        }\n \
    \   }\n    return encoded", "    var encodedMessage = \"\"\n    let vowels: [Character]\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet: [Character] = [\"a\"\
    , \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\"\
    , \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\"\
    , \"x\", \"y\", \"z\"]\n    for char in message {\n        if vowels.contains(char)\
    \ {\n            if char == \"u\" {\n                encodedMessage.append(\"\
    a\")\n            } else {\n                let index = alphabet.firstIndex(of:\
    \ char)!\n                encodedMessage.append(alphabet[index + 2])\n       \
    \     }\n        } else {\n            encodedMessage.append(char)\n        }\n\
    \    }\n    return encodedMessage.uppercased()", "    var encoded = \"\"\n   \
    \ for char in message.characters {\n        if char.isVowel() {\n            encoded.append(char.next().next())\n\
    \        } else {\n            encoded.append(char.swapCase())\n        }\n  \
    \  }\n    return encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", '    return ""', "    let vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\
    \n    for char in message.lowercased() {\n        if vowels.contains(String(char))\
    \ {\n            let index = alphabet.index(alphabet.startIndex, offsetBy: alphabet.distance(from:\
    \ alphabet.startIndex, to: alphabet.index(of: char)!) + 2)\n            encoded.append(alphabet[index])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for letter in message.lowercased() {\n  \
    \      if vowels.contains(letter) {\n            let index = letters.index(of:\
    \ letter)!\n            let newIndex = letters.index(index, offsetBy: 2)\n   \
    \         encodedMessage.append(letters[newIndex])\n        } else {\n       \
    \     encodedMessage.append(letter)\n        }\n    }\n    return encodedMessage",
  "    let vowels: [Character] = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    var encodedMessage\
    \ = \"\"\n    for char in message {\n        if vowels.contains(char) {\n    \
    \        encodedMessage.append(vowels[(vowels.firstIndex(of: char)! + 2) % vowels.count])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage"]
stop_tokens:
- "\n}"
