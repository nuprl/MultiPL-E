name: HumanEval_93_encode
language: swift
prompt: "\n/// Write a function that takes a message, and encodes in such a \n///\
  \ way that it swaps case of all letters, replaces all vowels in \n/// the message\
  \ with the letter that appears 2 places ahead of that \n/// vowel in the english\
  \ alphabet. \n/// Assume only letters. \n/// Examples:\n/// >>> encode('test')\n\
  /// 'TGST'\n/// >>> encode('This is a message')\n/// 'tHKS KS C MGSSCGG'\nfunc encode(message:\
  \ String) -> String {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(encode(message: \"TEST\") == \"tgst\")\n\
  assert(encode(message: \"Mudasir\") == \"mWDCSKR\")\nassert(encode(message: \"YES\"\
  ) == \"ygs\")\nassert(encode(message: \"This is a message\") == \"tHKS KS C MGSSCGG\"\
  )\nassert(encode(message: \"I DoNt KnOw WhAt tO WrItE\") == \"k dQnT kNqW wHcT Tq\
  \ wRkTg\")"
completions: ["    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message.lowercased() {\n        if vowels.contains(char)\
    \ {\n            let index = letters.index(of: char)!\n            let newIndex\
    \ = letters.index(index, offsetBy: 2)\n            encoded.append(letters[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encodedMessage = \"\"\n    for character in message.characters\
    \ {\n        if character.isVowel() {\n            encodedMessage.append(character.nextVowel())\n\
    \        } else {\n            encodedMessage.append(character.swapCase())\n \
    \       }\n    }\n    return encodedMessage", "    let vowels = \"aeiou\"\n  \
    \  let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    let encoded = message.characters.map\
    \ { char -> Character in\n        if let index = alphabet.characters.indexOf(char)\
    \ {\n            if vowels.characters.contains(char) {\n                let newIndex\
    \ = index.advancedBy(2) % alphabet.characters.count\n                return alphabet.characters[newIndex]\n\
    \            } else {\n                return alphabet.characters[index.advancedBy(2)\
    \ % alphabet.characters.count].uppercaseString.characters.first!\n           \
    \ }\n        } else {\n            return char\n        }\n    }\n    return String(encoded)",
  "    var encodedMessage = \"\"\n    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    for letter in message.lowercased() {\n     \
    \   if vowels.contains(letter) {\n            let index = alphabet.index(of: letter)!\n\
    \            let newIndex = alphabet.index(index, offsetBy: 2)\n            encodedMessage.append(alphabet[newIndex])\n\
    \        } else {\n            encodedMessage.append(letter)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ char)!))\n            encoded.append(alphabet[alphabet.index(index, offsetBy:\
    \ 2)])\n        } else {\n            encoded.append(char)\n        }\n    }\n\
    \    return encoded", "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encodedMessage = \"\"\n    for character in message.lowercased() {\n\
    \        if vowels.contains(character) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.distance(from: alphabet.startIndex, to: alphabet.index(of:\
    \ character)!) + 2)\n            encodedMessage.append(alphabet[index])\n    \
    \    } else {\n            encodedMessage.append(character)\n        }\n    }\n\
    \    return encodedMessage", "    var encodedMessage = \"\"\n    for character\
    \ in message.characters {\n        if character.isVowel() {\n            let encodedCharacter\
    \ = character.encodeVowel()\n            encodedMessage.append(encodedCharacter)\n\
    \        } else {\n            let encodedCharacter = character.encodeConsonant()\n\
    \            encodedMessage.append(encodedCharacter)\n        }\n    }\n    return\
    \ encodedMessage", "    let vowels = \"aeiou\"\n    let letters = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    var encoded = \"\"\n    for char in message.lowercased() {\n        if let\
    \ index = letters.index(of: char) {\n            let newIndex = (index + 2) %\
    \ letters.count\n            encoded.append(letters[newIndex])\n        } else\
    \ {\n            encoded.append(char)\n        }\n    }\n    return encoded",
  "    var encodedMessage = \"\"\n    for char in message.characters {\n        if\
    \ char.isVowel() {\n            encodedMessage.append(char.next().next())\n  \
    \      } else {\n            encodedMessage.append(char.swapCase())\n        }\n\
    \    }\n    return encodedMessage", "    var encodedMessage = \"\"\n    for char\
    \ in message.characters {\n        if char.isVowel {\n            encodedMessage.append(char.next().next())\n\
    \        } else {\n            encodedMessage.append(char.swapCase())\n      \
    \  }\n    }\n    return encodedMessage", "    let vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    var encoded\
    \ = \"\"\n    for char in message.lowercased() {\n        if let index = alphabet.index(of:\
    \ char) {\n            if vowels.contains(String(char)) {\n                let\
    \ nextIndex = alphabet.index(index, offsetBy: 2)\n                encoded.append(alphabet[nextIndex])\n\
    \            } else {\n                encoded.append(alphabet[index])\n     \
    \       }\n        }\n    }\n    return encoded", "    var encodedMessage = \"\
    \"\n    let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    for char in message.lowercased() {\n       \
    \ if vowels.contains(String(char)) {\n            let index = alphabet.index(of:\
    \ char)\n            let newIndex = alphabet.index(index!, offsetBy: 2)\n    \
    \        encodedMessage.append(alphabet[newIndex])\n        } else {\n       \
    \     encodedMessage.append(char)\n        }\n    }\n    return encodedMessage",
  "    let vowels = \"aeiou\"\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n\
    \    var encodedMessage = \"\"\n    for char in message.lowercased() {\n     \
    \   if vowels.contains(char) {\n            let index = alphabet.index(alphabet.startIndex,\
    \ offsetBy: alphabet.index(of: char)! + 2)\n            encodedMessage.append(alphabet[index])\n\
    \        } else {\n            encodedMessage.append(char)\n        }\n    }\n\
    \    return encodedMessage", "    let vowels = \"aeiou\"\n    let alphabet = \"\
    abcdefghijklmnopqrstuvwxyz\"\n    var encoded = \"\"\n    for char in message.lowercased()\
    \ {\n        if let index = alphabet.index(of: char) {\n            let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n            encoded.append(alphabet[newIndex])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encoded = \"\"\n    let vowels = \"aeiou\"\n    for char\
    \ in message.characters {\n        if vowels.containsString(String(char)) {\n\
    \            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n            encoded.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encoded = \"\"\n    let vowels = \"aeiou\"\n    for char\
    \ in message.characters {\n        if vowels.containsString(String(char).lowercaseString)\
    \ {\n            let index = vowels.startIndex.distanceTo(vowels.startIndex.advancedBy(vowels.characters.indexOf(char)!\
    \ + 2))\n            encoded.append(vowels[vowels.startIndex.advancedBy(index)])\n\
    \        } else {\n            encoded.append(char)\n        }\n    }\n    return\
    \ encoded", "    var encodedMessage = \"\"\n    let vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"]\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for\
    \ char in message.lowercased() {\n        if vowels.contains(String(char)) {\n\
    \            if let index = alphabet.index(of: char) {\n                let newIndex\
    \ = alphabet.index(index, offsetBy: 2)\n                encodedMessage.append(alphabet[newIndex])\n\
    \            }\n        } else {\n            encodedMessage.append(char)\n  \
    \      }\n    }\n    return encodedMessage", '    return ""', "    var encodedMessage\
    \ = \"\"\n    for char in message.characters {\n        if char.isVowel() {\n\
    \            encodedMessage.append(char.next().next())\n        } else {\n   \
    \         encodedMessage.append(char.swapCase())\n        }\n    }\n    return\
    \ encodedMessage", '    return ""']
stop_tokens:
- "\n}"
