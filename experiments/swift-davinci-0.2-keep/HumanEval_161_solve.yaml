name: HumanEval_161_solve
language: swift
prompt: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the\
  \ string contains no letters, reverse the string.\n/// The function should return\
  \ the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n/// solve(\"\
  ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String) -> String\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
  \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"\
  #a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
  \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
  \ \"#ccc\") == \"#CCC\")"
completions: ["    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n\
    \            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    guard !s.isEmpty else\
    \ { return s }\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 }", "    var result = \"\"\n    let letters\
    \ = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        result = String(s.reversed())\n\
    \    } else {\n        result = s.map { $0.isLetter ? $0.toggle() : $0 }\n   \
    \ }\n    return result", "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.toggleCase() : $0 }", "    var result = \"\"\n    for char in s {\n   \
    \     if char.isLetter {\n            result += String(char.isUppercase ? char.lowercased()\
    \ : char.uppercased())\n        } else {\n            result += String(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    return s.characters.map\
    \ {\n        if $0.isLetter {\n            return $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()\n        }\n        return $0\n    }.reduce(\"\", +)", " \
    \   var result = \"\"\n    for c in s {\n        if c.isLetter {\n           \
    \ if c.isUppercase {\n                result.append(c.lowercased())\n        \
    \    } else {\n                result.append(c.uppercased())\n            }\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    if result.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return result", "    var\
    \ result = \"\"\n    for char in s {\n        if char.isLetter {\n           \
    \ result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += char.isUppercase\
    \ ? char.lowercased() : char.uppercased()\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += char.isUppercase ? char.lowercased() : char.uppercased()\n  \
    \      } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 })", "    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            if char.isUppercase {\n    \
    \            result.append(char.lowercased())\n            } else {\n        \
    \        result.append(char.uppercased())\n            }\n        } else {\n \
    \           result.append(char)\n        }\n    }\n    if result.isEmpty {\n \
    \       return String(s.reversed())\n    }\n    return result", "    var result\
    \ = \"\"\n    for char in s {\n        if char.isLetter {\n            result\
    \ += String(char.isUppercase ? char.lowercased() : char.uppercased())\n      \
    \  } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 }", "    var result = \"\"\n    for char in\
    \ s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    guard s.rangeOfCharacter(from:\
    \ CharacterSet.letters) != nil else {\n        return String(s.reversed())\n \
    \   }\n    var result = \"\"\n    for char in s {\n        if char.isLetter {\n\
    \            result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 })", "    var result = \"\"\n    for c in\
    \ s {\n        if c.isLetter {\n            result.append(c.isUppercase ? c.lowercased()\
    \ : c.uppercased())\n        } else {\n            result.append(c)\n        }\n\
    \    }\n    return result.isEmpty ? String(s.reversed()) : result", "    var result\
    \ = \"\"\n    for char in s {\n        if char.isLetter {\n            result\
    \ += String(char.isUppercase ? char.lowercased() : char.uppercased())\n      \
    \  } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    if result.isEmpty {\n        return String(s.reversed())\n    }\n   \
    \ return result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 }", "    var result = \"\"\n    for char in\
    \ s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    if s.rangeOfCharacter(from:\
    \ CharacterSet.letters) == nil {\n        return String(s.reversed())\n    }\n\
    \    var result = \"\"\n    for c in s {\n        if c.isLetter {\n          \
    \  result += c.isUppercase ? c.lowercased() : c.uppercased()\n        } else {\n\
    \            result += String(c)\n        }\n    }\n    return result", "    var\
    \ result = \"\"\n    for char in s {\n        if char.isLetter {\n           \
    \ result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n\
    \            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 }", "    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 })", "    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 })", "    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }", "    var result = \"\"\n    for c in s {\n\
    \        if c.isLetter {\n            result.append(c.isUppercase ? c.lowercased()\
    \ : c.uppercased())\n        } else {\n            result.append(c)\n        }\n\
    \    }\n    return result.isEmpty ? String(s.reversed()) : result", "    var result\
    \ = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += char.isUppercase ? char.lowercased() : char.uppercased()\n  \
    \      } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += char.isUppercase\
    \ ? char.lowercased() : char.uppercased()\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    return s.characters.map {\n        if $0.isLetter {\n      \
    \      return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n        }\n\
    \        return $0\n    }.reduce(\"\", +)", "    var result = \"\"\n    for c\
    \ in s {\n        if c.isLetter {\n            result += c.isUppercase ? c.lowercased()\
    \ : c.uppercased()\n        } else {\n            result += String(c)\n      \
    \  }\n    }\n    return result.isEmpty ? String(s.reversed()) : result", "   \
    \ var result = \"\"\n    for char in s {\n        if char.isLetter {\n       \
    \     result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    return s.characters.map {\n        if $0.isLetter {\n      \
    \      return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n        }\n\
    \        return $0\n    }.reduce(\"\", { $0 + String($1) })", "    var result\
    \ = \"\"\n    for char in s {\n        if char.isLetter {\n            result\
    \ += String(char.isUppercase ? char.lowercased() : char.uppercased())\n      \
    \  } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    return s.characters.reduce(\"\
    \") {\n        $1.isLetter ? $0 + String($1).lowercased() : $0 + String($1)\n\
    \    }.characters.reversed().reduce(\"\") {\n        $1.isLetter ? $0 + String($1).uppercased()\
    \ : $0 + String($1)\n    }", "    var result = \"\"\n    for char in s {\n   \
    \     if char.isLetter {\n            result += String(char.isUppercase ? char.lowercased()\
    \ : char.uppercased())\n        } else {\n            result += String(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    return s.characters.map {\n        if $0.isLetter {\n            return $0.isUppercase\
    \ ? $0.lowercased() : $0.uppercased()\n        }\n        return $0\n    }.reduce(\"\
    \", +)", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            result += String(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result +=\
    \ String(c)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                result.append(char.lowercased())\n            } else {\n\
    \                result.append(char.uppercased())\n            }\n        } else\
    \ {\n            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result", "    return s.characters.map {\n        if\
    \ $0.isLetter {\n            return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n\
    \        }\n        return $0\n    }.reduce(\"\", +)", "    var result = \"\"\n\
    \    for c in s {\n        if c.isLetter {\n            result += c.isUppercase\
    \ ? c.lowercased() : c.uppercased()\n        } else {\n            result += String(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += char.isUppercase ? char.lowercased() : char.uppercased()\n  \
    \      } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                result.append(char.lowercased())\n            } else {\n\
    \                result.append(char.uppercased())\n            }\n        } else\
    \ {\n            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result", "    var result = \"\"\n    for char in s\
    \ {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    if s.rangeOfCharacter(from: CharacterSet.letters) == nil {\n\
    \        return String(s.reversed())\n    }\n    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result", "    var result = \"\"\
    \n    for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }", "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n\
    \        return String(s.reversed())\n    }\n    return s.map { $0.isLetter ?\
    \ $0.toggleCase() : $0 }", "    var result = \"\"\n    for char in s {\n     \
    \   if char.isLetter {\n            result += String(char.isUppercase ? char.lowercased()\
    \ : char.uppercased())\n        } else {\n            result += String(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    return String(s.map { $0.isLetter ? $0.isUppercase\
    \ ? Character($0.lowercased()) : Character($0.uppercased()) : $0 })", "    var\
    \ result = \"\"\n    for char in s {\n        if char.isLetter {\n           \
    \ if char.isUppercase {\n                result.append(char.lowercased())\n  \
    \          } else {\n                result.append(char.uppercased())\n      \
    \      }\n        } else {\n            result.append(char)\n        }\n    }\n\
    \    return result.isEmpty ? String(s.reversed()) : result", "    var result =\
    \ \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    return s.characters.map { char in\n        if char.isLetter\
    \ {\n            return char.isUppercase ? char.lowercase : char.uppercase\n \
    \       }\n        return char\n    }.reduce(\"\") { $0 + String($1) }", "   \
    \ var result = \"\"\n    for char in s {\n        if char.isLetter {\n       \
    \     result += char.isUppercase ? char.lowercased() : char.uppercased()\n   \
    \     } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = s.filter { $0.isLetter }\n    return letters.isEmpty ? String(s.reversed())\
    \ : String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 })", "    return s.characters.map {\n      \
    \  if $0.isLetter {\n            return $0.isUppercase ? $0.lowercased() : $0.uppercased()\n\
    \        }\n        return $0\n    }.reduce(\"\", +)", "    return s.characters.reduce(\"\
    \") {\n        $1.isLetter ? $0 + String($1).lowercased() : $0 + String($1)\n\
    \    }.reversed()", "    if s.isEmpty {\n        return s\n    }\n    var result\
    \ = \"\"\n    for char in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        return\
    \ String(s.reversed())\n    }\n    return s.map { $0.isLetter ? $0.isUppercase\
    \ ? Character($0.lowercased()) : Character($0.uppercased()) : $0 }", "    var\
    \ result = \"\"\n    for char in s {\n        if char.isLetter {\n           \
    \ result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", '    return String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())
    : Character($0.uppercased()) : $0 })', "    var result = \"\"\n    for c in s\
    \ {\n        if c.isLetter {\n            result.append(c.isUppercase ? c.lowercased()\
    \ : c.uppercased())\n        } else {\n            result.append(c)\n        }\n\
    \    }\n    return result.isEmpty ? String(s.reversed()) : result", "    var result\
    \ = \"\"\n    for char in s {\n        if char.isLetter {\n            result\
    \ += String(char.isUppercase ? char.lowercased() : char.uppercased())\n      \
    \  } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 })", "    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n\
    \            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    guard s.rangeOfCharacter(from:\
    \ CharacterSet.letters) != nil else {\n        return String(s.reversed())\n \
    \   }\n    return String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 })", "    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            if char.isUppercase {\n    \
    \            result.append(char.lowercased())\n            } else {\n        \
    \        result.append(char.uppercased())\n            }\n        } else {\n \
    \           result.append(char)\n        }\n    }\n    return result.isEmpty ?\
    \ s.reversed() : result", "    let letters = s.filter { $0.isLetter }\n    if\
    \ letters.isEmpty {\n        return String(s.reversed())\n    }\n    return s.map\
    \ { $0.isLetter ? $0.toggleCase() : $0 }", "    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            result += char.isUppercase ?\
    \ char.lowercased() : char.uppercased()\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    return s.characters.map\
    \ {\n        if $0.isLetter {\n            return $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()\n        }\n        return $0\n    }.reduce(\"\", +)", " \
    \   var result = \"\"\n    for c in s {\n        if c.isLetter {\n           \
    \ result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n        } else\
    \ {\n            result.append(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result", "    var result = \"\"\n    for char in s\
    \ {\n        if char.isLetter {\n            result += String(char.uppercased()\
    \ == String(char) ? char.lowercased() : char.uppercased())\n        } else {\n\
    \            result += String(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result", "    var result = \"\"\n    for char in s\
    \ {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result", "    let letters\
    \ = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 }", "    var result = \"\"\n    for char in\
    \ s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return String(s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 })", "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return String(s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 })", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            if c.isUppercase {\n   \
    \             result.append(c.lowercased())\n            } else {\n          \
    \      result.append(c.uppercased())\n            }\n        } else {\n      \
    \      result.append(c)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 }", "    var result = \"\"\n    for c in s\
    \ {\n        if c.isLetter {\n            result.append(c.isUppercase ? c.lowercased()\
    \ : c.uppercased())\n        } else {\n            result.append(c)\n        }\n\
    \    }\n    return result.isEmpty ? String(s.reversed()) : result", "    var result\
    \ = \"\"\n    for char in s {\n        if char.isLetter {\n            result\
    \ += String(char.isUppercase ? char.lowercased() : char.uppercased())\n      \
    \  } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += char.isUppercase\
    \ ? char.lowercased() : char.uppercased()\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    guard s.contains(where: { $0.isLetter }) else { return String(s.reversed())\
    \ }\n    return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 }", "    var result = \"\"\n    for char in\
    \ s {\n        if char.isLetter {\n            if char.isUppercase {\n       \
    \         result.append(char.lowercased())\n            } else {\n           \
    \     result.append(char.uppercased())\n            }\n        } else {\n    \
    \        result.append(char)\n        }\n    }\n    if result.isEmpty {\n    \
    \    return String(s.reversed())\n    }\n    return result", "    var result =\
    \ \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    if s.rangeOfCharacter(from: CharacterSet.letters) ==\
    \ nil {\n        result = String(s.reversed())\n    } else {\n        for char\
    \ in s {\n            if char.isLetter {\n                if char.isUpper {\n\
    \                    result.append(char.lowercased())\n                } else\
    \ {\n                    result.append(char.uppercased())\n                }\n\
    \            } else {\n                result.append(char)\n            }\n  \
    \      }\n    }\n    return result", "    var result = \"\"\n    for char in s\
    \ {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            if char.isUppercase\
    \ {\n                result.append(char.lowercased())\n            } else {\n\
    \                result.append(char.uppercased())\n            }\n        } else\
    \ {\n            result.append(char)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result", "    let letters = s.filter { $0.isLetter\
    \ }\n    if letters.isEmpty {\n        return String(s.reversed())\n    }\n  \
    \  return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) :\
    \ Character($0.uppercased()) : $0 }", "    if s.isEmpty {\n        return s\n\
    \    }\n    var result = \"\"\n    for char in s {\n        if char.isLetter {\n\
    \            result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += char.isUppercase\
    \ ? char.lowercased() : char.uppercased()\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n\
    \            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    if s.isEmpty {\n        return s\n    }\n    var result = \"\
    \"\n    for char in s {\n        if char.isLetter {\n            result.append(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += char.isUppercase ? String(char).lowercased() : String(char).uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    return s.characters.map\
    \ {\n        if $0.isLetter {\n            return $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()\n        }\n        return $0\n    }.reduce(\"\", +)", " \
    \   var result = \"\"\n    for char in s {\n        if char.isLetter {\n     \
    \       result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.toggleCase() : $0 }", "    guard s.rangeOfCharacter(from: .letters) !=\
    \ nil else {\n        return String(s.reversed())\n    }\n    var result = \"\"\
    \n    for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result", "    var result = \"\"\
    \n    for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    var result = \"\"\n    for char in s {\n        if char.isLetter {\n\
    \            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  var letters = \"\"\n    for char in s {\n        if char.isLetter {\n     \
    \       letters.append(char)\n        } else {\n            result.append(char)\n\
    \        }\n    }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    for char in letters {\n        if char.isUppercase {\n           \
    \ result.append(char.lowercased())\n        } else {\n            result.append(char.uppercased())\n\
    \        }\n    }\n    return result", "    return s.characters.reduce(\"\") {\n\
    \        if $1.isLetter {\n            return $0 + String($1).lowercased().uppercased()\n\
    \        }\n        return $0 + String($1)\n    }", "    var result = \"\"\n \
    \   for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n\
    \            result += c.isUppercase ? c.lowercased() : c.uppercased()\n     \
    \   } else {\n            result += String(c)\n        }\n    }\n    return result.isEmpty\
    \ ? String(s.reversed()) : result", "    let letters = CharacterSet.letters\n\
    \    var result = \"\"\n    for char in s {\n        if letters.contains(char.unicodeScalars.first!)\
    \ {\n            if char.isUppercase {\n                result.append(char.lowercased())\n\
    \            } else {\n                result.append(char.uppercased())\n    \
    \        }\n        } else {\n            result.append(char)\n        }\n   \
    \ }\n    return result.isEmpty ? String(s.reversed()) : result", "    if s.isEmpty\
    \ {\n        return s\n    }\n    var result = \"\"\n    for char in s {\n   \
    \     if char.isLetter {\n            result.append(char.isUppercase ? char.lowercased()\
    \ : char.uppercased())\n        } else {\n            result.append(char)\n  \
    \      }\n    }\n    return result.isEmpty ? String(s.reversed()) : result", " \
    \   var result = \"\"\n    for char in s {\n        if char.isLetter {\n     \
    \       result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += char.isUppercase\
    \ ? char.lowercased() : char.uppercased()\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n\
    \            if c.isUppercase {\n                result.append(c.lowercased())\n\
    \            } else {\n                result.append(c.uppercased())\n       \
    \     }\n        } else {\n            result.append(c)\n        }\n    }\n  \
    \  return result.isEmpty ? String(s.reversed()) : result", "    var result = \"\
    \"\n    for char in s {\n        if char.isLetter {\n            result += char.isUppercase\
    \ ? char.lowercased() : char.uppercased()\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            if c.isUppercase {\n   \
    \             result.append(c.lowercased())\n            } else {\n          \
    \      result.append(c.uppercased())\n            }\n        } else {\n      \
    \      result.append(c)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 }", "    var result = \"\"\n    for char in\
    \ s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    let chars = s.map { $0.isLetter\
    \ ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased()) :\
    \ $0 }\n    return String(chars)", "    let letters = s.filter { $0.isLetter }\n\
    \    if letters.isEmpty {\n        return String(s.reversed())\n    }\n    return\
    \ s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased()) : Character($0.uppercased())\
    \ : $0 }", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n\
    \            result += String(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result += String(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    var result = \"\"\n    for char in s {\n        if char.isLetter {\n\
    \            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += char.isUppercase\
    \ ? char.lowercased() : char.uppercased()\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result"]
stop_tokens:
- "\n}"
