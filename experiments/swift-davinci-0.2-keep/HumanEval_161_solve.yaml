name: HumanEval_161_solve
language: swift
prompt: "\n/// You are given a string s.\n/// if s[i] is a letter, reverse its case\
  \ from lower to upper or vise versa, \n/// otherwise keep it as it is.\n/// If the\
  \ string contains no letters, reverse the string.\n/// The function should return\
  \ the resulted string.\n/// Examples\n/// solve(\"1234\") = \"4321\"\n/// solve(\"\
  ab\") = \"AB\"\n/// solve(\"#a@C\") = \"#A@c\"\nfunc solve(s: String) -> String\
  \ {\n"
tests: "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if\
  \ left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left,\
  \ right) {\n        if l != r {\n            return false\n        }\n    }\n  \
  \  return true\n}\n            \nassert(solve(s: \"AsDf\") == \"aSdF\")\nassert(solve(s:\
  \ \"1234\") == \"4321\")\nassert(solve(s: \"ab\") == \"AB\")\nassert(solve(s: \"\
  #a@C\") == \"#A@c\")\nassert(solve(s: \"#AsdfW^45\") == \"#aSDFw^45\")\nassert(solve(s:\
  \ \"#6@2\") == \"2@6#\")\nassert(solve(s: \"#$a^D\") == \"#$A^d\")\nassert(solve(s:\
  \ \"#ccc\") == \"#CCC\")"
completions: ["    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += String(char.isUppercase\
    \ ? char.lowercased() : char.uppercased())\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n\
    \            result.append(c.isUppercase ? c.lowercased() : c.uppercased())\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    guard !s.isEmpty else\
    \ { return s }\n    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result.append(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result.append(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 }", "    var result = \"\"\n    let letters\
    \ = s.filter { $0.isLetter }\n    if letters.isEmpty {\n        result = String(s.reversed())\n\
    \    } else {\n        result = s.map { $0.isLetter ? $0.toggle() : $0 }\n   \
    \ }\n    return result", "    let letters = s.filter { $0.isLetter }\n    if letters.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return s.map { $0.isLetter\
    \ ? $0.toggleCase() : $0 }", "    var result = \"\"\n    for char in s {\n   \
    \     if char.isLetter {\n            result += String(char.isUppercase ? char.lowercased()\
    \ : char.uppercased())\n        } else {\n            result += String(char)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    return s.characters.map\
    \ {\n        if $0.isLetter {\n            return $0.isUppercase ? $0.lowercased()\
    \ : $0.uppercased()\n        }\n        return $0\n    }.reduce(\"\", +)", " \
    \   var result = \"\"\n    for c in s {\n        if c.isLetter {\n           \
    \ if c.isUppercase {\n                result.append(c.lowercased())\n        \
    \    } else {\n                result.append(c.uppercased())\n            }\n\
    \        } else {\n            result.append(c)\n        }\n    }\n    if result.isEmpty\
    \ {\n        return String(s.reversed())\n    }\n    return result", "    var\
    \ result = \"\"\n    for char in s {\n        if char.isLetter {\n           \
    \ result += String(char.isUppercase ? char.lowercased() : char.uppercased())\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for char in s {\n        if char.isLetter {\n            result += char.isUppercase\
    \ ? char.lowercased() : char.uppercased()\n        } else {\n            result\
    \ += String(char)\n        }\n    }\n    return result.isEmpty ? String(s.reversed())\
    \ : result", "    var result = \"\"\n    for char in s {\n        if char.isLetter\
    \ {\n            result += char.isUppercase ? char.lowercased() : char.uppercased()\n\
    \        } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    var result = \"\"\n  \
    \  for c in s {\n        if c.isLetter {\n            result.append(c.isUppercase\
    \ ? c.lowercased() : c.uppercased())\n        } else {\n            result.append(c)\n\
    \        }\n    }\n    return result.isEmpty ? String(s.reversed()) : result",
  "    var result = \"\"\n    for char in s {\n        if char.isLetter {\n      \
    \      result += char.isUppercase ? char.lowercased() : char.uppercased()\n  \
    \      } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result", "    let letters = s.filter\
    \ { $0.isLetter }\n    if letters.isEmpty {\n        return String(s.reversed())\n\
    \    }\n    return String(s.map { $0.isLetter ? $0.isUppercase ? Character($0.lowercased())\
    \ : Character($0.uppercased()) : $0 })", "    var result = \"\"\n    for char\
    \ in s {\n        if char.isLetter {\n            if char.isUppercase {\n    \
    \            result.append(char.lowercased())\n            } else {\n        \
    \        result.append(char.uppercased())\n            }\n        } else {\n \
    \           result.append(char)\n        }\n    }\n    if result.isEmpty {\n \
    \       return String(s.reversed())\n    }\n    return result", "    var result\
    \ = \"\"\n    for char in s {\n        if char.isLetter {\n            result\
    \ += String(char.isUppercase ? char.lowercased() : char.uppercased())\n      \
    \  } else {\n            result += String(char)\n        }\n    }\n    return\
    \ result.isEmpty ? String(s.reversed()) : result"]
stop_tokens:
- "\n}"
